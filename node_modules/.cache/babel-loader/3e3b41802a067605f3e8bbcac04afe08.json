{"ast":null,"code":"import { getCoordPath } from \"../pathsInfo/getCoordPath\";\nimport { getPath } from \"../pathsInfo/getPath\";\nimport { getPiecesOnPath } from \"./getPiecesOnPath\";\nimport { getStatuses } from \"./getStatuses\";\nimport { getPieceMatchesPath } from \"./getPieceMatchesPath\";\nimport { stepFuncDict } from \"../helpers/stepFuncs\";\nexport function getPathData(board, sqr, color, pieceDefs, idDict, pathDir) {\n  /*get all info about a path on board determined by step function stemming from sqr**/\n  var stepFunc = stepFuncDict[\"step_1sqr\" + pathDir];\n  let [x, y] = [...sqr];\n  var coordPath = getCoordPath(x, y, stepFunc);\n  var path = getPath(board, x, y, stepFunc);\n  var pieceIds = getPiecesOnPath(board, x, y, stepFunc);\n  var statuses = getStatuses(pieceIds, color);\n  var pieceMatchesPath = [];\n  var id, pieceName;\n\n  for (var pieceId of pieceIds) {\n    id = pieceId[1].toLowerCase();\n    pieceName = idDict[id];\n    pieceMatchesPath.push(getPieceMatchesPath(\"step_1sqr\" + pathDir, pieceDefs, pieceName, color));\n  }\n\n  return [coordPath, path, pieceIds, statuses, pieceMatchesPath];\n} // module.exports = getPathData;\n\n/** for node.js\nif (require.main === module) {\n    let board = sampleBoardDicts[\"check_example3\"];\n    let pieceDefs = getStandardPieceDefs();\n    let idDict = getStandardIdDict();\n\n    // test 1, 90:\n    console.log(\"test 1:\");\n    var [coordPath, path, pieces, statuses, pieceMatchesPath] = getPathData(\n        board,\n        [4, 4],\n        \"W\",\n        pieceDefs,\n        idDict,\n        step_1sqr90d\n    );\n    printBoard(\n        board,\n        `path:${path} pieces:${pieces} statuses:${statuses} pieceMatchesPath:${pieceMatchesPath}`,\n        mapListXyToRf(coordPath),\n        [\"d4\"]\n    );\n    console.log(\"\");\n\n\n    // test 2, 45:\n    console.log(\"test 2:\")\n    var [coordPath, path, pieces, statusVals, pieceMatchesPath] = getPathData(\n        board,\n        [4, 4],\n        \"W\",\n        pieceDefs,\n        idDict,\n        step_1sqr45d\n    );\n    printBoard(\n        board,\n        `path:${path} pieces:${pieces} statuses:${statusVals} pieceMatchesPath:${pieceMatchesPath}`,\n        mapListXyToRf(coordPath),\n        [\"d4\"]\n    );\n    console.log(\"\");\n\n\n    // test 3, 0:\n    console.log(\"test 3:\")\n    var [coordPath, path, pieces, statuses, pieceMatchesPath] = getPathData(\n        board,\n        [4, 4],\n        \"W\",\n        pieceDefs,\n        idDict,\n        step_1sqr0d\n    );\n    printBoard(\n        board,\n        `path:${path} pieces:${pieces} statuses:${statuses} pieceMatchesPath:${pieceMatchesPath}`,\n        mapListXyToRf(coordPath),\n        [\"d4\"]\n    );\n    console.log(\"\");\n\n    \n    // test 4, 315:\n    // console.log(\"test 4:\")\n    var [coordPath, path, pieces, statuses, pieceMatchesPath] = getPathData(\n        board,\n        [4, 4],\n        \"W\",\n        pieceDefs,\n        idDict,\n        step_1sqr315d\n    );\n    printBoard(\n        board,\n        `path:${path} pieces:${pieces} statuses:${statuses} pieceMatchesPath:${pieceMatchesPath}`,\n        mapListXyToRf(coordPath),\n        [\"d4\"]\n    );\n    console.log(\"\");\n\n\n    // test 5, 270:\n    console.log(\"test 5:\")\n    var [coordPath, path, pieces, statuses, pieceMatchesPath] = getPathData(\n        board,\n        [4, 4],\n        \"W\",\n        pieceDefs,\n        idDict,\n        step_1sqr270d\n    );\n    printBoard(\n        board,\n        `path:${path} pieces:${pieces} statuses:${statuses} pieceMatchesPath:${pieceMatchesPath}`,\n        mapListXyToRf(coordPath),\n        [\"d4\"]\n    );\n    console.log(\"\");\n\n\n    // test 6, 225:\n    console.log(\"test 6:\")\n    var [coordPath, path, pieces, statuses, pieceMatchesPath] = getPathData(\n        board,\n        [4, 4],\n        \"W\",\n        pieceDefs,\n        idDict,\n        step_1sqr225d\n    );\n    printBoard(\n        board,\n        `path:${path} pieces:${pieces} statuses:${statuses} pieceMatchesPath:${pieceMatchesPath}`,\n        mapListXyToRf(coordPath),\n        [\"d4\"]\n    );\n    console.log(\"\");\n\n\n    // test 7, 180:\n    console.log(\"test 7:\")\n    var [coordPath, path, pieces, statuses, pieceMatchesPath] = getPathData(\n        board,\n        [4, 4],\n        \"W\",\n        pieceDefs,\n        idDict,\n        step_1sqr180d\n    );\n    printBoard(\n        board,\n        `path:${path} pieces:${pieces} statuses:${statuses} pieceMatchesPath:${pieceMatchesPath}`,\n        mapListXyToRf(coordPath),\n        [\"d4\"]\n    );\n    console.log(\"\");\n\n\n    // test 8, 135:\n    console.log(\"test 8:\")\n    var [coordPath, path, pieces, statuses, pieceMatchesPath] = getPathData(\n        board,\n        [4, 4],\n        \"W\",\n        pieceDefs,\n        idDict,\n        step_1sqr135d\n    );\n    printBoard(\n        board,\n        `path:${path} pieces:${pieces} statuses:${statuses} pieceMatchesPath:${pieceMatchesPath}`,\n        mapListXyToRf(coordPath),\n        [\"d4\"]\n    );\n    console.log(\"\");\n\n}\n*/","map":{"version":3,"sources":["/home/brian/ChessKingsCouncil/app/src/game_logic/pathsInfo/getPathData.js"],"names":["getCoordPath","getPath","getPiecesOnPath","getStatuses","getPieceMatchesPath","stepFuncDict","getPathData","board","sqr","color","pieceDefs","idDict","pathDir","stepFunc","x","y","coordPath","path","pieceIds","statuses","pieceMatchesPath","id","pieceName","pieceId","toLowerCase","push"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,2BAA3B;AACA,SAAQC,OAAR,QAAsB,sBAAtB;AACA,SAAQC,eAAR,QAA8B,mBAA9B;AACA,SAAQC,WAAR,QAA0B,eAA1B;AACA,SAAQC,mBAAR,QAAkC,uBAAlC;AACA,SAAQC,YAAR,QAA2B,sBAA3B;AAIA,OAAO,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,GAA5B,EAAiCC,KAAjC,EAAwCC,SAAxC,EAAmDC,MAAnD,EAA2DC,OAA3D,EAAoE;AACvE;AACA,MAAIC,QAAQ,GAAGR,YAAY,CAAC,cAAaO,OAAd,CAA3B;AACA,MAAI,CAACE,CAAD,EAAIC,CAAJ,IAAS,CAAC,GAAGP,GAAJ,CAAb;AACA,MAAIQ,SAAS,GAAGhB,YAAY,CAACc,CAAD,EAAIC,CAAJ,EAAOF,QAAP,CAA5B;AACA,MAAII,IAAI,GAAGhB,OAAO,CAACM,KAAD,EAAQO,CAAR,EAAWC,CAAX,EAAcF,QAAd,CAAlB;AACA,MAAIK,QAAQ,GAAGhB,eAAe,CAACK,KAAD,EAAQO,CAAR,EAAWC,CAAX,EAAcF,QAAd,CAA9B;AACA,MAAIM,QAAQ,GAAGhB,WAAW,CAACe,QAAD,EAAWT,KAAX,CAA1B;AACA,MAAIW,gBAAgB,GAAG,EAAvB;AACA,MAAIC,EAAJ,EAAQC,SAAR;;AACA,OAAK,IAAIC,OAAT,IAAoBL,QAApB,EAA8B;AAC1BG,IAAAA,EAAE,GAAGE,OAAO,CAAC,CAAD,CAAP,CAAWC,WAAX,EAAL;AACAF,IAAAA,SAAS,GAAGX,MAAM,CAACU,EAAD,CAAlB;AACAD,IAAAA,gBAAgB,CAACK,IAAjB,CAAsBrB,mBAAmB,CAAC,cAAcQ,OAAf,EAAwBF,SAAxB,EAAmCY,SAAnC,EAA8Cb,KAA9C,CAAzC;AACH;;AACD,SAAO,CAACO,SAAD,EAAYC,IAAZ,EAAkBC,QAAlB,EAA4BC,QAA5B,EAAsCC,gBAAtC,CAAP;AACH,C,CAED;;AAEA","sourcesContent":["import {getCoordPath} from \"../pathsInfo/getCoordPath\";\nimport {getPath} from \"../pathsInfo/getPath\";\nimport {getPiecesOnPath} from \"./getPiecesOnPath\";\nimport {getStatuses} from \"./getStatuses\";\nimport {getPieceMatchesPath} from \"./getPieceMatchesPath\";\nimport {stepFuncDict} from \"../helpers/stepFuncs\"\n\n\n\nexport function getPathData(board, sqr, color, pieceDefs, idDict, pathDir) {\n    /*get all info about a path on board determined by step function stemming from sqr**/\n    var stepFunc = stepFuncDict[\"step_1sqr\"+ pathDir]\n    let [x, y] = [...sqr];\n    var coordPath = getCoordPath(x, y, stepFunc);\n    var path = getPath(board, x, y, stepFunc);\n    var pieceIds = getPiecesOnPath(board, x, y, stepFunc);\n    var statuses = getStatuses(pieceIds, color);\n    var pieceMatchesPath = [];\n    var id, pieceName;\n    for (var pieceId of pieceIds) {\n        id = pieceId[1].toLowerCase();\n        pieceName = idDict[id];\n        pieceMatchesPath.push(getPieceMatchesPath(\"step_1sqr\" + pathDir, pieceDefs, pieceName, color));\n    }\n    return [coordPath, path, pieceIds, statuses, pieceMatchesPath];\n}\n\n// module.exports = getPathData;\n\n/** for node.js\nif (require.main === module) {\n    let board = sampleBoardDicts[\"check_example3\"];\n    let pieceDefs = getStandardPieceDefs();\n    let idDict = getStandardIdDict();\n\n    // test 1, 90:\n    console.log(\"test 1:\");\n    var [coordPath, path, pieces, statuses, pieceMatchesPath] = getPathData(\n        board,\n        [4, 4],\n        \"W\",\n        pieceDefs,\n        idDict,\n        step_1sqr90d\n    );\n    printBoard(\n        board,\n        `path:${path} pieces:${pieces} statuses:${statuses} pieceMatchesPath:${pieceMatchesPath}`,\n        mapListXyToRf(coordPath),\n        [\"d4\"]\n    );\n    console.log(\"\");\n\n\n    // test 2, 45:\n    console.log(\"test 2:\")\n    var [coordPath, path, pieces, statusVals, pieceMatchesPath] = getPathData(\n        board,\n        [4, 4],\n        \"W\",\n        pieceDefs,\n        idDict,\n        step_1sqr45d\n    );\n    printBoard(\n        board,\n        `path:${path} pieces:${pieces} statuses:${statusVals} pieceMatchesPath:${pieceMatchesPath}`,\n        mapListXyToRf(coordPath),\n        [\"d4\"]\n    );\n    console.log(\"\");\n\n\n    // test 3, 0:\n    console.log(\"test 3:\")\n    var [coordPath, path, pieces, statuses, pieceMatchesPath] = getPathData(\n        board,\n        [4, 4],\n        \"W\",\n        pieceDefs,\n        idDict,\n        step_1sqr0d\n    );\n    printBoard(\n        board,\n        `path:${path} pieces:${pieces} statuses:${statuses} pieceMatchesPath:${pieceMatchesPath}`,\n        mapListXyToRf(coordPath),\n        [\"d4\"]\n    );\n    console.log(\"\");\n\n    \n    // test 4, 315:\n    // console.log(\"test 4:\")\n    var [coordPath, path, pieces, statuses, pieceMatchesPath] = getPathData(\n        board,\n        [4, 4],\n        \"W\",\n        pieceDefs,\n        idDict,\n        step_1sqr315d\n    );\n    printBoard(\n        board,\n        `path:${path} pieces:${pieces} statuses:${statuses} pieceMatchesPath:${pieceMatchesPath}`,\n        mapListXyToRf(coordPath),\n        [\"d4\"]\n    );\n    console.log(\"\");\n\n\n    // test 5, 270:\n    console.log(\"test 5:\")\n    var [coordPath, path, pieces, statuses, pieceMatchesPath] = getPathData(\n        board,\n        [4, 4],\n        \"W\",\n        pieceDefs,\n        idDict,\n        step_1sqr270d\n    );\n    printBoard(\n        board,\n        `path:${path} pieces:${pieces} statuses:${statuses} pieceMatchesPath:${pieceMatchesPath}`,\n        mapListXyToRf(coordPath),\n        [\"d4\"]\n    );\n    console.log(\"\");\n\n\n    // test 6, 225:\n    console.log(\"test 6:\")\n    var [coordPath, path, pieces, statuses, pieceMatchesPath] = getPathData(\n        board,\n        [4, 4],\n        \"W\",\n        pieceDefs,\n        idDict,\n        step_1sqr225d\n    );\n    printBoard(\n        board,\n        `path:${path} pieces:${pieces} statuses:${statuses} pieceMatchesPath:${pieceMatchesPath}`,\n        mapListXyToRf(coordPath),\n        [\"d4\"]\n    );\n    console.log(\"\");\n\n\n    // test 7, 180:\n    console.log(\"test 7:\")\n    var [coordPath, path, pieces, statuses, pieceMatchesPath] = getPathData(\n        board,\n        [4, 4],\n        \"W\",\n        pieceDefs,\n        idDict,\n        step_1sqr180d\n    );\n    printBoard(\n        board,\n        `path:${path} pieces:${pieces} statuses:${statuses} pieceMatchesPath:${pieceMatchesPath}`,\n        mapListXyToRf(coordPath),\n        [\"d4\"]\n    );\n    console.log(\"\");\n\n\n    // test 8, 135:\n    console.log(\"test 8:\")\n    var [coordPath, path, pieces, statuses, pieceMatchesPath] = getPathData(\n        board,\n        [4, 4],\n        \"W\",\n        pieceDefs,\n        idDict,\n        step_1sqr135d\n    );\n    printBoard(\n        board,\n        `path:${path} pieces:${pieces} statuses:${statuses} pieceMatchesPath:${pieceMatchesPath}`,\n        mapListXyToRf(coordPath),\n        [\"d4\"]\n    );\n    console.log(\"\");\n\n}\n*/\n"]},"metadata":{},"sourceType":"module"}