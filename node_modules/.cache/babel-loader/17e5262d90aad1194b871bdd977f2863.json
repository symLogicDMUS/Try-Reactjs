{"ast":null,"code":"var _jsxFileName = \"/home/brian/ChessKingsCouncil/app/src/Components/LoadGame/LoadGame.jsx\";\nimport React from \"react\";\nimport { SelectGame } from \"./SelectGame\";\nimport { Redirect } from \"react-router-dom\";\nimport { getGames } from \"../../API/getGames\";\nimport { initEmptyRanges } from \"../../apiHelpers/initEmptyRanges\";\nimport { offsetStrsToList } from \"../../apiHelpers/offsetStrsToList\";\nimport { parseData } from \"../../apiHelpers/parseData\";\nimport \"./LoadGame.css\";\nexport class LoadGame extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameName: \"none\",\n      loaded: false,\n      reload: 0\n    };\n    this.council = false;\n    this.selected = false;\n    this.dataEntry = null;\n    this.pieceDefs = null;\n    this.games = null;\n    this.gameList = [/*#__PURE__*/React.createElement(\"option\", {\n      value: \"choose\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 26\n      }\n    }, \"Loading...\")];\n    this.load = this.load.bind(this);\n    this.changeName = this.changeName.bind(this);\n  }\n\n  componentDidMount() {\n    document.body.className = \"load-game-body\";\n    this.gameList = [/*#__PURE__*/React.createElement(\"option\", {\n      value: \"choose\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 22\n      }\n    }, \"Choose...\")];\n    getGames().then(([games]) => {\n      if (games) this.games = games;else this.games = {};\n\n      for (var name of Object.keys(this.games)) {\n        this.gameList.push( /*#__PURE__*/React.createElement(\"option\", {\n          value: name,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 30\n          }\n        }, name));\n      }\n\n      this.setState({\n        gameName: \"none\",\n        loaded: false,\n        reload: !this.state.reload\n      });\n    });\n  }\n\n  changeName(name) {\n    if (name === \"choose\") {\n      this.selected = false; //refrenced by child\n\n      this.setState({\n        gameName: \"none\"\n      });\n    } else {\n      this.selected = true; //referenced by child\n\n      this.setState({\n        gameName: name\n      });\n    }\n  }\n\n  load() {\n    this.gameData = this.games[this.state.gameName];\n    this.gameData['defs'] = initEmptyRanges(this.gameData['defs']);\n    this.gameData['defs'] = offsetStrsToList(this.gameData['defs']);\n    this.gameData = parseData(this.gameData);\n    this.setState({\n      loaded: true\n    });\n  }\n\n  render() {\n    if (this.state.loaded === false) {\n      return /*#__PURE__*/React.createElement(SelectGame, {\n        handleChange: this.changeName,\n        games: this.gameList,\n        selected: this.selected,\n        load: this.load,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 14\n        }\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: {\n          pathname: \"/LoadGame/Play\",\n          state: {\n            currentPage: \"/LoadGame/Play\",\n            gameName: JSON.parse(JSON.stringify(this.state.gameName)),\n            gameType: JSON.parse(JSON.stringify(this.gameData['type'])),\n            playerType: JSON.parse(JSON.stringify(this.gameData['pt'])),\n            gameData: JSON.parse(JSON.stringify(this.gameData))\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 15\n        }\n      });\n    }\n    /** \n     * note: the pieceDefs attribute passed as seperate prop because NewGame passes it is a seperate prop\n     * because pieceDefs is not the same for every new game data, it is defined by the user.   \n     */\n\n  }\n\n}\nexport default LoadGame;","map":{"version":3,"sources":["/home/brian/ChessKingsCouncil/app/src/Components/LoadGame/LoadGame.jsx"],"names":["React","SelectGame","Redirect","getGames","initEmptyRanges","offsetStrsToList","parseData","LoadGame","Component","constructor","props","state","gameName","loaded","reload","council","selected","dataEntry","pieceDefs","games","gameList","load","bind","changeName","componentDidMount","document","body","className","then","name","Object","keys","push","setState","gameData","render","pathname","currentPage","JSON","parse","stringify","gameType","playerType"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {SelectGame} from \"./SelectGame\";\nimport { Redirect } from \"react-router-dom\";\nimport { getGames } from \"../../API/getGames\";\nimport {initEmptyRanges} from \"../../apiHelpers/initEmptyRanges\";\nimport {offsetStrsToList} from \"../../apiHelpers/offsetStrsToList\";\nimport {parseData} from \"../../apiHelpers/parseData\";\nimport \"./LoadGame.css\";\n\n\nexport class LoadGame extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {gameName: \"none\", loaded:false, reload: 0}\n        this.council = false;\n        this.selected = false;\n        this.dataEntry = null; \n        this.pieceDefs = null;\n        this.games = null;\n        this.gameList = [<option value=\"choose\">Loading...</option>];\n        this.load = this.load.bind(this);\n        this.changeName = this.changeName.bind(this);\n\n    }\n\n  componentDidMount() {\n\n    document.body.className = \"load-game-body\";\n\n    this.gameList = [<option value=\"choose\">Choose...</option>];\n    getGames().then( ([games]) => {\n      if (games)\n          this.games = games\n        else\n          this.games = {}\n\n        for (var name of Object.keys(this.games)) {\n          this.gameList.push(<option value={name}>{name}</option>)\n        }\n\n        this.setState({gameName: \"none\", loaded: false, reload: ! this.state.reload});\n    });\n\n  }\n\n  changeName(name) {\n        if (name === \"choose\") {\n            this.selected = false; //refrenced by child\n            this.setState({gameName: \"none\"})\n        }\n        else {\n            this.selected = true; //referenced by child\n            this.setState({gameName: name});\n        }\n  }\n\n    load() {\n          this.gameData = this.games[this.state.gameName];\n          this.gameData['defs'] = initEmptyRanges(this.gameData['defs'])\n          this.gameData['defs'] = offsetStrsToList(this.gameData['defs'])\n          this.gameData = parseData(this.gameData)\n          this.setState({loaded: true});\n    }\n\n  render() {\n\n    if (this.state.loaded === false) {\n      return <SelectGame handleChange={this.changeName} \n                         games={this.gameList} \n                         selected={this.selected} \n                         load={this.load} />\n    }\n\n    else {\n\n      return (<Redirect to={{\n                pathname:\"/LoadGame/Play\",\n                state: {currentPage:\"/LoadGame/Play\",\n                        gameName:JSON.parse(JSON.stringify(this.state.gameName)),\n                        gameType:JSON.parse(JSON.stringify(this.gameData['type'])),\n                        playerType:JSON.parse(JSON.stringify(this.gameData['pt'])),\n                        gameData:JSON.parse(JSON.stringify(this.gameData))\n                      }     \n              }}/>);\n    }\n    /** \n     * note: the pieceDefs attribute passed as seperate prop because NewGame passes it is a seperate prop\n     * because pieceDefs is not the same for every new game data, it is defined by the user.   \n     */\n  }\n  \n}\n\nexport default LoadGame;\n"]},"metadata":{},"sourceType":"module"}