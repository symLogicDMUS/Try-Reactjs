{"ast":null,"code":"import { getTurnData } from \"./getTurnData\";\nimport { Fen } from \"../game_logic/fenParser/Fen\";\nimport { getFenDict } from \"../game_logic/fenParser/getFenDict\";\nimport { getBoard } from \"../game_logic/fenParser/getBoard/top/getBoard\";\nimport { getFenData } from \"../game_logic/fenParser/GameStatus/getFenData\";\nimport { JsonRecords } from \"../game_logic/JsonRecords/JsonRecords\";\nimport { initPawnIds } from \"../game_logic/JsonRecords/initPawnIds\";\nimport { getAiColor } from \"../game_logic/color/getAiColor\";\nimport { getNextColor as getEnemyColor } from \"../game_logic/color/getNextColor\";\nexport function parseData(data) {\n  /*called at start of new or saved game. Get first instance of turn data. parameters are data fetched from db\n   * NOTE: data needed combined as single object. (this is why includes unmodified values status, promos, and type).\n   * The method gathers all relavent data into single object and returns it.\n  **/\n  var [fen, records, playerColor, pieceDefs, idDict] = [data['fen'], data['json'], data['pt'], data['defs'], data['ids']];\n  var board = getBoard(fen);\n  var jsonRecords = new JsonRecords(initPawnIds(records, board));\n  var [turn, castleAvail, enPassantAvail, hmNum, fmNum] = getFenData(fen);\n  var fenObj = new Fen(getFenDict(fen, turn, castleAvail, enPassantAvail, hmNum, fmNum));\n  var color = fenObj.turn.toUpperCase();\n  var aiColor = getAiColor(playerColor);\n  var turnData = getTurnData(board, color, aiColor, jsonRecords, pieceDefs, idDict);\n  var enemyTurnData = getTurnData(board, getEnemyColor(color), aiColor, jsonRecords, pieceDefs, idDict);\n  return {\n    'color': color,\n    'board': board,\n    'json_records': jsonRecords.getRecords(),\n    'special_moves': turnData['special_moves'],\n    'fen_data': fenObj.getData(),\n    'piece_defs': pieceDefs,\n    'id_dict': idDict,\n    'ranges': turnData['ranges'],\n    'enemy_ranges': enemyTurnData['ranges'],\n    'ai_start': turnData['ai_start'],\n    'ai_dest': turnData['ai_dest'],\n    'ai_capture': turnData['ai_capture'],\n    'status': data['status'],\n    'promos': data['promos'],\n    'type': data['type'],\n    'pt': playerColor\n  };\n} // module.exports = parseData;\n\n/** for node.js\nif (require.main === module) {\n    let dataDict = getJson(\"../../testObjects/dataDicts/dd2.json\")\n    dataDict = initDdEmptyLists(dataDict)\n    dataDict = ddOffsetStrsToList(dataDict)\n    for (var gameName of Object.keys(dataDict)) {\n        dataDict[gameName] = parseData(dataDict[gameName])\n    }\n    console.log(\"================================== records ==================================\")\n    for (var gameName of Object.keys(dataDict)) {\n        console.log(gameName, \":\")\n        console.log(dataDict[gameName]['records'])\n    }\n    console.log(\"================================== board ==================================\")\n    for (var gameName of Object.keys(dataDict)) {\n        console.log(gameName, \":\")\n        console.log(dataDict[gameName]['board'])\n    }\n    console.log(\"================================== moves ==================================\")\n    for (var gameName of Object.keys(dataDict)) {\n        console.log(gameName, \":\")\n        console.log(dataDict[gameName]['moves'])\n    }\n    console.log(\"================================== ranges ==================================\")\n    for (var gameName of Object.keys(dataDict)) {\n        console.log(gameName, \":\")\n        console.log(dataDict[gameName]['ranges'])\n    }\n    console.log(\"================================== enemyRanges ==================================\")\n    for (var gameName of Object.keys(dataDict)) {\n        console.log(gameName, \":\")\n        console.log(dataDict[gameName]['enemyRanges'])\n    }\n    console.log(\"================================== aiStart ==================================\")\n    for (var gameName of Object.keys(dataDict)) {\n        console.log(gameName, \":\")\n        console.log(dataDict[gameName]['aiStart'])\n    }\n    console.log(\"================================== aiDest ==================================\")\n    for (var gameName of Object.keys(dataDict)) {\n        console.log(gameName, \":\")\n        console.log(dataDict[gameName]['aiDest'])\n    }\n    console.log(\"================================== aiCapture ==================================\")\n    for (var gameName of Object.keys(dataDict)) {\n        console.log(gameName, \":\")\n    }\n\n    console.log(dataDict[gameName]['aiCapture'])\n}\n*/","map":{"version":3,"sources":["/home/brian/ChessKingsCouncil/app/src/apiHelpers/parseData.js"],"names":["getTurnData","Fen","getFenDict","getBoard","getFenData","JsonRecords","initPawnIds","getAiColor","getNextColor","getEnemyColor","parseData","data","fen","records","playerColor","pieceDefs","idDict","board","jsonRecords","turn","castleAvail","enPassantAvail","hmNum","fmNum","fenObj","color","toUpperCase","aiColor","turnData","enemyTurnData","getRecords","getData"],"mappings":"AAEA,SAAQA,WAAR,QAA0B,eAA1B;AACA,SAAQC,GAAR,QAAkB,6BAAlB;AACA,SAAQC,UAAR,QAAyB,oCAAzB;AACA,SAAQC,QAAR,QAAuB,+CAAvB;AACA,SAAQC,UAAR,QAAyB,+CAAzB;AACA,SAAQC,WAAR,QAA0B,uCAA1B;AACA,SAAQC,WAAR,QAA0B,uCAA1B;AACA,SAAQC,UAAR,QAAyB,gCAAzB;AACA,SAAQC,YAAY,IAAIC,aAAxB,QAA4C,kCAA5C;AAGA,OAAO,SAASC,SAAT,CAAmBC,IAAnB,EAAyB;AAC5B;;;;AAIA,MAAI,CAACC,GAAD,EAAMC,OAAN,EAAeC,WAAf,EAA4BC,SAA5B,EAAuCC,MAAvC,IAAiD,CAACL,IAAI,CAAC,KAAD,CAAL,EAAcA,IAAI,CAAC,MAAD,CAAlB,EAA4BA,IAAI,CAAC,IAAD,CAAhC,EAAwCA,IAAI,CAAC,MAAD,CAA5C,EAAsDA,IAAI,CAAC,KAAD,CAA1D,CAArD;AACA,MAAIM,KAAK,GAAGd,QAAQ,CAACS,GAAD,CAApB;AACA,MAAIM,WAAW,GAAG,IAAIb,WAAJ,CAAgBC,WAAW,CAACO,OAAD,EAAUI,KAAV,CAA3B,CAAlB;AACA,MAAI,CAACE,IAAD,EAAOC,WAAP,EAAoBC,cAApB,EAAoCC,KAApC,EAA2CC,KAA3C,IAAoDnB,UAAU,CAACQ,GAAD,CAAlE;AACA,MAAIY,MAAM,GAAG,IAAIvB,GAAJ,CAAQC,UAAU,CAACU,GAAD,EAAMO,IAAN,EAAYC,WAAZ,EAAyBC,cAAzB,EAAyCC,KAAzC,EAAgDC,KAAhD,CAAlB,CAAb;AACA,MAAIE,KAAK,GAAGD,MAAM,CAACL,IAAP,CAAYO,WAAZ,EAAZ;AACA,MAAIC,OAAO,GAAGpB,UAAU,CAACO,WAAD,CAAxB;AACA,MAAIc,QAAQ,GAAG5B,WAAW,CAACiB,KAAD,EAAQQ,KAAR,EAAeE,OAAf,EAAwBT,WAAxB,EAAqCH,SAArC,EAAgDC,MAAhD,CAA1B;AACA,MAAIa,aAAa,GAAG7B,WAAW,CAACiB,KAAD,EAAQR,aAAa,CAACgB,KAAD,CAArB,EAA8BE,OAA9B,EAAuCT,WAAvC,EAAqDH,SAArD,EAAgEC,MAAhE,CAA/B;AACA,SAAO;AACC,aAASS,KADV;AAEC,aAASR,KAFV;AAGC,oBAAgBC,WAAW,CAACY,UAAZ,EAHjB;AAIC,qBAAiBF,QAAQ,CAAC,eAAD,CAJ1B;AAKC,gBAAYJ,MAAM,CAACO,OAAP,EALb;AAMC,kBAAchB,SANf;AAOC,eAAWC,MAPZ;AAQC,cAAUY,QAAQ,CAAC,QAAD,CARnB;AASC,oBAAgBC,aAAa,CAAC,QAAD,CAT9B;AAUC,gBAAYD,QAAQ,CAAC,UAAD,CAVrB;AAWC,eAAWA,QAAQ,CAAC,SAAD,CAXpB;AAYC,kBAAcA,QAAQ,CAAC,YAAD,CAZvB;AAaC,cAAUjB,IAAI,CAAC,QAAD,CAbf;AAcC,cAAUA,IAAI,CAAC,QAAD,CAdf;AAeC,YAAQA,IAAI,CAAC,MAAD,CAfb;AAgBC,UAAMG;AAhBP,GAAP;AAkBH,C,CAED;;AAEA","sourcesContent":["\n\nimport {getTurnData} from \"./getTurnData\";\nimport {Fen} from \"../game_logic/fenParser/Fen\";\nimport {getFenDict} from \"../game_logic/fenParser/getFenDict\";\nimport {getBoard} from \"../game_logic/fenParser/getBoard/top/getBoard\";\nimport {getFenData} from \"../game_logic/fenParser/GameStatus/getFenData\";\nimport {JsonRecords} from \"../game_logic/JsonRecords/JsonRecords\";\nimport {initPawnIds} from \"../game_logic/JsonRecords/initPawnIds\";\nimport {getAiColor} from \"../game_logic/color/getAiColor\";\nimport {getNextColor as getEnemyColor} from \"../game_logic/color/getNextColor\";\n\n\nexport function parseData(data) {\n    /*called at start of new or saved game. Get first instance of turn data. parameters are data fetched from db\n     * NOTE: data needed combined as single object. (this is why includes unmodified values status, promos, and type).\n     * The method gathers all relavent data into single object and returns it.\n    **/\n    var [fen, records, playerColor, pieceDefs, idDict] = [data['fen'], data['json'], data['pt'], data['defs'], data['ids']]\n    var board = getBoard(fen)\n    var jsonRecords = new JsonRecords(initPawnIds(records, board))\n    var [turn, castleAvail, enPassantAvail, hmNum, fmNum] = getFenData(fen)\n    var fenObj = new Fen(getFenDict(fen, turn, castleAvail, enPassantAvail, hmNum, fmNum));\n    var color = fenObj.turn.toUpperCase()\n    var aiColor = getAiColor(playerColor)\n    var turnData = getTurnData(board, color, aiColor, jsonRecords, pieceDefs, idDict)\n    var enemyTurnData = getTurnData(board, getEnemyColor(color), aiColor, jsonRecords,  pieceDefs, idDict)\n    return {\n            'color': color,\n            'board': board,\n            'json_records': jsonRecords.getRecords(),\n            'special_moves': turnData['special_moves'],\n            'fen_data': fenObj.getData(),\n            'piece_defs': pieceDefs,\n            'id_dict': idDict,\n            'ranges': turnData['ranges'],\n            'enemy_ranges': enemyTurnData['ranges'],\n            'ai_start': turnData['ai_start'],\n            'ai_dest': turnData['ai_dest'],\n            'ai_capture': turnData['ai_capture'],\n            'status': data['status'],\n            'promos': data['promos'],\n            'type': data['type'],\n            'pt': playerColor \n    }\n} \n\n// module.exports = parseData;\n\n/** for node.js\nif (require.main === module) {\n    let dataDict = getJson(\"../../testObjects/dataDicts/dd2.json\")\n    dataDict = initDdEmptyLists(dataDict)\n    dataDict = ddOffsetStrsToList(dataDict)\n    for (var gameName of Object.keys(dataDict)) {\n        dataDict[gameName] = parseData(dataDict[gameName])\n    }\n    console.log(\"================================== records ==================================\")\n    for (var gameName of Object.keys(dataDict)) {\n        console.log(gameName, \":\")\n        console.log(dataDict[gameName]['records'])\n    }\n    console.log(\"================================== board ==================================\")\n    for (var gameName of Object.keys(dataDict)) {\n        console.log(gameName, \":\")\n        console.log(dataDict[gameName]['board'])\n    }\n    console.log(\"================================== moves ==================================\")\n    for (var gameName of Object.keys(dataDict)) {\n        console.log(gameName, \":\")\n        console.log(dataDict[gameName]['moves'])\n    }\n    console.log(\"================================== ranges ==================================\")\n    for (var gameName of Object.keys(dataDict)) {\n        console.log(gameName, \":\")\n        console.log(dataDict[gameName]['ranges'])\n    }\n    console.log(\"================================== enemyRanges ==================================\")\n    for (var gameName of Object.keys(dataDict)) {\n        console.log(gameName, \":\")\n        console.log(dataDict[gameName]['enemyRanges'])\n    }\n    console.log(\"================================== aiStart ==================================\")\n    for (var gameName of Object.keys(dataDict)) {\n        console.log(gameName, \":\")\n        console.log(dataDict[gameName]['aiStart'])\n    }\n    console.log(\"================================== aiDest ==================================\")\n    for (var gameName of Object.keys(dataDict)) {\n        console.log(gameName, \":\")\n        console.log(dataDict[gameName]['aiDest'])\n    }\n    console.log(\"================================== aiCapture ==================================\")\n    for (var gameName of Object.keys(dataDict)) {\n        console.log(gameName, \":\")\n    }\n\n    console.log(dataDict[gameName]['aiCapture'])\n}\n*/\n\n"]},"metadata":{},"sourceType":"module"}