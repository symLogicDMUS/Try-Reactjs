{"ast":null,"code":"import { rentIds } from \"../rentIds\";\nimport { getStandardIds } from \"../getStandardIds\";\nimport { subIds } from \"../subIds\";\nexport function idAssign(customPieceNames, subs) {\n  /**\n  assign custom piece names to standard piece ids, therefore \"subbing\" for those standard pieces. Standard ids not subed\n  for keep their standard piece assignments. For custom pieces not subed but that are pawn promotion options, rent from\n  1 of 20 non-standard ids.\n  */\n  var idDict = subIds(subs);\n  idDict = rentIds(idDict, customPieceNames, Object.keys(subs)); // \"ignore\" subs because just did that\n\n  idDict = { ...idDict,\n    ...getStandardIds(Object.values(subs))\n  }; // get ids the of standard pieces not subbing for.\n\n  return idDict;\n}\n/**  for node.js\nif (require.main === module) {\n    console.log(idAssign(['Jester',\n                      'Duke',\n                      'Joker',\n                      'Morty'], {'Jester': 'Queen', 'Duke': 'Bishop'}))\n}\n*/","map":{"version":3,"sources":["/home/brian/ChessKingsCouncil/app/src/apiHelpers/idAssign/top/idAssign.js"],"names":["rentIds","getStandardIds","subIds","idAssign","customPieceNames","subs","idDict","Object","keys","values"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,YAAtB;AACA,SAAQC,cAAR,QAA6B,mBAA7B;AACA,SAAQC,MAAR,QAAqB,WAArB;AAEA,OAAO,SAASC,QAAT,CAAkBC,gBAAlB,EAAoCC,IAApC,EAA0C;AAC7C;;;;;AAKA,MAAIC,MAAM,GAAGJ,MAAM,CAACG,IAAD,CAAnB;AACAC,EAAAA,MAAM,GAAGN,OAAO,CAACM,MAAD,EAASF,gBAAT,EAA2BG,MAAM,CAACC,IAAP,CAAYH,IAAZ,CAA3B,CAAhB,CAP6C,CAOkB;;AAC/DC,EAAAA,MAAM,GAAG,EAAC,GAAGA,MAAJ;AAAY,OAAGL,cAAc,CAACM,MAAM,CAACE,MAAP,CAAcJ,IAAd,CAAD;AAA7B,GAAT,CAR6C,CAQiB;;AAC9D,SAAOC,MAAP;AACH;AAGD","sourcesContent":["import {rentIds} from \"../rentIds\";\nimport {getStandardIds} from \"../getStandardIds\";\nimport {subIds} from \"../subIds\";\n\nexport function idAssign(customPieceNames, subs) {\n    /**\n    assign custom piece names to standard piece ids, therefore \"subbing\" for those standard pieces. Standard ids not subed\n    for keep their standard piece assignments. For custom pieces not subed but that are pawn promotion options, rent from\n    1 of 20 non-standard ids.\n    */\n    var idDict = subIds(subs)\n    idDict = rentIds(idDict, customPieceNames, Object.keys(subs))  // \"ignore\" subs because just did that\n    idDict = {...idDict, ...getStandardIds(Object.values(subs)) } // get ids the of standard pieces not subbing for.\n    return idDict;\n}\n\n\n/**  for node.js\nif (require.main === module) {\n    console.log(idAssign(['Jester',\n                      'Duke',\n                      'Joker',\n                      'Morty'], {'Jester': 'Queen', 'Duke': 'Bishop'}))\n}\n*/"]},"metadata":{},"sourceType":"module"}