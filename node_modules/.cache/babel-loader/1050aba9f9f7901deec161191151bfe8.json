{"ast":null,"code":"import { getSqrCase } from \"../../sqrCase/getSqrCase\";\nimport { EMPTY } from \"../../sqrCase/sqrCases\";\nimport { sampleBoardDicts } from \"../../testObjects/sampleBoardDicts\";\nexport function isActual1SqrJump(board, potentialJump, color) {\n  /*if potentialJump is empty sqr return true, else return false**/\n  if (getSqrCase(board, potentialJump[0], potentialJump[1], color) === EMPTY) {\n    return true;\n  } else {\n    return false;\n  }\n} // module.exports = isActual1SqrJump;\n\n/** for node.js\nif (require.main === module) {\n\n    import {printBoard} from \"../../printers/printBoard\";\n\n    var board = sampleBoardDicts[\"pawn_range\"];\n    \n    //b5, white\n    if (isActual1SqrJump(board, [2, 5], 'W'))\n        printBoard(board, \"\\ngreen: yes, red: no\", null, [\"b5\"], null, [\"b4\"])\n    else\n        printBoard(board, \"\\ngreen: yes, red: no\", [\"b5\"], null, null, [\"b4\"])\n\n    //b5, white\n    if (isActual1SqrJump(board, [3, 5], 'W'))\n        printBoard(board, \"\\ngreen: yes, red: no\", null, [\"c5\"], null, [\"c4\"])\n    else\n        printBoard(board, \"\\ngreen: yes, red: no\", [\"c5\"], null, null, [\"c4\"])\n\n    //e5, white\n    if (isActual1SqrJump(board, [5, 5], 'W'))\n        printBoard(board, \"\\ngreen: yes, red: no\", null, [\"e5\"], null, [\"e4\"])\n    else\n        printBoard(board, \"\\ngreen: yes, red: no\", [\"e5\"], null, null, [\"e4\"])\n\n    //a3, white\n    if (isActual1SqrJump(board, [1, 3], 'W'))\n        printBoard(board, \"\\ngreen: yes, red: no\", null, [\"a3\"], null, [\"a2\"])\n    else\n        printBoard(board, \"\\ngreen: yes, red: no\", [\"a3\"], null, null, [\"a2\"])\n\n}\n*/","map":{"version":3,"sources":["/home/brian/ChessKingsCouncil/app/src/game_logic/ranges/pawn/isActual1SqrJump.js"],"names":["getSqrCase","EMPTY","sampleBoardDicts","isActual1SqrJump","board","potentialJump","color"],"mappings":"AAAA,SAAQA,UAAR,QAAyB,0BAAzB;AACA,SAAQC,KAAR,QAAoB,wBAApB;AACA,SAAQC,gBAAR,QAA+B,oCAA/B;AAGA,OAAO,SAASC,gBAAT,CAA0BC,KAA1B,EAAiCC,aAAjC,EAAgDC,KAAhD,EAAuD;AAC1D;AACA,MAAIN,UAAU,CAACI,KAAD,EAAQC,aAAa,CAAC,CAAD,CAArB,EAA0BA,aAAa,CAAC,CAAD,CAAvC,EAA4CC,KAA5C,CAAV,KAAiEL,KAArE,EAA4E;AACxE,WAAO,IAAP;AACH,GAFD,MAGK;AACD,WAAO,KAAP;AACH;AACJ,C,CAED;;AAEA","sourcesContent":["import {getSqrCase} from \"../../sqrCase/getSqrCase\";\nimport {EMPTY} from \"../../sqrCase/sqrCases\";\nimport {sampleBoardDicts} from \"../../testObjects/sampleBoardDicts\";\n\n\nexport function isActual1SqrJump(board, potentialJump, color) {\n    /*if potentialJump is empty sqr return true, else return false**/\n    if (getSqrCase(board, potentialJump[0], potentialJump[1], color) === EMPTY) {\n        return true\n    }\n    else {\n        return false\n    }\n}\n\n// module.exports = isActual1SqrJump;\n\n/** for node.js\nif (require.main === module) {\n\n    import {printBoard} from \"../../printers/printBoard\";\n\n    var board = sampleBoardDicts[\"pawn_range\"];\n    \n    //b5, white\n    if (isActual1SqrJump(board, [2, 5], 'W'))\n        printBoard(board, \"\\ngreen: yes, red: no\", null, [\"b5\"], null, [\"b4\"])\n    else\n        printBoard(board, \"\\ngreen: yes, red: no\", [\"b5\"], null, null, [\"b4\"])\n\n    //b5, white\n    if (isActual1SqrJump(board, [3, 5], 'W'))\n        printBoard(board, \"\\ngreen: yes, red: no\", null, [\"c5\"], null, [\"c4\"])\n    else\n        printBoard(board, \"\\ngreen: yes, red: no\", [\"c5\"], null, null, [\"c4\"])\n\n    //e5, white\n    if (isActual1SqrJump(board, [5, 5], 'W'))\n        printBoard(board, \"\\ngreen: yes, red: no\", null, [\"e5\"], null, [\"e4\"])\n    else\n        printBoard(board, \"\\ngreen: yes, red: no\", [\"e5\"], null, null, [\"e4\"])\n\n    //a3, white\n    if (isActual1SqrJump(board, [1, 3], 'W'))\n        printBoard(board, \"\\ngreen: yes, red: no\", null, [\"a3\"], null, [\"a2\"])\n    else\n        printBoard(board, \"\\ngreen: yes, red: no\", [\"a3\"], null, null, [\"a2\"])\n\n}\n*/"]},"metadata":{},"sourceType":"module"}