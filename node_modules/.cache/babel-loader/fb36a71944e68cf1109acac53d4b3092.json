{"ast":null,"code":"import { strfind } from \"../helpers/strfind\";\nexport class Fen {\n  constructor(data) {\n    this.fen = data[\"fen\"];\n    this.turn = data[\"turn\"];\n    this.castleAvail = data[\"castle_avail\"];\n    this.enPassantAvail = data[\"en_passant_avail\"];\n    this.hmClock = parseInt(data[\"hm_clock\"], 10);\n    this.fmClock = parseInt(data[\"fm_clock\"], 10);\n  }\n\n  update(specialMoves, jsonRecords, start, dest, captured, color) {\n    /*update the non piece-position attributes of the fen: turn, castle avail, en-passant avail, &&  clocks**/\n    this.turn = color.toLowerCase();\n    this.UpdateCastleAvail(jsonRecords);\n    this.updateEnPassantAvail(dest, specialMoves, start);\n    this.UpdateClocks(captured, color, jsonRecords);\n  }\n\n  UpdateClocks(captured, color, jsonRecords) {\n    if (jsonRecords.numConsecutiveNonPawnMoves === 0 || captured != 'undefined') {\n      this.hmClock = 0;\n    }\n\n    if (color === 'B') {\n      this.fmClock += 1;\n    }\n  }\n\n  updateEnPassantAvail(dest, specialMoves, start) {\n    if (strfind(specialMoves.enPassant, [start, dest])) {\n      //condition needs modification\n      this.enPassantAvail = dest;\n    } else {\n      this.enPassantAvail = '-';\n    }\n  }\n\n  UpdateCastleAvail(jsonRecords) {\n    var K, Q, k, q;\n\n    if (!jsonRecords.kingsMoved[\"e1\"] && !jsonRecords.rooksMoved[\"h1\"]) {\n      K = 'K';\n    } else {\n      K = '';\n    }\n\n    if (!jsonRecords.kingsMoved[\"e1\"] && !jsonRecords.rooksMoved[\"a1\"]) {\n      Q = 'Q';\n    } else {\n      Q = '';\n    }\n\n    if (!jsonRecords.kingsMoved[\"e8\"] && !jsonRecords.rooksMoved[\"a8\"]) {\n      k = 'k';\n    } else {\n      k = '';\n    }\n\n    if (!jsonRecords.kingsMoved[\"e8\"] && !jsonRecords.rooksMoved[\"h8\"]) {\n      q = 'q';\n    } else {\n      q = '';\n    }\n\n    this.castleAvail = K + Q + k + q;\n\n    if (this.castleAvail === '') {\n      this.castleAvail = '-';\n    }\n  }\n\n  getData() {\n    /*return the fen components an.includes(as) object that can be sent to React**/\n    return {\n      \"fen\": this.fen,\n      \"turn\": this.turn,\n      \"castle_avail\": this.castleAvail,\n      \"en_passant_avail\": this.enPassantAvail,\n      \"hm_clock\": this.hmClock,\n      \"fm_clock\": this.fmClock\n    };\n  }\n\n  setGetNewFen(pos) {\n    /*join the position string with the status attributes updated throughout the game, then return**/\n    this.fen = \" \".join([pos, this.turn, this.castleAvail, this.enPassantAvail, this.hmClock.toSring(), this.fmClock.toString()]);\n    return this.fen;\n  }\n\n} // module.exports = Fen;","map":{"version":3,"sources":["/home/brian/ChessKingsCouncil/app/src/game_logic/fenParser/Fen.js"],"names":["strfind","Fen","constructor","data","fen","turn","castleAvail","enPassantAvail","hmClock","parseInt","fmClock","update","specialMoves","jsonRecords","start","dest","captured","color","toLowerCase","UpdateCastleAvail","updateEnPassantAvail","UpdateClocks","numConsecutiveNonPawnMoves","enPassant","K","Q","k","q","kingsMoved","rooksMoved","getData","setGetNewFen","pos","join","toSring","toString"],"mappings":"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","sourcesContent":["import {strfind} from \"../helpers/strfind\";\n\n\nexport class Fen {\n\n    constructor(data) {\n        this.fen = data[\"fen\"]\n        this.turn = data[\"turn\"]\n        this.castleAvail = data[\"castle_avail\"]\n        this.enPassantAvail = data[\"en_passant_avail\"]\n        this.hmClock = parseInt(data[\"hm_clock\"], 10)\n        this.fmClock = parseInt(data[\"fm_clock\"], 10)\n    }\n\n    update(specialMoves, jsonRecords, start, dest, captured, color) {\n        /*update the non piece-position attributes of the fen: turn, castle avail, en-passant avail, &&  clocks**/\n        this.turn = color.toLowerCase()\n        this.UpdateCastleAvail(jsonRecords)\n        this.updateEnPassantAvail(dest, specialMoves, start)\n        this.UpdateClocks(captured, color, jsonRecords)\n    }\n\n    UpdateClocks(captured, color, jsonRecords) {\n        if (jsonRecords.numConsecutiveNonPawnMoves === 0 || captured != 'undefined') {\n            this.hmClock = 0\n        }\n        if (color === 'B') {\n            this.fmClock += 1\n        }\n    }\n\n    updateEnPassantAvail(dest, specialMoves, start) {\n        if (strfind(specialMoves.enPassant, [start, dest])) { //condition needs modification\n            this.enPassantAvail = dest;\n        }\n        else {\n            this.enPassantAvail = '-'\n        }\n    }\n\n    UpdateCastleAvail(jsonRecords) {\n\n        var K, Q, k, q;\n\n        if (! jsonRecords.kingsMoved[\"e1\"] && ! jsonRecords.rooksMoved[\"h1\"]) {\n            K = 'K'\n        }\n        else {\n            K = ''\n        }\n        if (! jsonRecords.kingsMoved[\"e1\"] && ! jsonRecords.rooksMoved[\"a1\"]) {\n            Q = 'Q'\n        }\n        else {\n            Q = ''\n        }\n        if (! jsonRecords.kingsMoved[\"e8\"] && ! jsonRecords.rooksMoved[\"a8\"]) {\n            k = 'k'\n        }\n        else {\n            k = ''\n        }\n        if (! jsonRecords.kingsMoved[\"e8\"] && ! jsonRecords.rooksMoved[\"h8\"]) {\n            q = 'q'\n        }\n        else {\n            q = ''\n        }\n\n        this.castleAvail = K + Q + k + q\n        if (this.castleAvail === '') {\n            this.castleAvail = '-'\n        }\n\n    }\n\n    getData() {\n        /*return the fen components an.includes(as) object that can be sent to React**/\n        return {\"fen\": this.fen, \"turn\": this.turn, \"castle_avail\": this.castleAvail,\n                \"en_passant_avail\": this.enPassantAvail,\n                \"hm_clock\": this.hmClock, \"fm_clock\": this.fmClock}\n    }\n\n    setGetNewFen(pos) {\n        /*join the position string with the status attributes updated throughout the game, then return**/\n        this.fen = \" \".join([pos, this.turn, this.castleAvail, this.enPassantAvail, this.hmClock.toSring(), this.fmClock.toString() ]);\n        return this.fen;\n    }\n}\n\n// module.exports = Fen;"]},"metadata":{},"sourceType":"module"}