{"ast":null,"code":"import { getThreatArea } from \"./getThreatArea\";\nimport { getKingThreats } from \"../getKingThreats\";\nimport { printBoard } from \"../../printers/printBoard\";\nimport { xyToRf } from \"../../coordType/crdCnvrt\";\nimport { mapListXyToRf } from \"../../coordType/mapListXyToRf\";\nexport function sqrUnderAttack(board, sqr, color, pieceDefs, idDict) {\n  /*return true if square is under attack, else false **/\n  var threatArea = getThreatArea(board, sqr, color, pieceDefs, idDict);\n  var kingThreats = getKingThreats(board, sqr, color);\n  threatArea.push(...kingThreats);\n\n  if (threatArea.length > 0) {\n    return true;\n  } else {\n    return false;\n  }\n} // module.exports = sqrUnderAttack;\n\n/** for node.js\nif (require.main === module) {\n\n    import {getStandardPieceDefs} from \"../../testObjects/getStandardPieceDefs\";\n    import {getStandardIdDict} from \"../../testObjects/getStandardIdDict\";\n    import {hypoBoardSamples} from \"../../testObjects/hypoBoardSamples\";\n    import {sampleBoardDicts} from \"../../testObjects/sampleBoardDicts\";\n\n    var pieceDefs, idDict, board, underAttack, notUnderAttack, results, threats, hypoBoards;\n\n    pieceDefs = getStandardPieceDefs()\n    idDict = getStandardIdDict()\n    \n    // threats = []\n    // board = sampleBoardDicts['superCheckmateImpossibleExample']\n    // for (var sqr of [[5, 5], [6, 5], [7, 5], [5, 6], [7, 6], [5, 7], [6, 7], [7, 7]]) {\n    //     if (sqrUnderAttack(board, sqr, 'W', pieceDefs, idDict)) {\n    //         threats.push(sqr)\n    //     }\n    // }\n    // printBoard(board, \"superCheckmateImpossibleExample\", mapListXyToRf(threats))\n\n\n    \n    board = sampleBoardDicts['fundemental_defense']\n    results = {} \n    for (let y = 1; y < 9 ; y++) {\n        for (let x = 1; x < 9 ; x++) {\n            results[xyToRf(x, y)] = sqrUnderAttack(board, [x, y], 'W', pieceDefs, idDict)\n        }\n    }\n    underAttack = Object.keys(results).filter(rf => results[rf])\n    notUnderAttack = Object.keys(results).filter(rf => ! results[rf])\n    printBoard(board, \"test 1, under attack by W:\", underAttack, notUnderAttack)\n\n    results = {} \n    for (let y = 1; y < 9 ; y++) {\n        for (let x = 1; x < 9 ; x++) {\n            results[xyToRf(x, y)] = sqrUnderAttack(board, [x, y], 'B', pieceDefs, idDict)\n        }\n    }\n    underAttack = Object.keys(results).filter(rf => results[rf])\n    notUnderAttack = Object.keys(results).filter(rf => ! results[rf])\n    printBoard(board, \"test 1, under attack by B:\", underAttack, notUnderAttack)\n\n\n}\n*/","map":{"version":3,"sources":["/home/brian/ChessKingsCouncil/app/src/game_logic/threatArea/top/sqrUnderAttack.js"],"names":["getThreatArea","getKingThreats","printBoard","xyToRf","mapListXyToRf","sqrUnderAttack","board","sqr","color","pieceDefs","idDict","threatArea","kingThreats","push","length"],"mappings":"AAAA,SAAQA,aAAR,QAA4B,iBAA5B;AACA,SAAQC,cAAR,QAA6B,mBAA7B;AACA,SAAQC,UAAR,QAAyB,2BAAzB;AACA,SAAQC,MAAR,QAAqB,0BAArB;AACA,SAAQC,aAAR,QAA4B,+BAA5B;AAGA,OAAO,SAASC,cAAT,CAAwBC,KAAxB,EAA+BC,GAA/B,EAAoCC,KAApC,EAA2CC,SAA3C,EAAsDC,MAAtD,EAA8D;AACjE;AACA,MAAIC,UAAU,GAAGX,aAAa,CAACM,KAAD,EAAQC,GAAR,EAAaC,KAAb,EAAoBC,SAApB,EAA+BC,MAA/B,CAA9B;AACA,MAAIE,WAAW,GAAGX,cAAc,CAACK,KAAD,EAAQC,GAAR,EAAaC,KAAb,CAAhC;AACAG,EAAAA,UAAU,CAACE,IAAX,CAAgB,GAAGD,WAAnB;;AACA,MAAID,UAAU,CAACG,MAAX,GAAoB,CAAxB,EAA2B;AACvB,WAAO,IAAP;AACH,GAFD,MAGK;AACD,WAAO,KAAP;AACH;AACJ,C,CAED;;AAEA","sourcesContent":["import {getThreatArea} from \"./getThreatArea\";\nimport {getKingThreats} from \"../getKingThreats\";\nimport {printBoard} from \"../../printers/printBoard\";\nimport {xyToRf} from \"../../coordType/crdCnvrt\";\nimport {mapListXyToRf} from \"../../coordType/mapListXyToRf\";\n\n\nexport function sqrUnderAttack(board, sqr, color, pieceDefs, idDict) {\n    /*return true if square is under attack, else false **/\n    var threatArea = getThreatArea(board, sqr, color, pieceDefs, idDict)\n    var kingThreats = getKingThreats(board, sqr, color)\n    threatArea.push(...kingThreats)\n    if (threatArea.length > 0) {\n        return true\n    }\n    else {\n        return false\n    }\n}\n\n// module.exports = sqrUnderAttack;\n\n/** for node.js\nif (require.main === module) {\n\n    import {getStandardPieceDefs} from \"../../testObjects/getStandardPieceDefs\";\n    import {getStandardIdDict} from \"../../testObjects/getStandardIdDict\";\n    import {hypoBoardSamples} from \"../../testObjects/hypoBoardSamples\";\n    import {sampleBoardDicts} from \"../../testObjects/sampleBoardDicts\";\n\n    var pieceDefs, idDict, board, underAttack, notUnderAttack, results, threats, hypoBoards;\n\n    pieceDefs = getStandardPieceDefs()\n    idDict = getStandardIdDict()\n    \n    // threats = []\n    // board = sampleBoardDicts['superCheckmateImpossibleExample']\n    // for (var sqr of [[5, 5], [6, 5], [7, 5], [5, 6], [7, 6], [5, 7], [6, 7], [7, 7]]) {\n    //     if (sqrUnderAttack(board, sqr, 'W', pieceDefs, idDict)) {\n    //         threats.push(sqr)\n    //     }\n    // }\n    // printBoard(board, \"superCheckmateImpossibleExample\", mapListXyToRf(threats))\n\n\n    \n    board = sampleBoardDicts['fundemental_defense']\n    results = {} \n    for (let y = 1; y < 9 ; y++) {\n        for (let x = 1; x < 9 ; x++) {\n            results[xyToRf(x, y)] = sqrUnderAttack(board, [x, y], 'W', pieceDefs, idDict)\n        }\n    }\n    underAttack = Object.keys(results).filter(rf => results[rf])\n    notUnderAttack = Object.keys(results).filter(rf => ! results[rf])\n    printBoard(board, \"test 1, under attack by W:\", underAttack, notUnderAttack)\n\n    results = {} \n    for (let y = 1; y < 9 ; y++) {\n        for (let x = 1; x < 9 ; x++) {\n            results[xyToRf(x, y)] = sqrUnderAttack(board, [x, y], 'B', pieceDefs, idDict)\n        }\n    }\n    underAttack = Object.keys(results).filter(rf => results[rf])\n    notUnderAttack = Object.keys(results).filter(rf => ! results[rf])\n    printBoard(board, \"test 1, under attack by B:\", underAttack, notUnderAttack)\n\n\n}\n*/\n"]},"metadata":{},"sourceType":"module"}