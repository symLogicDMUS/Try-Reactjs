{"ast":null,"code":"/**\nmethods are numbered by, and listed in order of, degrees counterclockwise from x axis.\n*/\nimport { rfToXy, xyToRf } from \"./crdCnvrt\";\nexport function step1sqr0d(rf) {\n  /*step 1 square 0 degrees**/\n  let [x, y] = rfToXy(rf);\n  x += 1;\n  rf = xyToRf(x, y);\n  return rf;\n}\nexport function step1sqr45d(rf) {\n  /*step 1 square 45 degrees**/\n  let [x, y] = rfToXy(rf);\n  x += 1;\n  y += 1;\n  rf = xyToRf(x, y);\n  return rf;\n}\nexport function step1sqr90d(rf) {\n  /*step 1 square 90 degrees**/\n  let [x, y] = rfToXy(rf);\n  y += 1;\n  rf = xyToRf(x, y);\n  return rf;\n}\nexport function step1sqr135d(rf) {\n  /*step 1 square 135 degrees**/\n  let [x, y] = rfToXy(rf);\n  x -= 1;\n  y += 1;\n  rf = xyToRf(x, y);\n  return rf;\n}\nexport function step1sqr180d(rf) {\n  /*step 1 square 180 degrees**/\n  let [x, y] = rfToXy(rf);\n  x -= 1;\n  rf = xyToRf(x, y);\n  return rf;\n}\nexport function step1sqr225d(rf) {\n  /*step 1 square 225 degrees**/\n  let [x, y] = rfToXy(rf);\n  x -= 1;\n  y -= 1;\n  rf = xyToRf(x, y);\n  return rf;\n}\nexport function step1sqr270d(rf) {\n  /*step 1 square 270 degrees**/\n  let [x, y] = rfToXy(rf);\n  y -= 1;\n  rf = xyToRf(x, y);\n  return rf;\n}\nexport function step1sqr315d(rf) {\n  /*step 1 square 315 degrees**/\n  let [x, y] = rfToXy(rf);\n  x += 1;\n  y -= 1;\n  rf = xyToRf(x, y);\n  return rf;\n} //export const stepFuncList = [step1sqr90d, step1sqr45d, step1sqr0d, step1sqr315d, step1sqr270d,\n//                           step1sqr225d, step1sqr180d, step1sqr135d]\n\nexport const stepFuncDict = {\n  \"90d\": step1sqr90d,\n  \"45d\": step1sqr45d,\n  \"0d\": step1sqr0d,\n  \"315d\": step1sqr315d,\n  \"270d\": step1sqr270d,\n  \"225d\": step1sqr225d,\n  \"180d\": step1sqr180d,\n  \"135d\": step1sqr135d\n};","map":{"version":3,"sources":["/home/brian/ChessKingsCouncil/app/src/Components/helpers/stepFuncs.js"],"names":["rfToXy","xyToRf","step1sqr0d","rf","x","y","step1sqr45d","step1sqr90d","step1sqr135d","step1sqr180d","step1sqr225d","step1sqr270d","step1sqr315d","stepFuncDict"],"mappings":"AAAA;;;AAGA,SAAQA,MAAR,EAAgBC,MAAhB,QAA6B,YAA7B;AAEA,OAAO,SAASC,UAAT,CAAoBC,EAApB,EAAwB;AAC3B;AACA,MAAI,CAACC,CAAD,EAAIC,CAAJ,IAASL,MAAM,CAACG,EAAD,CAAnB;AACAC,EAAAA,CAAC,IAAI,CAAL;AACAD,EAAAA,EAAE,GAAGF,MAAM,CAACG,CAAD,EAAIC,CAAJ,CAAX;AACA,SAAOF,EAAP;AACH;AACD,OAAO,SAASG,WAAT,CAAqBH,EAArB,EAAyB;AAC5B;AACA,MAAI,CAACC,CAAD,EAAIC,CAAJ,IAASL,MAAM,CAACG,EAAD,CAAnB;AACAC,EAAAA,CAAC,IAAI,CAAL;AACAC,EAAAA,CAAC,IAAI,CAAL;AACAF,EAAAA,EAAE,GAAGF,MAAM,CAACG,CAAD,EAAIC,CAAJ,CAAX;AACA,SAAOF,EAAP;AACH;AACD,OAAO,SAASI,WAAT,CAAqBJ,EAArB,EAAyB;AAC5B;AACA,MAAI,CAACC,CAAD,EAAIC,CAAJ,IAASL,MAAM,CAACG,EAAD,CAAnB;AACAE,EAAAA,CAAC,IAAI,CAAL;AACAF,EAAAA,EAAE,GAAGF,MAAM,CAACG,CAAD,EAAIC,CAAJ,CAAX;AACA,SAAOF,EAAP;AACH;AACD,OAAO,SAASK,YAAT,CAAsBL,EAAtB,EAA0B;AAC7B;AACA,MAAI,CAACC,CAAD,EAAIC,CAAJ,IAASL,MAAM,CAACG,EAAD,CAAnB;AACAC,EAAAA,CAAC,IAAI,CAAL;AACAC,EAAAA,CAAC,IAAI,CAAL;AACAF,EAAAA,EAAE,GAAGF,MAAM,CAACG,CAAD,EAAIC,CAAJ,CAAX;AACA,SAAOF,EAAP;AACH;AACD,OAAO,SAASM,YAAT,CAAsBN,EAAtB,EAA0B;AAC7B;AACA,MAAI,CAACC,CAAD,EAAIC,CAAJ,IAASL,MAAM,CAACG,EAAD,CAAnB;AACAC,EAAAA,CAAC,IAAI,CAAL;AACAD,EAAAA,EAAE,GAAGF,MAAM,CAACG,CAAD,EAAIC,CAAJ,CAAX;AACA,SAAOF,EAAP;AACH;AACD,OAAO,SAASO,YAAT,CAAsBP,EAAtB,EAA0B;AAC7B;AACA,MAAI,CAACC,CAAD,EAAIC,CAAJ,IAASL,MAAM,CAACG,EAAD,CAAnB;AACAC,EAAAA,CAAC,IAAI,CAAL;AACAC,EAAAA,CAAC,IAAI,CAAL;AACAF,EAAAA,EAAE,GAAGF,MAAM,CAACG,CAAD,EAAIC,CAAJ,CAAX;AACA,SAAOF,EAAP;AACH;AACD,OAAO,SAASQ,YAAT,CAAsBR,EAAtB,EAA0B;AAC7B;AACA,MAAI,CAACC,CAAD,EAAIC,CAAJ,IAASL,MAAM,CAACG,EAAD,CAAnB;AACAE,EAAAA,CAAC,IAAI,CAAL;AACAF,EAAAA,EAAE,GAAGF,MAAM,CAACG,CAAD,EAAIC,CAAJ,CAAX;AACA,SAAOF,EAAP;AACH;AACD,OAAO,SAASS,YAAT,CAAsBT,EAAtB,EAA0B;AAC7B;AACA,MAAI,CAACC,CAAD,EAAIC,CAAJ,IAASL,MAAM,CAACG,EAAD,CAAnB;AACAC,EAAAA,CAAC,IAAI,CAAL;AACAC,EAAAA,CAAC,IAAI,CAAL;AACAF,EAAAA,EAAE,GAAGF,MAAM,CAACG,CAAD,EAAIC,CAAJ,CAAX;AACA,SAAOF,EAAP;AACH,C,CACD;AACA;;AAEA,OAAO,MAAMU,YAAY,GAAG;AACxB,SAAON,WADiB;AAExB,SAAOD,WAFiB;AAGxB,QAAOJ,UAHiB;AAIxB,UAAOU,YAJiB;AAKxB,UAAOD,YALiB;AAMxB,UAAOD,YANiB;AAOxB,UAAOD,YAPiB;AAQxB,UAAOD;AARiB,CAArB","sourcesContent":["/**\nmethods are numbered by, and listed in order of, degrees counterclockwise from x axis.\n*/\nimport {rfToXy, xyToRf} from \"./crdCnvrt\";\n\nexport function step1sqr0d(rf) {\n    /*step 1 square 0 degrees**/\n    let [x, y] = rfToXy(rf)\n    x += 1\n    rf = xyToRf(x, y)\n    return rf\n}\nexport function step1sqr45d(rf) {\n    /*step 1 square 45 degrees**/\n    let [x, y] = rfToXy(rf)\n    x += 1\n    y += 1\n    rf = xyToRf(x, y)\n    return rf\n}\nexport function step1sqr90d(rf) {\n    /*step 1 square 90 degrees**/\n    let [x, y] = rfToXy(rf)\n    y += 1\n    rf = xyToRf(x, y)\n    return rf\n}\nexport function step1sqr135d(rf) {\n    /*step 1 square 135 degrees**/\n    let [x, y] = rfToXy(rf)\n    x -= 1\n    y += 1\n    rf = xyToRf(x, y)\n    return rf\n}\nexport function step1sqr180d(rf) {\n    /*step 1 square 180 degrees**/\n    let [x, y] = rfToXy(rf)\n    x -= 1\n    rf = xyToRf(x, y)\n    return rf\n}\nexport function step1sqr225d(rf) {\n    /*step 1 square 225 degrees**/\n    let [x, y] = rfToXy(rf)\n    x -= 1\n    y -= 1\n    rf = xyToRf(x, y)\n    return rf\n}\nexport function step1sqr270d(rf) {\n    /*step 1 square 270 degrees**/\n    let [x, y] = rfToXy(rf)\n    y -= 1\n    rf = xyToRf(x, y)\n    return rf\n}\nexport function step1sqr315d(rf) {\n    /*step 1 square 315 degrees**/\n    let [x, y] = rfToXy(rf)\n    x += 1\n    y -= 1\n    rf = xyToRf(x, y)\n    return rf\n}\n//export const stepFuncList = [step1sqr90d, step1sqr45d, step1sqr0d, step1sqr315d, step1sqr270d,\n//                           step1sqr225d, step1sqr180d, step1sqr135d]\n\nexport const stepFuncDict = {\n    \"90d\" :step1sqr90d, \n    \"45d\" :step1sqr45d, \n    \"0d\"  :step1sqr0d, \n    \"315d\":step1sqr315d, \n    \"270d\":step1sqr270d, \n    \"225d\":step1sqr225d, \n    \"180d\":step1sqr180d, \n    \"135d\":step1sqr135d\n}\n"]},"metadata":{},"sourceType":"module"}