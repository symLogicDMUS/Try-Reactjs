{"ast":null,"code":"import { getSqrCase } from \"../sqrCase/getSqrCase\";\nimport { ENEMY } from \"../sqrCase/sqrCases\";\nimport { printBoard } from \"../printers/printBoard\";\nimport { dist } from \"../helpers/formulas\";\nimport { xyToRf, rfToXy } from \"../coordType/crdCnvrt\";\nimport { mapListRfToXy } from \"../coordType/mapListRfToXy\";\nimport { mapListXyToRf } from \"../coordType/mapListXyToRf\";\nexport function getKingThreats(board, sqr, color) {\n  /*for a square ! containg the king, get list of kings threatening that square**/\n  var kingThreats = Object.keys(board).filter(sqr2 => {\n    sqr2 = rfToXy(sqr2);\n\n    if ((dist(sqr, sqr2) === 1 || dist(sqr, sqr2) == Math.sqrt(2)) && getSqrCase(board, sqr2[0], sqr2[1], color) === ENEMY && board[xyToRf(...sqr2)][1] === \"K\") {\n      return true;\n    } else {\n      return false;\n    }\n  });\n  return mapListRfToXy(kingThreats);\n} // module.exports = getKingThreats;\n\n/** for node.js\nif (require.main === module) {\n    \n    let board =\n        {\"a1\": '#', \"b1\": '#', \"c1\": '#', \"d1\": '#', \"e1\": '#', \"f1\": '#', \"g1\": '#', \"h1\": '#',\n         \"a2\": '#', \"b2\": '#', \"c2\": '#', \"d2\": '#', \"e2\": '#', \"f2\": 'BP1', \"g2\": 'WK1', \"h2\": 'WK2',\n         \"a3\": '#', \"b3\": '#', \"c3\": 'BK1', \"d3\": '#', \"e3\": '#', \"f3\": '#', \"g3\": '#', \"h3\": 'WK3',\n         \"a4\": '#', \"b4\": '#', \"c4\": '#', \"d4\": '#', \"e4\": '#', \"f4\": 'WK4', \"g4\": 'BK2', \"h4\": 'WK5',\n         \"a5\": '#', \"b5\": '#', \"c5\": '#', \"d5\": 'BK3', \"e5\": '#', \"f5\": '#', \"g5\": '#', \"h5\": '#',\n         \"a6\": '#', \"b6\": '#', \"c6\": '#', \"d6\": '#', \"e6\": '#', \"f6\": '#', \"g6\": '#', \"h6\": '#',\n         \"a7\": '#', \"b7\": '#', \"c7\": '#', \"d7\": '#', \"e7\": '#', \"f7\": '#', \"g7\": '#', \"h7\": '#',\n         \"a8\": '#', \"b8\": '#', \"c8\": '#', \"d8\": '#', \"e8\": '#', \"f8\": '#', \"g8\": '#', \"h8\": '#'}\n    \n    // test 1:\n    console.log('test 1:')\n    printBoard(board, \"white\", mapListXyToRf(getKingThreats(board, [4, 4], 'W')), [\"d4\"])\n    console.log('\\n')\n    \n    // test 2:\n    console.log('test 2:')\n    printBoard(board, \"black\", mapListXyToRf(getKingThreats(board, [6, 3], 'B')), [\"f3\"])\n    console.log('\\n')\n\n}\n*/","map":{"version":3,"sources":["/home/brian/ChessKingsCouncil/app/src/game_logic/threatArea/getKingThreats.js"],"names":["getSqrCase","ENEMY","printBoard","dist","xyToRf","rfToXy","mapListRfToXy","mapListXyToRf","getKingThreats","board","sqr","color","kingThreats","Object","keys","filter","sqr2","Math","sqrt"],"mappings":"AAAA,SAAQA,UAAR,QAAyB,uBAAzB;AACA,SAAQC,KAAR,QAAoB,qBAApB;AACA,SAAQC,UAAR,QAAyB,wBAAzB;AACA,SAAQC,IAAR,QAAmB,qBAAnB;AACA,SAAQC,MAAR,EAAgBC,MAAhB,QAA6B,uBAA7B;AACA,SAAQC,aAAR,QAA4B,4BAA5B;AACA,SAAQC,aAAR,QAA4B,4BAA5B;AAGA,OAAO,SAASC,cAAT,CAAwBC,KAAxB,EAA+BC,GAA/B,EAAoCC,KAApC,EAA2C;AAC9C;AACA,MAAIC,WAAW,GAAGC,MAAM,CAACC,IAAP,CAAYL,KAAZ,EAAmBM,MAAnB,CAA0BC,IAAI,IAAI;AAEhDA,IAAAA,IAAI,GAAGX,MAAM,CAACW,IAAD,CAAb;;AAEA,QAAI,CAACb,IAAI,CAACO,GAAD,EAAMM,IAAN,CAAJ,KAAoB,CAApB,IAAyBb,IAAI,CAACO,GAAD,EAAMM,IAAN,CAAJ,IAAmBC,IAAI,CAACC,IAAL,CAAU,CAAV,CAA7C,KACAlB,UAAU,CAACS,KAAD,EAAQO,IAAI,CAAC,CAAD,CAAZ,EAAiBA,IAAI,CAAC,CAAD,CAArB,EAA0BL,KAA1B,CAAV,KAA+CV,KAD/C,IAEAQ,KAAK,CAACL,MAAM,CAAC,GAAGY,IAAJ,CAAP,CAAL,CAAuB,CAAvB,MAA8B,GAFlC,EAGE;AACE,aAAO,IAAP;AACH,KALD,MAKO;AACH,aAAO,KAAP;AACH;AAEJ,GAbiB,CAAlB;AAeA,SAAOV,aAAa,CAACM,WAAD,CAApB;AACH,C,CAED;;AAEA","sourcesContent":["import {getSqrCase} from \"../sqrCase/getSqrCase\";\nimport {ENEMY} from \"../sqrCase/sqrCases\";\nimport {printBoard} from \"../printers/printBoard\";\nimport {dist} from \"../helpers/formulas\";\nimport {xyToRf, rfToXy} from \"../coordType/crdCnvrt\";\nimport {mapListRfToXy} from \"../coordType/mapListRfToXy\"\nimport {mapListXyToRf} from \"../coordType/mapListXyToRf\";\n\n\nexport function getKingThreats(board, sqr, color) {\n    /*for a square ! containg the king, get list of kings threatening that square**/\n    var kingThreats = Object.keys(board).filter(sqr2 => {\n\n        sqr2 = rfToXy(sqr2)\n\n        if ((dist(sqr, sqr2) === 1 || dist(sqr, sqr2) == Math.sqrt(2)) &&\n            getSqrCase(board, sqr2[0], sqr2[1], color) === ENEMY &&\n            board[xyToRf(...sqr2)][1] === \"K\"\n        ) {\n            return true;\n        } else {\n            return false;\n        }\n\n    });\n\n    return mapListRfToXy(kingThreats);\n}\n\n// module.exports = getKingThreats;\n\n/** for node.js\nif (require.main === module) {\n    \n    let board =\n        {\"a1\": '#', \"b1\": '#', \"c1\": '#', \"d1\": '#', \"e1\": '#', \"f1\": '#', \"g1\": '#', \"h1\": '#',\n         \"a2\": '#', \"b2\": '#', \"c2\": '#', \"d2\": '#', \"e2\": '#', \"f2\": 'BP1', \"g2\": 'WK1', \"h2\": 'WK2',\n         \"a3\": '#', \"b3\": '#', \"c3\": 'BK1', \"d3\": '#', \"e3\": '#', \"f3\": '#', \"g3\": '#', \"h3\": 'WK3',\n         \"a4\": '#', \"b4\": '#', \"c4\": '#', \"d4\": '#', \"e4\": '#', \"f4\": 'WK4', \"g4\": 'BK2', \"h4\": 'WK5',\n         \"a5\": '#', \"b5\": '#', \"c5\": '#', \"d5\": 'BK3', \"e5\": '#', \"f5\": '#', \"g5\": '#', \"h5\": '#',\n         \"a6\": '#', \"b6\": '#', \"c6\": '#', \"d6\": '#', \"e6\": '#', \"f6\": '#', \"g6\": '#', \"h6\": '#',\n         \"a7\": '#', \"b7\": '#', \"c7\": '#', \"d7\": '#', \"e7\": '#', \"f7\": '#', \"g7\": '#', \"h7\": '#',\n         \"a8\": '#', \"b8\": '#', \"c8\": '#', \"d8\": '#', \"e8\": '#', \"f8\": '#', \"g8\": '#', \"h8\": '#'}\n    \n    // test 1:\n    console.log('test 1:')\n    printBoard(board, \"white\", mapListXyToRf(getKingThreats(board, [4, 4], 'W')), [\"d4\"])\n    console.log('\\n')\n    \n    // test 2:\n    console.log('test 2:')\n    printBoard(board, \"black\", mapListXyToRf(getKingThreats(board, [6, 3], 'B')), [\"f3\"])\n    console.log('\\n')\n\n}\n*/"]},"metadata":{},"sourceType":"module"}