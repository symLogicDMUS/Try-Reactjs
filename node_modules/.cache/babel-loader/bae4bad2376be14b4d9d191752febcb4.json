{"ast":null,"code":"import { getPathdataDict } from \"../pathsInfo/top/getpathDataDict\";\nimport { getIndexFirstPiece } from \"../pathsInfo/getIndexFirstPiece\";\nimport { getStandardPieceDefs } from \"../testObjects/getStandardPieceDefs\";\nimport { getStandardIdDict } from \"../testObjects/getStandardIdDict\";\nexport function getPathThreats(board, sqr, color, pieceDefs, idDict) {\n  /*get all squares that are path threats to sqr**/\n  var pathDict, pathThreats;\n  pathDict = getPathdataDict(board, sqr, color, pieceDefs, idDict);\n  pathThreats = [];\n\n  for (var direction of Object.keys(pathDict)) {\n    if (pathDict[direction].pieces.length === 0) {\n      continue;\n    }\n\n    if (pathDict[direction].statuses[0] != 'e') {\n      continue;\n    }\n\n    if (!pathDict[direction].pieceMatchesPath[0]) {\n      continue;\n    }\n\n    let i = getIndexFirstPiece(pathDict[direction].path);\n    pathThreats.push(...pathDict[direction].coordPath.slice(0, i + 1));\n  }\n\n  return pathThreats;\n} // module.exports = getPathThreats;\n\n/** for node.js\nif (require.main === module) {\n\n    import {convertOffsetStrsToPairs} from \"../apiHelpers/convertOffsetStrsToPairs\";\n    import {printBoard} from \"../printers/printBoard\";\n    import {sampleBoardDicts} from \"../testObjects/sampleBoardDicts\";\n    import {mapListXyToRf} from \"../coordType/mapListXyToRf\";\n\n    pieceDefs = getStandardPieceDefs()\n    pieceDefs = convertOffsetStrsToPairs(pieceDefs)\n    idDict = getStandardIdDict()\n    \n    var board = sampleBoardDicts[\"super_checkmate_impossible_example\"];\n    printBoard(board, \"\\ntest1\", mapListXyToRf(getPathThreats(board, [6, 6], 'W', pieceDefs, idDict), null, [\"f6\"]))\n\n\n}\n*/","map":{"version":3,"sources":["/home/brian/ChessKingsCouncil/app/src/game_logic/threatArea/getPathThreats.js"],"names":["getPathdataDict","getIndexFirstPiece","getStandardPieceDefs","getStandardIdDict","getPathThreats","board","sqr","color","pieceDefs","idDict","pathDict","pathThreats","direction","Object","keys","pieces","length","statuses","pieceMatchesPath","i","path","push","coordPath","slice"],"mappings":"AAAA,SAAQA,eAAR,QAA8B,kCAA9B;AACA,SAAQC,kBAAR,QAAiC,iCAAjC;AACA,SAAQC,oBAAR,QAAmC,qCAAnC;AACA,SAAQC,iBAAR,QAAgC,kCAAhC;AAGA,OAAO,SAASC,cAAT,CAAwBC,KAAxB,EAA+BC,GAA/B,EAAoCC,KAApC,EAA2CC,SAA3C,EAAsDC,MAAtD,EAA8D;AACjE;AACA,MAAIC,QAAJ,EAAcC,WAAd;AACAD,EAAAA,QAAQ,GAAGV,eAAe,CAACK,KAAD,EAAQC,GAAR,EAAaC,KAAb,EAAoBC,SAApB,EAA+BC,MAA/B,CAA1B;AACAE,EAAAA,WAAW,GAAG,EAAd;;AACA,OAAK,IAAIC,SAAT,IAAsBC,MAAM,CAACC,IAAP,CAAYJ,QAAZ,CAAtB,EAA6C;AACzC,QAAIA,QAAQ,CAACE,SAAD,CAAR,CAAoBG,MAApB,CAA2BC,MAA3B,KAAsC,CAA1C,EAA6C;AACzC;AACH;;AACD,QAAIN,QAAQ,CAACE,SAAD,CAAR,CAAoBK,QAApB,CAA6B,CAA7B,KAAmC,GAAvC,EAA4C;AACxC;AACH;;AACD,QAAI,CAAEP,QAAQ,CAACE,SAAD,CAAR,CAAoBM,gBAApB,CAAqC,CAArC,CAAN,EAA+C;AAC3C;AACH;;AACD,QAAIC,CAAC,GAAGlB,kBAAkB,CAACS,QAAQ,CAACE,SAAD,CAAR,CAAoBQ,IAArB,CAA1B;AACAT,IAAAA,WAAW,CAACU,IAAZ,CAAiB,GAAGX,QAAQ,CAACE,SAAD,CAAR,CAAoBU,SAApB,CAA8BC,KAA9B,CAAoC,CAApC,EAAuCJ,CAAC,GAAG,CAA3C,CAApB;AACH;;AACD,SAAOR,WAAP;AACH,C,CAED;;AAEA","sourcesContent":["import {getPathdataDict} from \"../pathsInfo/top/getpathDataDict\";\nimport {getIndexFirstPiece} from \"../pathsInfo/getIndexFirstPiece\";\nimport {getStandardPieceDefs} from \"../testObjects/getStandardPieceDefs\";\nimport {getStandardIdDict} from \"../testObjects/getStandardIdDict\";\n\n\nexport function getPathThreats(board, sqr, color, pieceDefs, idDict) {\n    /*get all squares that are path threats to sqr**/\n    var pathDict, pathThreats;\n    pathDict = getPathdataDict(board, sqr, color, pieceDefs, idDict)\n    pathThreats = []\n    for (var direction of Object.keys(pathDict)) {\n        if (pathDict[direction].pieces.length === 0) {\n            continue\n        }\n        if (pathDict[direction].statuses[0] != 'e') {\n            continue\n        }\n        if (! pathDict[direction].pieceMatchesPath[0]) {\n            continue\n        }\n        let i = getIndexFirstPiece(pathDict[direction].path)\n        pathThreats.push(...pathDict[direction].coordPath.slice(0, i + 1))\n    }\n    return pathThreats\n}\n\n// module.exports = getPathThreats;\n\n/** for node.js\nif (require.main === module) {\n\n    import {convertOffsetStrsToPairs} from \"../apiHelpers/convertOffsetStrsToPairs\";\n    import {printBoard} from \"../printers/printBoard\";\n    import {sampleBoardDicts} from \"../testObjects/sampleBoardDicts\";\n    import {mapListXyToRf} from \"../coordType/mapListXyToRf\";\n\n    pieceDefs = getStandardPieceDefs()\n    pieceDefs = convertOffsetStrsToPairs(pieceDefs)\n    idDict = getStandardIdDict()\n    \n    var board = sampleBoardDicts[\"super_checkmate_impossible_example\"];\n    printBoard(board, \"\\ntest1\", mapListXyToRf(getPathThreats(board, [6, 6], 'W', pieceDefs, idDict), null, [\"f6\"]))\n\n\n}\n*/"]},"metadata":{},"sourceType":"module"}