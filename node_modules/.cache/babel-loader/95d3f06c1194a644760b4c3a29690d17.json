{"ast":null,"code":"var _jsxFileName = \"/home/brian/ChessKingsCouncil/app/src/Components/CreatePiece/Options/LoadDef/Modals/CreatedPieceProfiles.jsx\";\nimport React from \"react\";\nimport { CreatedPieceProfile } from \"./CreatedPieceProfile\";\nimport { offsetToText } from \"../../../../helpers/offsetToText\";\nimport { spanToText } from \"../../../../helpers/spanToText\"; // import {getColorName} from \"../../../../helpers/getColorName\";\n\nimport { CreatePieceExpandModal } from \"./CreatePieceProfileWB/CreatePieceExpandModal\";\nimport { CreatedPieceLoadButton } from \"./CreatedPieceLoadButton\";\nimport { CreatedPieceClose } from \"./CreatedPieceClose\";\nimport { SearchBar } from \"./SearchBar\";\nimport \"./CreatedPieceProfiles.css\";\nexport class CreatedPieceProfiles extends React.Component {\n  constructor(props) {\n    super(props);\n    this.searchText = \"\";\n    this.state = {\n      binaryValue: true,\n      selected: null\n    };\n    this.displayDefs = JSON.parse(JSON.stringify(this.props.defs));\n    Object.keys(this.displayDefs).forEach(pieceName => {\n      this.displayDefs[pieceName][\"W\"][\"spans\"] = this.getSpansText(this.displayDefs[pieceName][\"W\"]);\n      this.displayDefs[pieceName][\"W\"][\"offsets\"] = this.getOffsetsText(this.displayDefs[pieceName][\"W\"]);\n      this.displayDefs[pieceName][\"B\"][\"spans\"] = this.getSpansText(this.displayDefs[pieceName][\"B\"]);\n      this.displayDefs[pieceName][\"B\"][\"offsets\"] = this.getOffsetsText(this.displayDefs[pieceName][\"B\"]);\n    });\n    this.select = this.select.bind(this);\n    this.expand = this.expand.bind(this);\n    this.accept = this.accept.bind(this);\n    this.updateSearch = this.updateSearch.bind(this);\n  }\n\n  select(pieceName) {\n    if (this.state.selected === pieceName) this.setState({\n      selected: null\n    });else this.setState({\n      selected: pieceName\n    });\n  }\n\n  expand(piece, color, value) {\n    this.pieceName = piece;\n    this.rangeType = value;\n    this.color = color;\n    this.setState({\n      binaryValue: !this.state.binaryValue\n    });\n  }\n\n  accept() {\n    this.props.setUnsaved(false);\n    this.props.load(this.state.selected);\n    this.props.togleLoadModal(false);\n  }\n\n  getExpandModals() {\n    if (this.pieceName != null && this.rangeType != null && this.color != null) {\n      return /*#__PURE__*/React.createElement(CreatePieceExpandModal, {\n        def: this.defs[this.pieceName][this.color],\n        pieceName: this.pieceName,\n        rangeType: this.rangeType,\n        color: this.color,\n        expand: this.expand,\n        location: \"d4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 22\n        }\n      });\n    } else return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 20\n      }\n    }, null);\n  }\n\n  getSpansText(def) {\n    if (def.spans.length === 0) {\n      return Array(0);\n    }\n\n    let spanStrings = [];\n\n    for (var span of def.spans) {\n      spanStrings.push(spanToText(span));\n    }\n\n    return spanStrings;\n  }\n\n  getOffsetsText(def) {\n    if (def.offsets.length === 0) {\n      return Array(0);\n    }\n\n    let offsetStrings = [];\n    def.offsets.forEach(offset => {\n      offsetStrings.push(offsetToText(offset));\n    });\n    return offsetStrings;\n  }\n\n  updateSearch(searchText) {\n    this.searchText = searchText;\n    this.setState({\n      binaryValue: !this.state.binaryValue\n    });\n  }\n\n  applySearchFilter() {\n    if (this.searchText !== \"\") return Object.keys(this.displayDefs).filter(pieceName => pieceName.toLowerCase().startsWith(this.searchText));else return Object.keys(this.displayDefs);\n  }\n\n  getProfiles() {\n    let pieceNames = this.applySearchFilter();\n    let profiles = [];\n\n    for (var pieceName of pieceNames) {\n      profiles.push( /*#__PURE__*/React.createElement(CreatedPieceProfile, {\n        expand: this.expand,\n        select: this.select,\n        pieceName: pieceName,\n        displayDefs: this.displayDefs,\n        selectedPiece: this.state.selected,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 17\n        }\n      }));\n    }\n\n    return profiles;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"load-profile-modal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"created-piece-load-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"created-piece-load-window-top-bar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"created-piece-load-window-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 29\n      }\n    }, \"Created Pieces\"), /*#__PURE__*/React.createElement(CreatedPieceClose, {\n      togleLoadModal: this.props.togleLoadModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(SearchBar, {\n      updateSearch: this.updateSearch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"created-piece-profiles\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 25\n      }\n    }, this.getProfiles()), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"created-piece-bottom-bar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(CreatedPieceLoadButton, {\n      accept: this.accept,\n      selected: this.state.selected,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 29\n      }\n    })))), this.getExpandModals());\n  }\n\n}","map":{"version":3,"sources":["/home/brian/ChessKingsCouncil/app/src/Components/CreatePiece/Options/LoadDef/Modals/CreatedPieceProfiles.jsx"],"names":["React","CreatedPieceProfile","offsetToText","spanToText","CreatePieceExpandModal","CreatedPieceLoadButton","CreatedPieceClose","SearchBar","CreatedPieceProfiles","Component","constructor","props","searchText","state","binaryValue","selected","displayDefs","JSON","parse","stringify","defs","Object","keys","forEach","pieceName","getSpansText","getOffsetsText","select","bind","expand","accept","updateSearch","setState","piece","color","value","rangeType","setUnsaved","load","togleLoadModal","getExpandModals","def","spans","length","Array","spanStrings","span","push","offsets","offsetStrings","offset","applySearchFilter","filter","toLowerCase","startsWith","getProfiles","pieceNames","profiles","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {CreatedPieceProfile} from \"./CreatedPieceProfile\";\nimport {offsetToText} from \"../../../../helpers/offsetToText\";\nimport {spanToText} from \"../../../../helpers/spanToText\";\n// import {getColorName} from \"../../../../helpers/getColorName\";\nimport {CreatePieceExpandModal} from \"./CreatePieceProfileWB/CreatePieceExpandModal\"\nimport {CreatedPieceLoadButton} from \"./CreatedPieceLoadButton\";\nimport {CreatedPieceClose} from \"./CreatedPieceClose\";\nimport {SearchBar} from \"./SearchBar\";\nimport \"./CreatedPieceProfiles.css\";\n\nexport class CreatedPieceProfiles extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.searchText = \"\";\n        this.state = {binaryValue: true, selected: null};\n        this.displayDefs = JSON.parse(JSON.stringify(this.props.defs));\n        Object.keys(this.displayDefs).forEach(pieceName => {\n            this.displayDefs[pieceName][\"W\"][\"spans\"] = this.getSpansText(this.displayDefs[pieceName][\"W\"])\n            this.displayDefs[pieceName][\"W\"][\"offsets\"] = this.getOffsetsText(this.displayDefs[pieceName][\"W\"])\n            this.displayDefs[pieceName][\"B\"][\"spans\"] = this.getSpansText(this.displayDefs[pieceName][\"B\"])\n            this.displayDefs[pieceName][\"B\"][\"offsets\"] = this.getOffsetsText(this.displayDefs[pieceName][\"B\"])\n        });\n        this.select = this.select.bind(this);\n        this.expand = this.expand.bind(this);\n        this.accept = this.accept.bind(this);\n        this.updateSearch = this.updateSearch.bind(this);\n    }\n\n    select(pieceName) {\n        if (this.state.selected === pieceName)\n            this.setState({selected: null})\n        else\n            this.setState({selected: pieceName});\n    }\n\n    expand(piece, color, value) {\n        this.pieceName = piece;\n        this.rangeType = value;\n        this.color = color;\n        this.setState({binaryValue: ! this.state.binaryValue});\n    }\n\n    accept() {\n        this.props.setUnsaved(false);\n        this.props.load(this.state.selected);\n        this.props.togleLoadModal(false);\n    }\n\n    getExpandModals() {\n        if (this.pieceName != null && this.rangeType != null && this.color != null) {\n            return ( <CreatePieceExpandModal def={this.defs[this.pieceName][this.color]}\n                                    pieceName={this.pieceName}\n                                    rangeType={this.rangeType}\n                                    color={this.color}\n                                    expand={this.expand}\n                                    location=\"d4\" />\n            );\n\n        }\n        else\n            return <div>{null}</div>\n    }\n\n\n    getSpansText(def) {\n\n        if (def.spans.length === 0) {\n            return Array(0);\n        }\n\n        let spanStrings = [];\n        for (var span of def.spans) {\n            spanStrings.push(spanToText(span))\n        }\n        return spanStrings;\n    }\n        \n    getOffsetsText(def) {\n\n        if (def.offsets.length === 0) {\n            return Array(0);\n        }\n\n        let offsetStrings = []\n        def.offsets.forEach(offset => {\n            offsetStrings.push(offsetToText(offset));\n        })\n        return offsetStrings;\n    }\n\n    updateSearch(searchText) {\n        this.searchText = searchText;\n        this.setState({binaryValue: ! this.state.binaryValue})\n    }\n\n    applySearchFilter() {\n        if (this.searchText !== \"\")\n            return Object.keys(this.displayDefs).filter(pieceName => pieceName.toLowerCase().startsWith(this.searchText));\n        else\n            return Object.keys(this.displayDefs);\n    }\n\n    getProfiles() {\n        let pieceNames = this.applySearchFilter();\n        let profiles = [];\n        for (var pieceName of pieceNames) {\n            profiles.push(\n                <CreatedPieceProfile \n                  expand={this.expand}\n                  select={this.select}\n                  pieceName={pieceName}\n                  displayDefs={this.displayDefs}\n                  selectedPiece={this.state.selected}\n                />\n            );\n        }\n        return profiles;\n    }\n\n    render() {\n        return (\n            <>\n                <div className=\"load-profile-modal\">\n                    <div className=\"created-piece-load-window\">\n                        <div className=\"created-piece-load-window-top-bar\">\n                            <div className=\"created-piece-load-window-title\">\n                                Created Pieces\n                            </div>\n                            <CreatedPieceClose togleLoadModal={this.props.togleLoadModal} />\n                            <SearchBar updateSearch={this.updateSearch}/>\n                        </div>\n                        <div className=\"created-piece-profiles\">\n                            {this.getProfiles()}\n                        </div>\n                        <div className=\"created-piece-bottom-bar\">\n                            <CreatedPieceLoadButton accept={this.accept} selected={this.state.selected} />\n                        </div>\n                    </div>\n                </div>\n                {this.getExpandModals()}\n            </>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}