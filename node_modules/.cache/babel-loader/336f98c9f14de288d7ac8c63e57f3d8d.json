{"ast":null,"code":"import { isPromoRows } from \"./isPromoRows\";\nimport { rfToXy } from \"../../../coordType/crdCnvrt\";\nexport function filterNonMatchingRows(board, pawnRangesRfKey) {\n  var promosDict = {};\n\n  for (var rf of Object.keys(pawnRangesRfKey)) {\n    promosDict[rf] = [];\n\n    for (var dest of pawnRangesRfKey[rf]) {\n      if (isPromoRows(rfToXy(rf), rfToXy(dest), board[rf])) {\n        promosDict[rf].push(dest);\n      }\n    }\n\n    for (var rf of Object.keys(promosDict)) {\n      if (promosDict[rf].length === 0) delete promosDict[rf];\n    }\n  }\n\n  return promosDict;\n} // module.exports = filterNonMatchingRows;","map":{"version":3,"sources":["/home/brian/ChessKingsCouncil/app/src/game_logic/ranges/specialMoves/pawnPromotion/filterNonMatchingRows.js"],"names":["isPromoRows","rfToXy","filterNonMatchingRows","board","pawnRangesRfKey","promosDict","rf","Object","keys","dest","push","length"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,eAA1B;AACA,SAAQC,MAAR,QAAqB,6BAArB;AAGA,OAAO,SAASC,qBAAT,CAA+BC,KAA/B,EAAsCC,eAAtC,EAAuD;AAE1D,MAAIC,UAAU,GAAG,EAAjB;;AAEA,OAAK,IAAIC,EAAT,IAAeC,MAAM,CAACC,IAAP,CAAYJ,eAAZ,CAAf,EAA6C;AACzCC,IAAAA,UAAU,CAACC,EAAD,CAAV,GAAiB,EAAjB;;AACA,SAAK,IAAIG,IAAT,IAAiBL,eAAe,CAACE,EAAD,CAAhC,EAAsC;AAClC,UAAIN,WAAW,CAACC,MAAM,CAACK,EAAD,CAAP,EAAaL,MAAM,CAACQ,IAAD,CAAnB,EAA2BN,KAAK,CAACG,EAAD,CAAhC,CAAf,EAAsD;AAClDD,QAAAA,UAAU,CAACC,EAAD,CAAV,CAAeI,IAAf,CAAoBD,IAApB;AACH;AACJ;;AAED,SAAK,IAAIH,EAAT,IAAeC,MAAM,CAACC,IAAP,CAAYH,UAAZ,CAAf,EAAwC;AACpC,UAAIA,UAAU,CAACC,EAAD,CAAV,CAAeK,MAAf,KAA0B,CAA9B,EACI,OAAON,UAAU,CAACC,EAAD,CAAjB;AACP;AACJ;;AAED,SAAOD,UAAP;AACH,C,CAED","sourcesContent":["import {isPromoRows} from \"./isPromoRows\";\nimport {rfToXy} from \"../../../coordType/crdCnvrt\";\n\n\nexport function filterNonMatchingRows(board, pawnRangesRfKey) {\n    \n    var promosDict = {}\n    \n    for (var rf of Object.keys(pawnRangesRfKey)) {\n        promosDict[rf] = []\n        for (var dest of pawnRangesRfKey[rf]) {\n            if (isPromoRows(rfToXy(rf), rfToXy(dest), board[rf])) {\n                promosDict[rf].push(dest)\n            }\n        }\n\n        for (var rf of Object.keys(promosDict)) {\n            if (promosDict[rf].length === 0)\n                delete promosDict[rf]\n        }\n    }\n\n    return promosDict;\n}\n\n// module.exports = filterNonMatchingRows;"]},"metadata":{},"sourceType":"module"}