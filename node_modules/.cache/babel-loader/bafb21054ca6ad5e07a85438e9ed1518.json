{"ast":null,"code":"import { getSqrCase } from \"../../sqrCase/getSqrCase\";\nimport { xyToRf } from \"../../coordType/crdCnvrt\";\nimport { EMPTY } from \"../../sqrCase/sqrCases\";\nimport { step_1sqr90d, step_1sqr270d } from \"../../helpers/stepFuncs\";\nexport function valid2SqrJump(board, sqr, color, pawnHist) {\n  /*get the square that might be a first move 2 square jump for pawn**/\n  var id = board[xyToRf(...sqr)];\n  var [x, y] = [...sqr];\n\n  if (pawnHist[id].length != 1) {\n    return false;\n  }\n\n  if (color === 'W') {\n    [x, y] = step_1sqr90d(...sqr);\n\n    if (getSqrCase(board, x, y, color) != EMPTY) {\n      return false;\n    }\n\n    [x, y] = step_1sqr90d(x, y);\n\n    if (getSqrCase(board, x, y, color) != EMPTY) {\n      return false;\n    }\n  } else if (color === 'B') {\n    [x, y] = step_1sqr270d(...sqr);\n\n    if (getSqrCase(board, x, y, color) != EMPTY) {\n      return false;\n    }\n\n    [x, y] = step_1sqr270d(x, y);\n\n    if (getSqrCase(board, x, y, color) != EMPTY) {\n      return false;\n    }\n  } else {\n    console.log('error valid_2SqrJump.py: invalid color');\n    return -1;\n  }\n\n  return true;\n} // module.exports = valid2SqrJump;\n\n/** for node.js\nif (require.main === module) {\n\n    import {printBoard} from \"../../printers/printBoard\";\n    import {sampleBoardDicts} from \"../../testObjects/sampleBoardDicts\";\n    import {dataDict} from \"../../testObjects/dataDicts/dd1\"\n    import {replaceRankfileWithPawnId} from \"../../apiHelpers/replaceRankfileWithPawnId\";\n    import {mapDictListRfToXy} from \"../../coordType/mapDictListRfToXy\"\n\n    var board = sampleBoardDicts[\"pawn_range\"]\n    var pawnHistories = mapDictListRfToXy(replaceRankfileWithPawnId(board, dataDict[\"pawn_range\"][\"json\"][\"pawn_histories\"]))\n    var whiteLocs = [[1, 2], [4, 2], [6, 2], [8, 2], [2, 4], [3, 4], [5, 4], [7, 5]]\n    var blackLocs = [[1, 7], [2, 6], [3, 7], [6, 7], [7, 7], [4, 5], [5, 5], [8, 5]]\n\n\n    for (var sqr of whiteLocs) {\n        if (valid2SqrJump(board, sqr, 'W', pawnHistories))\n            printBoard(board, `${board[xyToRf(...sqr)]}, green: yes, red: no, blue: start square`, null, [xyToRf(sqr[0], sqr[1] + 2)], [xyToRf(...sqr)])\n        else\n            printBoard(board, `${board[xyToRf(...sqr)]}, green: yes, red: no, blue: start square`, [xyToRf(sqr[0], sqr[1] + 2)], null, [xyToRf(...sqr)])\n    }\n\n    for (var sqr of blackLocs) {\n        if (valid2SqrJump(board, sqr, 'B', pawnHistories))\n            printBoard(board, `${board[xyToRf(...sqr)]}, green: yes, red: no, blue: start square`, null, [xyToRf(sqr[0], sqr[1] - 2)], [xyToRf(...sqr)])\n        else\n            printBoard(board, `${board[xyToRf(...sqr)]}, green: yes, red: no, blue: start square`, [xyToRf(sqr[0], sqr[1] - 2)], null, [xyToRf(...sqr)])\n    }\n\n\n}\n*/","map":{"version":3,"sources":["/home/brian/ChessKingsCouncil/app/src/game_logic/ranges/pawn/valid2SqrJump.js"],"names":["getSqrCase","xyToRf","EMPTY","step_1sqr90d","step_1sqr270d","valid2SqrJump","board","sqr","color","pawnHist","id","x","y","length","console","log"],"mappings":"AAAA,SAAQA,UAAR,QAAyB,0BAAzB;AACA,SAAQC,MAAR,QAAqB,0BAArB;AACA,SAAQC,KAAR,QAAoB,wBAApB;AACA,SAAQC,YAAR,EAAuBC,aAAvB,QAA2C,yBAA3C;AAGA,OAAO,SAASC,aAAT,CAAuBC,KAAvB,EAA8BC,GAA9B,EAAmCC,KAAnC,EAA0CC,QAA1C,EAAoD;AACvD;AAEA,MAAIC,EAAE,GAAGJ,KAAK,CAACL,MAAM,CAAC,GAAGM,GAAJ,CAAP,CAAd;AACA,MAAI,CAACI,CAAD,EAAIC,CAAJ,IAAS,CAAC,GAAGL,GAAJ,CAAb;;AAEA,MAAIE,QAAQ,CAACC,EAAD,CAAR,CAAaG,MAAb,IAAuB,CAA3B,EAA8B;AAC1B,WAAO,KAAP;AACH;;AAED,MAAIL,KAAK,KAAK,GAAd,EAAmB;AACf,KAACG,CAAD,EAAIC,CAAJ,IAAST,YAAY,CAAC,GAAGI,GAAJ,CAArB;;AACA,QAAIP,UAAU,CAACM,KAAD,EAAQK,CAAR,EAAWC,CAAX,EAAcJ,KAAd,CAAV,IAAkCN,KAAtC,EAA6C;AACzC,aAAO,KAAP;AACH;;AACD,KAACS,CAAD,EAAIC,CAAJ,IAAST,YAAY,CAACQ,CAAD,EAAIC,CAAJ,CAArB;;AACA,QAAIZ,UAAU,CAACM,KAAD,EAAQK,CAAR,EAAWC,CAAX,EAAcJ,KAAd,CAAV,IAAkCN,KAAtC,EAA6C;AACzC,aAAO,KAAP;AACH;AACJ,GATD,MAWK,IAAIM,KAAK,KAAK,GAAd,EAAmB;AACpB,KAACG,CAAD,EAAIC,CAAJ,IAASR,aAAa,CAAC,GAAGG,GAAJ,CAAtB;;AACA,QAAIP,UAAU,CAACM,KAAD,EAAQK,CAAR,EAAWC,CAAX,EAAcJ,KAAd,CAAV,IAAkCN,KAAtC,EAA6C;AACzC,aAAO,KAAP;AACH;;AACD,KAACS,CAAD,EAAIC,CAAJ,IAASR,aAAa,CAACO,CAAD,EAAIC,CAAJ,CAAtB;;AACA,QAAIZ,UAAU,CAACM,KAAD,EAAQK,CAAR,EAAWC,CAAX,EAAcJ,KAAd,CAAV,IAAkCN,KAAtC,EAA6C;AACzC,aAAO,KAAP;AACH;AACJ,GATI,MAWA;AACDY,IAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ;AACA,WAAO,CAAC,CAAR;AACH;;AAED,SAAO,IAAP;AACH,C,CAED;;AAEA","sourcesContent":["import {getSqrCase} from \"../../sqrCase/getSqrCase\";\nimport {xyToRf} from \"../../coordType/crdCnvrt\"\nimport {EMPTY} from \"../../sqrCase/sqrCases\";\nimport {step_1sqr90d,  step_1sqr270d} from \"../../helpers/stepFuncs\";\n\n\nexport function valid2SqrJump(board, sqr, color, pawnHist) {\n    /*get the square that might be a first move 2 square jump for pawn**/\n    \n    var id = board[xyToRf(...sqr)]\n    var [x, y] = [...sqr]\n\n    if (pawnHist[id].length != 1) {\n        return false\n    }\n\n    if (color === 'W') {\n        [x, y] = step_1sqr90d(...sqr)\n        if (getSqrCase(board, x, y, color) != EMPTY) {\n            return false\n        }\n        [x, y] = step_1sqr90d(x, y)\n        if (getSqrCase(board, x, y, color) != EMPTY) {\n            return false\n        }\n    }\n\n    else if (color === 'B') {\n        [x, y] = step_1sqr270d(...sqr)\n        if (getSqrCase(board, x, y, color) != EMPTY) {\n            return false\n        }\n        [x, y] = step_1sqr270d(x, y)\n        if (getSqrCase(board, x, y, color) != EMPTY) {\n            return false\n        }\n    }\n\n    else {\n        console.log('error valid_2SqrJump.py: invalid color')\n        return -1\n    }\n\n    return true\n}\n\n// module.exports = valid2SqrJump;\n\n/** for node.js\nif (require.main === module) {\n\n    import {printBoard} from \"../../printers/printBoard\";\n    import {sampleBoardDicts} from \"../../testObjects/sampleBoardDicts\";\n    import {dataDict} from \"../../testObjects/dataDicts/dd1\"\n    import {replaceRankfileWithPawnId} from \"../../apiHelpers/replaceRankfileWithPawnId\";\n    import {mapDictListRfToXy} from \"../../coordType/mapDictListRfToXy\"\n\n    var board = sampleBoardDicts[\"pawn_range\"]\n    var pawnHistories = mapDictListRfToXy(replaceRankfileWithPawnId(board, dataDict[\"pawn_range\"][\"json\"][\"pawn_histories\"]))\n    var whiteLocs = [[1, 2], [4, 2], [6, 2], [8, 2], [2, 4], [3, 4], [5, 4], [7, 5]]\n    var blackLocs = [[1, 7], [2, 6], [3, 7], [6, 7], [7, 7], [4, 5], [5, 5], [8, 5]]\n\n\n    for (var sqr of whiteLocs) {\n        if (valid2SqrJump(board, sqr, 'W', pawnHistories))\n            printBoard(board, `${board[xyToRf(...sqr)]}, green: yes, red: no, blue: start square`, null, [xyToRf(sqr[0], sqr[1] + 2)], [xyToRf(...sqr)])\n        else\n            printBoard(board, `${board[xyToRf(...sqr)]}, green: yes, red: no, blue: start square`, [xyToRf(sqr[0], sqr[1] + 2)], null, [xyToRf(...sqr)])\n    }\n\n    for (var sqr of blackLocs) {\n        if (valid2SqrJump(board, sqr, 'B', pawnHistories))\n            printBoard(board, `${board[xyToRf(...sqr)]}, green: yes, red: no, blue: start square`, null, [xyToRf(sqr[0], sqr[1] - 2)], [xyToRf(...sqr)])\n        else\n            printBoard(board, `${board[xyToRf(...sqr)]}, green: yes, red: no, blue: start square`, [xyToRf(sqr[0], sqr[1] - 2)], null, [xyToRf(...sqr)])\n    }\n\n\n}\n*/"]},"metadata":{},"sourceType":"module"}