{"ast":null,"code":"import { JsonRecords } from \"../../../JsonRecords/JsonRecords\";\nimport { getPieceType } from \"../../../pieceType/getPieceType\";\nimport { pawn2SqrFirstMoves } from \"./pawn2SqrFirstMoves\";\nimport { strfind } from \"../../../helpers/strfind\";\nexport function pawnMovedOnce2Sqrs(pawnHistories, id) {\n  if (strfind(pawn2SqrFirstMoves, pawnHistories[id])) {\n    return true;\n  } else {\n    return false;\n  }\n} // module.exports = pawnMovedOnce2Sqrs;\n\n/** for node.js\nif (require.main === module) {\n\n    import {sampleBoardDicts} from \"../../../testObjects/sampleBoardDicts\"\n    import {printBoard} from \"../../../printers/printBoard\";\n    import {dataDict} from \"../../../testObjects/dataDicts/dd1\";\n    import {initPawnIds} from \"../../../JsonRecords/initPawnIds\";\n\n    var board, jsonRecords, yes, no, records;\n    \n    yes = []; no = [];\n    board = sampleBoardDicts[\"pawn_range\"]\n    records = dataDict[\"pawn_range\"][\"json\"]  \n    jsonRecords = new JsonRecords(initPawnIds(records, board))\n    for (var rf of Object.keys(board)) {\n        if (board[rf] === '#') {\n            continue\n        }\n        if (getPieceType(board[rf]) === 'P') {\n            if (pawnMovedOnce2Sqrs(jsonRecords.pawnHistories, board[rf]))\n                yes.push(rf)\n            else\n                no.push(rf)\n        }\n    }\n    printBoard(board, \"\\ngreen: yes, red: no\", no, yes)\n\n\n    yes = []; no = [];\n    board = sampleBoardDicts[\"new\"]\n    records = dataDict[\"NewCouncil\"][\"json\"]\n    jsonRecords = new JsonRecords(initPawnIds(records, board))\n    for (var rf of Object.keys(board)) {\n        if (board[rf] === '#') {\n            continue\n        }\n        if (getPieceType(board[rf]) === 'P') {\n            if (pawnMovedOnce2Sqrs(jsonRecords.pawnHistories, board[rf]))\n                yes.push(rf)\n            else\n                no.push(rf)\n        }\n    }\n    printBoard(board, \"\\ngreen: yes, red: no\", no, yes)\n\n\n    yes = []; no = [];\n    board = sampleBoardDicts[\"pawn_moves_test\"]\n    records = dataDict[\"pawn_moves_test\"][\"json\"]\n    jsonRecords = new JsonRecords(initPawnIds(records, board))\n    for (var rf of Object.keys(board)) {\n        if (board[rf] === '#') {\n            continue\n        }\n        if (getPieceType(board[rf]) === 'P') {\n            if (pawnMovedOnce2Sqrs(jsonRecords.pawnHistories, board[rf]))\n                yes.push(rf)\n            else\n                no.push(rf)\n        }\n    }\n    printBoard(board, \"\\ngreen: yes, red: no\", no, yes);\n\n    \n\n}\n*/","map":{"version":3,"sources":["/home/brian/ChessKingsCouncil/app/src/game_logic/ranges/specialMoves/enPassant/pawnMovedOnce2Sqrs.js"],"names":["JsonRecords","getPieceType","pawn2SqrFirstMoves","strfind","pawnMovedOnce2Sqrs","pawnHistories","id"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,kCAA1B;AACA,SAAQC,YAAR,QAA2B,iCAA3B;AACA,SAAQC,kBAAR,QAAiC,sBAAjC;AACA,SAAQC,OAAR,QAAsB,0BAAtB;AAGA,OAAO,SAASC,kBAAT,CAA4BC,aAA5B,EAA2CC,EAA3C,EAA+C;AAClD,MAAIH,OAAO,CAACD,kBAAD,EAAqBG,aAAa,CAACC,EAAD,CAAlC,CAAX,EAAoD;AAChD,WAAO,IAAP;AACH,GAFD,MAGK;AACD,WAAO,KAAP;AACH;AACJ,C,CAED;;AAEA","sourcesContent":["import {JsonRecords} from \"../../../JsonRecords/JsonRecords\";\nimport {getPieceType} from \"../../../pieceType/getPieceType\";\nimport {pawn2SqrFirstMoves} from \"./pawn2SqrFirstMoves\";\nimport {strfind} from \"../../../helpers/strfind\";\n\n\nexport function pawnMovedOnce2Sqrs(pawnHistories, id) {\n    if (strfind(pawn2SqrFirstMoves, pawnHistories[id])) {\n        return true\n    }\n    else {\n        return false\n    }\n}\n\n// module.exports = pawnMovedOnce2Sqrs;\n\n/** for node.js\nif (require.main === module) {\n\n    import {sampleBoardDicts} from \"../../../testObjects/sampleBoardDicts\"\n    import {printBoard} from \"../../../printers/printBoard\";\n    import {dataDict} from \"../../../testObjects/dataDicts/dd1\";\n    import {initPawnIds} from \"../../../JsonRecords/initPawnIds\";\n\n    var board, jsonRecords, yes, no, records;\n    \n    yes = []; no = [];\n    board = sampleBoardDicts[\"pawn_range\"]\n    records = dataDict[\"pawn_range\"][\"json\"]  \n    jsonRecords = new JsonRecords(initPawnIds(records, board))\n    for (var rf of Object.keys(board)) {\n        if (board[rf] === '#') {\n            continue\n        }\n        if (getPieceType(board[rf]) === 'P') {\n            if (pawnMovedOnce2Sqrs(jsonRecords.pawnHistories, board[rf]))\n                yes.push(rf)\n            else\n                no.push(rf)\n        }\n    }\n    printBoard(board, \"\\ngreen: yes, red: no\", no, yes)\n\n\n    yes = []; no = [];\n    board = sampleBoardDicts[\"new\"]\n    records = dataDict[\"NewCouncil\"][\"json\"]\n    jsonRecords = new JsonRecords(initPawnIds(records, board))\n    for (var rf of Object.keys(board)) {\n        if (board[rf] === '#') {\n            continue\n        }\n        if (getPieceType(board[rf]) === 'P') {\n            if (pawnMovedOnce2Sqrs(jsonRecords.pawnHistories, board[rf]))\n                yes.push(rf)\n            else\n                no.push(rf)\n        }\n    }\n    printBoard(board, \"\\ngreen: yes, red: no\", no, yes)\n\n\n    yes = []; no = [];\n    board = sampleBoardDicts[\"pawn_moves_test\"]\n    records = dataDict[\"pawn_moves_test\"][\"json\"]\n    jsonRecords = new JsonRecords(initPawnIds(records, board))\n    for (var rf of Object.keys(board)) {\n        if (board[rf] === '#') {\n            continue\n        }\n        if (getPieceType(board[rf]) === 'P') {\n            if (pawnMovedOnce2Sqrs(jsonRecords.pawnHistories, board[rf]))\n                yes.push(rf)\n            else\n                no.push(rf)\n        }\n    }\n    printBoard(board, \"\\ngreen: yes, red: no\", no, yes);\n\n    \n\n}\n*/"]},"metadata":{},"sourceType":"module"}