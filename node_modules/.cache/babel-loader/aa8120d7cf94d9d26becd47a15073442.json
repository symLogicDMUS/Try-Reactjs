{"ast":null,"code":"import { getHypoBoard } from \"./getHypoBoard\";\nimport { printBoard } from \"../printers/printBoard\";\nimport { sampleBoardDicts } from \"../testObjects/sampleBoardDicts\";\nimport { xyToRf } from \"../coordType/crdCnvrt\";\nexport function getHypoBoards(board, kingLoc, initRange, color) {\n  /**\n  get one dict of boards, where each board the king has moved to a its.includes(square) initial range. The key is the location\n  the king moved to for that board.\n  */\n  var boards = {};\n\n  for (var dest of initRange) {\n    boards[xyToRf(...dest)] = getHypoBoard(board, kingLoc, dest);\n  }\n\n  return boards;\n} // module.exports = getHypoBoards;\n\n/** for node.js\nif (require.main === module) {\n    console.log(\"super_checkmate_impossible_example\")\n    board = sampleBoardDicts['super_checkmate_impossible_example']\n    hypoBoards = getHypoBoards(board, [6, 6], [[5, 5], [6, 5], [7, 5], [5, 6], [7, 6], [5, 7], [6, 7], [7, 7]], \"W\")\n\n    for (var board_ of Object.values(hypoBoards)) {\n        printBoard(board_, \"\\n\", [\"f6\"], null, )\n    }\n\n\n}\n*/","map":{"version":3,"sources":["/home/brian/ChessKingsCouncil/app/src/game_logic/threatArea/getHypoBoards.js"],"names":["getHypoBoard","printBoard","sampleBoardDicts","xyToRf","getHypoBoards","board","kingLoc","initRange","color","boards","dest"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,gBAA3B;AACA,SAAQC,UAAR,QAAyB,wBAAzB;AACA,SAAQC,gBAAR,QAA+B,iCAA/B;AACA,SAAQC,MAAR,QAAqB,uBAArB;AAEA,OAAO,SAASC,aAAT,CAAuBC,KAAvB,EAA8BC,OAA9B,EAAuCC,SAAvC,EAAkDC,KAAlD,EAAyD;AAC5D;;;;AAIA,MAAIC,MAAM,GAAG,EAAb;;AACA,OAAK,IAAIC,IAAT,IAAiBH,SAAjB,EAA4B;AACxBE,IAAAA,MAAM,CAACN,MAAM,CAAC,GAAGO,IAAJ,CAAP,CAAN,GAA0BV,YAAY,CAACK,KAAD,EAAQC,OAAR,EAAiBI,IAAjB,CAAtC;AACH;;AACD,SAAOD,MAAP;AACH,C,CAED;;AAEA","sourcesContent":["import {getHypoBoard} from \"./getHypoBoard\";\nimport {printBoard} from \"../printers/printBoard\";\nimport {sampleBoardDicts} from \"../testObjects/sampleBoardDicts\";\nimport {xyToRf} from \"../coordType/crdCnvrt\"\n\nexport function getHypoBoards(board, kingLoc, initRange, color) {\n    /**\n    get one dict of boards, where each board the king has moved to a its.includes(square) initial range. The key is the location\n    the king moved to for that board.\n    */\n    var boards = {}\n    for (var dest of initRange) {\n        boards[xyToRf(...dest)] = getHypoBoard(board, kingLoc, dest)\n    }\n    return boards\n}\n\n// module.exports = getHypoBoards;\n\n/** for node.js\nif (require.main === module) {\n    console.log(\"super_checkmate_impossible_example\")\n    board = sampleBoardDicts['super_checkmate_impossible_example']\n    hypoBoards = getHypoBoards(board, [6, 6], [[5, 5], [6, 5], [7, 5], [5, 6], [7, 6], [5, 7], [6, 7], [7, 7]], \"W\")\n\n    for (var board_ of Object.values(hypoBoards)) {\n        printBoard(board_, \"\\n\", [\"f6\"], null, )\n    }\n\n\n}\n*/"]},"metadata":{},"sourceType":"module"}