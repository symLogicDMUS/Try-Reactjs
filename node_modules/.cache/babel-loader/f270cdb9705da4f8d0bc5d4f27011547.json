{"ast":null,"code":"import { getSqrCase } from \"../../sqrCase/getSqrCase\";\nimport { OOB, FRIEND } from \"../../sqrCase/sqrCases\";\nimport { dist } from \"../../helpers/formulas\";\nimport { printBoard } from \"../../printers/printBoard\";\nimport { sampleBoardDicts } from \"../../testObjects/sampleBoardDicts\";\nimport { mapListRfToXy } from \"../../coordType/mapListRfToXy\";\nimport { mapListXyToRf } from \"../../coordType/mapListXyToRf\";\nimport { rfToXy } from \"../../coordType/crdCnvrt\";\nexport function getKingInitialMoves(board, sqr, color) {\n  /*get every initial 'king' move (one square away from sqr)**/\n  var initMoves = Object.keys(board).filter(sqr2 => dist(sqr, rfToXy(sqr2)) === Math.sqrt(2) || dist(sqr, rfToXy(sqr2)) === 1);\n  initMoves = initMoves.filter(rf => {\n    var sqr = rfToXy(rf);\n    return getSqrCase(board, ...sqr, color) !== OOB;\n  });\n  initMoves = initMoves.filter(rf => {\n    var sqr = rfToXy(rf);\n    return getSqrCase(board, ...sqr, color) !== FRIEND;\n  });\n  return mapListRfToXy(initMoves);\n} // module.exports = getKingInitialMoves;\n\n/** for node.js\nif (require.main === module) {\n\n    let board = sampleBoardDicts['super_checkmate_impossible_example']\n    initMoves = getKingInitialMoves(board, [6, 6], 'W')\n    printBoard(board, heading='super_checkmate_impossible_example', mapListXyToRf(initMoves))\n\n\n    board = sampleBoardDicts['king_range_test']\n    initMoves = getKingInitialMoves(board, [4, 3], 'W')\n    printBoard(board, heading='\\nking_range_test, white', mapListXyToRf(initMoves))\n\n\n}\n*/","map":{"version":3,"sources":["/home/brian/ChessKingsCouncil/app/src/game_logic/ranges/king/getKingInitialMoves.js"],"names":["getSqrCase","OOB","FRIEND","dist","printBoard","sampleBoardDicts","mapListRfToXy","mapListXyToRf","rfToXy","getKingInitialMoves","board","sqr","color","initMoves","Object","keys","filter","sqr2","Math","sqrt","rf"],"mappings":"AAAA,SAAQA,UAAR,QAAyB,0BAAzB;AACA,SAASC,GAAT,EAAcC,MAAd,QAA2B,wBAA3B;AACA,SAAQC,IAAR,QAAmB,wBAAnB;AACA,SAAQC,UAAR,QAAyB,2BAAzB;AACA,SAAQC,gBAAR,QAA+B,oCAA/B;AACA,SAAQC,aAAR,QAA4B,+BAA5B;AACA,SAAQC,aAAR,QAA4B,+BAA5B;AACA,SAASC,MAAT,QAAuB,0BAAvB;AAGA,OAAO,SAASC,mBAAT,CAA6BC,KAA7B,EAAoCC,GAApC,EAAyCC,KAAzC,EAAgD;AACnD;AACA,MAAIC,SAAS,GAAGC,MAAM,CAACC,IAAP,CAAYL,KAAZ,EAAmBM,MAAnB,CAA0BC,IAAI,IAAId,IAAI,CAACQ,GAAD,EAAMH,MAAM,CAACS,IAAD,CAAZ,CAAJ,KAA4BC,IAAI,CAACC,IAAL,CAAU,CAAV,CAA5B,IAA4ChB,IAAI,CAACQ,GAAD,EAAMH,MAAM,CAACS,IAAD,CAAZ,CAAJ,KAA4B,CAA1G,CAAhB;AACAJ,EAAAA,SAAS,GAAGA,SAAS,CAACG,MAAV,CAAiBI,EAAE,IAAI;AAC/B,QAAIT,GAAG,GAAGH,MAAM,CAACY,EAAD,CAAhB;AACA,WAAOpB,UAAU,CAACU,KAAD,EAAQ,GAAGC,GAAX,EAAgBC,KAAhB,CAAV,KAAqCX,GAA5C;AACH,GAHW,CAAZ;AAIAY,EAAAA,SAAS,GAAGA,SAAS,CAACG,MAAV,CAAiBI,EAAE,IAAI;AAC/B,QAAIT,GAAG,GAAGH,MAAM,CAACY,EAAD,CAAhB;AACA,WAAOpB,UAAU,CAACU,KAAD,EAAQ,GAAGC,GAAX,EAAgBC,KAAhB,CAAV,KAAqCV,MAA5C;AACH,GAHW,CAAZ;AAIA,SAAOI,aAAa,CAACO,SAAD,CAApB;AACH,C,CAED;;AAEA","sourcesContent":["import {getSqrCase} from \"../../sqrCase/getSqrCase\";\nimport  {OOB, FRIEND} from \"../../sqrCase/sqrCases\";\nimport {dist} from \"../../helpers/formulas\";\nimport {printBoard} from \"../../printers/printBoard\";\nimport {sampleBoardDicts} from \"../../testObjects/sampleBoardDicts\";\nimport {mapListRfToXy} from \"../../coordType/mapListRfToXy\"\nimport {mapListXyToRf} from \"../../coordType/mapListXyToRf\"\nimport { rfToXy } from \"../../coordType/crdCnvrt\";\n\n\nexport function getKingInitialMoves(board, sqr, color) {\n    /*get every initial 'king' move (one square away from sqr)**/\n    var initMoves = Object.keys(board).filter(sqr2 => dist(sqr, rfToXy(sqr2)) === Math.sqrt(2) || dist(sqr, rfToXy(sqr2)) === 1)\n    initMoves = initMoves.filter(rf => {\n        var sqr = rfToXy(rf)\n        return getSqrCase(board, ...sqr, color) !== OOB;\n    })\n    initMoves = initMoves.filter(rf => {\n        var sqr = rfToXy(rf)\n        return getSqrCase(board, ...sqr, color) !== FRIEND;\n    })\n    return mapListRfToXy(initMoves)\n}\n\n// module.exports = getKingInitialMoves;\n\n/** for node.js\nif (require.main === module) {\n\n    let board = sampleBoardDicts['super_checkmate_impossible_example']\n    initMoves = getKingInitialMoves(board, [6, 6], 'W')\n    printBoard(board, heading='super_checkmate_impossible_example', mapListXyToRf(initMoves))\n\n\n    board = sampleBoardDicts['king_range_test']\n    initMoves = getKingInitialMoves(board, [4, 3], 'W')\n    printBoard(board, heading='\\nking_range_test, white', mapListXyToRf(initMoves))\n\n\n}\n*/"]},"metadata":{},"sourceType":"module"}