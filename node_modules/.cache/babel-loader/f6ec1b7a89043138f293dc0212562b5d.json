{"ast":null,"code":"import { getPathdataDict } from \"./getpathDataDict\";\nimport { sampleBoardDicts } from \"../../testObjects/sampleBoardDicts\";\nexport function getNumPathAttackers(pdDict) {\n  /*get the number of Rooks, Bishops, || Queens, that are attacking the King**/\n  var numPathAttackers = 0;\n\n  for (var direction of Object.keys(pdDict)) {\n    if (pdDict[direction].pieces.length === 0) {\n      continue;\n    }\n\n    if (pdDict[direction].statuses[0] !== 'e') {\n      continue;\n    }\n\n    if (!pdDict[direction].pieceMatchesPath[0]) {\n      continue;\n    }\n\n    numPathAttackers += 1;\n  }\n\n  return numPathAttackers;\n} // module.exports = getNumPathAttackers;\n\n/** for node.js\nif (require.main === module) {\n\n    import {printBoard} from \"../../printers/printBoard\";\n    import {getStandardPieceDefs} from \"../../testObjects/getStandardPieceDefs\";\n    import {getStandardIdDict} from \"../../testObjects/getStandardIdDict\";\n\n    var idDict = getStandardIdDict()\n    var pieceDefs = getStandardPieceDefs()\n\n    var board = sampleBoardDicts['check_example3']\n    var pathdataDict = getPathdataDict(board, [4,4], 'W', pieceDefs, idDict)\n    printBoard(board, `\\ntest 1 ${getNumPathAttackers(pathdataDict)}`, null, null, [\"d4\"])\n    console.log()\n    console.log('\\n')\n\n    board = sampleBoardDicts['super_checkmate_impossible_example']\n    pathdataDict = getPathdataDict(board, [6,6], 'W', pieceDefs, idDict)\n    printBoard(board, `\\n test 2 ${getNumPathAttackers(pathdataDict)}`, null, null, [\"f6\"])\n    console.log('\\n')\n\n}\n*/","map":{"version":3,"sources":["/home/brian/ChessKingsCouncil/app/src/game_logic/pathsInfo/top/getNumPathAttackers.js"],"names":["getPathdataDict","sampleBoardDicts","getNumPathAttackers","pdDict","numPathAttackers","direction","Object","keys","pieces","length","statuses","pieceMatchesPath"],"mappings":"AAAA,SAAQA,eAAR,QAA8B,mBAA9B;AACA,SAAQC,gBAAR,QAA+B,oCAA/B;AAGA,OAAO,SAASC,mBAAT,CAA6BC,MAA7B,EAAqC;AACxC;AACA,MAAIC,gBAAgB,GAAG,CAAvB;;AACA,OAAK,IAAIC,SAAT,IAAsBC,MAAM,CAACC,IAAP,CAAYJ,MAAZ,CAAtB,EAA2C;AACvC,QAAIA,MAAM,CAACE,SAAD,CAAN,CAAkBG,MAAlB,CAAyBC,MAAzB,KAAoC,CAAxC,EAA2C;AACvC;AACH;;AACD,QAAIN,MAAM,CAACE,SAAD,CAAN,CAAkBK,QAAlB,CAA2B,CAA3B,MAAkC,GAAtC,EAA2C;AACvC;AACH;;AACD,QAAI,CAAEP,MAAM,CAACE,SAAD,CAAN,CAAkBM,gBAAlB,CAAmC,CAAnC,CAAN,EAA6C;AACzC;AACH;;AACDP,IAAAA,gBAAgB,IAAI,CAApB;AACH;;AACD,SAAOA,gBAAP;AACH,C,CAED;;AAEA","sourcesContent":["import {getPathdataDict} from \"./getpathDataDict\";\nimport {sampleBoardDicts} from \"../../testObjects/sampleBoardDicts\";\n\n\nexport function getNumPathAttackers(pdDict) {\n    /*get the number of Rooks, Bishops, || Queens, that are attacking the King**/\n    var numPathAttackers = 0;\n    for (var direction of Object.keys(pdDict)) {\n        if (pdDict[direction].pieces.length === 0) {\n            continue\n        }\n        if (pdDict[direction].statuses[0] !== 'e') {\n            continue\n        }\n        if (! pdDict[direction].pieceMatchesPath[0]) {\n            continue\n        }\n        numPathAttackers += 1;\n    }\n    return numPathAttackers;\n}\n\n// module.exports = getNumPathAttackers;\n\n/** for node.js\nif (require.main === module) {\n\n    import {printBoard} from \"../../printers/printBoard\";\n    import {getStandardPieceDefs} from \"../../testObjects/getStandardPieceDefs\";\n    import {getStandardIdDict} from \"../../testObjects/getStandardIdDict\";\n\n    var idDict = getStandardIdDict()\n    var pieceDefs = getStandardPieceDefs()\n\n    var board = sampleBoardDicts['check_example3']\n    var pathdataDict = getPathdataDict(board, [4,4], 'W', pieceDefs, idDict)\n    printBoard(board, `\\ntest 1 ${getNumPathAttackers(pathdataDict)}`, null, null, [\"d4\"])\n    console.log()\n    console.log('\\n')\n\n    board = sampleBoardDicts['super_checkmate_impossible_example']\n    pathdataDict = getPathdataDict(board, [6,6], 'W', pieceDefs, idDict)\n    printBoard(board, `\\n test 2 ${getNumPathAttackers(pathdataDict)}`, null, null, [\"f6\"])\n    console.log('\\n')\n\n}\n*/"]},"metadata":{},"sourceType":"module"}