{"ast":null,"code":"import { sampleBoardDicts } from \"../testObjects/sampleBoardDicts\";\nimport { getSqrCase } from \"../sqrCase/getSqrCase\";\nimport { getPieceType } from \"../pieceType/getPieceType\";\nimport { printBoard } from \"../printers/printBoard\";\nimport { xyToRf } from \"../coordType/crdCnvrt\";\nimport { ENEMY } from \"../sqrCase/sqrCases\";\nimport { mapListXyToRf } from \"../coordType/mapListXyToRf\";\nexport function getActualPawnThreats(board, potentialPawnThreats, color) {\n  /*filter the list of potential pawn threats to get list of actual pawn threats**/\n  var potentialPawnThreats = potentialPawnThreats.filter(sqr => getSqrCase(board, ...sqr, color) === ENEMY && getPieceType(board[xyToRf(...sqr)]) === 'P');\n  return potentialPawnThreats;\n} // module.exports = getActualPawnThreats;\n\n/** for node.js\nif (require.main === module) {\n\n    let board = sampleBoardDicts['pawn_threat1']\n\n    printBoard(board, \"\\nwhite\", mapListXyToRf(getActualPawnThreats(board, [[5, 4], [7, 4]], 'W'),  [\"f3\"]))\n    printBoard(board, \"\\nblack\", mapListXyToRf(getActualPawnThreats(board, [[2, 4], [4, 4]], 'B')), [\"c5\"])\n\n}\n*/","map":{"version":3,"sources":["/home/brian/ChessKingsCouncil/app/src/game_logic/threatArea/getActualPawnThreats.js"],"names":["sampleBoardDicts","getSqrCase","getPieceType","printBoard","xyToRf","ENEMY","mapListXyToRf","getActualPawnThreats","board","potentialPawnThreats","color","filter","sqr"],"mappings":"AAAA,SAAQA,gBAAR,QAA+B,iCAA/B;AACA,SAAQC,UAAR,QAAyB,uBAAzB;AACA,SAAQC,YAAR,QAA2B,2BAA3B;AACA,SAAQC,UAAR,QAAyB,wBAAzB;AACA,SAAQC,MAAR,QAAqB,uBAArB;AACA,SAAQC,KAAR,QAAoB,qBAApB;AACA,SAAQC,aAAR,QAA4B,4BAA5B;AAGA,OAAO,SAASC,oBAAT,CAA8BC,KAA9B,EAAqCC,oBAArC,EAA2DC,KAA3D,EAAkE;AACrE;AACA,MAAID,oBAAoB,GAAIA,oBAAoB,CAACE,MAArB,CAA4BC,GAAG,IAAIX,UAAU,CAACO,KAAD,EAAQ,GAAGI,GAAX,EAAgBF,KAAhB,CAAV,KAAqCL,KAArC,IAA8CH,YAAY,CAACM,KAAK,CAACJ,MAAM,CAAC,GAAGQ,GAAJ,CAAP,CAAN,CAAZ,KAAwC,GAAzH,CAA5B;AACA,SAAOH,oBAAP;AACH,C,CAED;;AAEA","sourcesContent":["import {sampleBoardDicts} from \"../testObjects/sampleBoardDicts\";\nimport {getSqrCase} from \"../sqrCase/getSqrCase\";\nimport {getPieceType} from \"../pieceType/getPieceType\";\nimport {printBoard} from \"../printers/printBoard\";\nimport {xyToRf} from \"../coordType/crdCnvrt\";\nimport {ENEMY} from \"../sqrCase/sqrCases\";\nimport {mapListXyToRf} from \"../coordType/mapListXyToRf\";\n\n\nexport function getActualPawnThreats(board, potentialPawnThreats, color) {\n    /*filter the list of potential pawn threats to get list of actual pawn threats**/\n    var potentialPawnThreats =  potentialPawnThreats.filter(sqr => getSqrCase(board, ...sqr, color) === ENEMY && getPieceType(board[xyToRf(...sqr)]) === 'P')\n    return potentialPawnThreats;\n}\n\n// module.exports = getActualPawnThreats;\n\n/** for node.js\nif (require.main === module) {\n\n    let board = sampleBoardDicts['pawn_threat1']\n\n    printBoard(board, \"\\nwhite\", mapListXyToRf(getActualPawnThreats(board, [[5, 4], [7, 4]], 'W'),  [\"f3\"]))\n    printBoard(board, \"\\nblack\", mapListXyToRf(getActualPawnThreats(board, [[2, 4], [4, 4]], 'B')), [\"c5\"])\n\n}\n*/"]},"metadata":{},"sourceType":"module"}