{"ast":null,"code":"import { canKingSideCastle } from \"../../specialMoves/castle/canKingSideCastle\";\nimport { canQueenSideCastle } from \"../../specialMoves/castle/canQueenSideCastle\";\nimport { getCastleTargetSquare } from \"../../specialMoves/castle/getCastleTargetSquare\";\nimport { getKingInitialMoves } from \"../getKingInitialMoves\";\nimport { getKingActualMoves } from \"../getKingActualMoves\";\nexport function king(board, sqr, color, jsonRecords, specialMoves, pieceDefs, idDict) {\n  /**get the range of king at location sqr on board of given color\n  pseudocode\n  ---------\n  get initial moves\n  filter initial moves to get actual moves\n  if canKingSideCastle...\n      ..getKingSideCastle\n  if canQueenSideCastle...\n      ..getQueenSideCastle\n  */\n  var kRange, tSqr;\n  kRange = getKingInitialMoves(board, sqr, color);\n\n  if (canKingSideCastle(board, color, jsonRecords, pieceDefs, idDict)) {\n    tSqr = getCastleTargetSquare(color, 'K');\n    kRange.push(tSqr);\n    specialMoves.addCastle([sqr, tSqr]);\n  }\n\n  if (canQueenSideCastle(board, color, jsonRecords, pieceDefs, idDict)) {\n    tSqr = getCastleTargetSquare(color, 'Q');\n    kRange.push(tSqr);\n    specialMoves.addCastle([sqr, tSqr]);\n  }\n\n  kRange = getKingActualMoves(board, sqr, kRange, color, pieceDefs, idDict);\n  return [kRange, specialMoves];\n} // module.exports = king;\n\n/** for node.js\nif (require.main === module) {\n\n\n    import {getStandardPieceDefs} from \"../../../testObjects/getStandardPieceDefs\";\n    import {getStandardIdDict} from \"../../../testObjects/getStandardIdDict\";\n    import {sampleBoardDicts} from \"../../../testObjects/sampleBoardDicts\";\n    import {printBoard} from \"../../../printers/printBoard\";\n    import {initPawnIds} from \"../../../JsonRecords/initPawnIds\";\n    import {initEmptyRanges} from \"../../../apiHelpers/initEmptyRanges\";\n    import {JsonRecords} from \"../../../JsonRecords/JsonRecords\";\n    import {SpecialMoves} from \"../../specialMoves/SpecialMoves\";    \n    import {dataDict} from \"../../../testObjects/dataDicts/dd1\";\n\n    dataDict = initDDEmptyLists(dataDict)\n\n    var board, records, range, specialMoves;\n    var pieceDefs = initEmptyRanges(getStandardPieceDefs())\n    var idDict = getStandardIdDict()\n\n    //king range test\n    board = sampleBoardDicts[\"king_range_test\"];\n    records = dataDict[\"king_range_test\"][\"json\"]\n    specialMoves = new SpecialMoves()\n    jsonRecords = new JsonRecords(initPawnIds(records, board))\n    var [range, specialMoves] = king(board, [4, 3], \"W\", jsonRecords, specialMoves, pieceDefs, idDict)\n    printBoard(board, \"king_range_test\",  mapListXyToRf(range), [\"d3\"])\n\n    //check example 1\n    specialMoves = new SpecialMoves()\n    board = sampleBoardDicts[\"check_example1\"];\n    records = dataDict[\"check_example1\"][\"json\"]\n    jsonRecords = new JsonRecords(initPawnIds(records, board))\n    var [range, specialMoves] = king(board, [3, 4], \"B\", jsonRecords, specialMoves, pieceDefs, idDict)\n    printBoard(board, \"check_example1\",  mapListXyToRf(range), [\"c4\"])\n\n    //check example 2\n    board = sampleBoardDicts[\"check_example2\"];\n    records = dataDict[\"check_example2\"][\"json\"]\n    specialMoves = new SpecialMoves()\n    jsonRecords = new JsonRecords(initPawnIds(records, board))\n    var [range, specialMoves] = king(board, [1, 6], \"W\", jsonRecords, specialMoves, pieceDefs, idDict)\n    printBoard(board, \"check_example2\",  mapListXyToRf(range), [\"a6\"])\n\n    //check example 3\n    board = sampleBoardDicts[\"check_example3\"];\n    records = dataDict[\"check_example3\"][\"json\"]\n    specialMoves = new SpecialMoves()\n    jsonRecords = new JsonRecords(initPawnIds(records, board))\n    var [range, specialMoves] = king(board, [4, 4], \"W\", jsonRecords, specialMoves, pieceDefs, idDict)\n    printBoard(board, \"check_example3\",  mapListXyToRf(range), [\"d4\"])\n\n    //check example 4\n    board = sampleBoardDicts[\"check_example4\"];\n    records = dataDict[\"check_example4\"][\"json\"]\n    specialMoves = new SpecialMoves()\n    jsonRecords = new JsonRecords(initPawnIds(records, board))\n    var [range, specialMoves] = king(board, [5, 5], \"W\", jsonRecords, specialMoves, pieceDefs, idDict)\n    printBoard(board, \"check_example4\",  mapListXyToRf(range), [\"e5\"])\n\n    //check example 6\n    board = sampleBoardDicts[\"check_example6\"];\n    records = dataDict[\"check_example6\"][\"json\"]\n    specialMoves = new SpecialMoves()\n    jsonRecords = new JsonRecords(initPawnIds(records, board))\n    var [range, specialMoves] = king(board, [6, 1], \"W\", jsonRecords, specialMoves, pieceDefs, idDict)\n    printBoard(board, \"check_example6\",  mapListXyToRf(range), [\"f1\"])\n\n\n}\n*/","map":{"version":3,"sources":["/home/brian/ChessKingsCouncil/app/src/game_logic/ranges/king/top/king.js"],"names":["canKingSideCastle","canQueenSideCastle","getCastleTargetSquare","getKingInitialMoves","getKingActualMoves","king","board","sqr","color","jsonRecords","specialMoves","pieceDefs","idDict","kRange","tSqr","push","addCastle"],"mappings":"AAAA,SAAQA,iBAAR,QAAgC,6CAAhC;AACA,SAAQC,kBAAR,QAAiC,8CAAjC;AACA,SAAQC,qBAAR,QAAoC,iDAApC;AACA,SAAQC,mBAAR,QAAkC,wBAAlC;AACA,SAAQC,kBAAR,QAAiC,uBAAjC;AAGA,OAAO,SAASC,IAAT,CAAcC,KAAd,EAAqBC,GAArB,EAA0BC,KAA1B,EAAiCC,WAAjC,EAA8CC,YAA9C,EAA4DC,SAA5D,EAAuEC,MAAvE,EAA+E;AAClF;;;;;;;;;;AAUA,MAAIC,MAAJ,EAAYC,IAAZ;AACAD,EAAAA,MAAM,GAAGV,mBAAmB,CAACG,KAAD,EAAQC,GAAR,EAAaC,KAAb,CAA5B;;AACA,MAAIR,iBAAiB,CAACM,KAAD,EAAQE,KAAR,EAAeC,WAAf,EAA4BE,SAA5B,EAAuCC,MAAvC,CAArB,EAAqE;AACjEE,IAAAA,IAAI,GAAGZ,qBAAqB,CAACM,KAAD,EAAQ,GAAR,CAA5B;AACAK,IAAAA,MAAM,CAACE,IAAP,CAAYD,IAAZ;AACAJ,IAAAA,YAAY,CAACM,SAAb,CAAuB,CAACT,GAAD,EAAMO,IAAN,CAAvB;AACH;;AACD,MAAIb,kBAAkB,CAACK,KAAD,EAAQE,KAAR,EAAeC,WAAf,EAA4BE,SAA5B,EAAuCC,MAAvC,CAAtB,EAAsE;AAClEE,IAAAA,IAAI,GAAGZ,qBAAqB,CAACM,KAAD,EAAQ,GAAR,CAA5B;AACAK,IAAAA,MAAM,CAACE,IAAP,CAAYD,IAAZ;AACAJ,IAAAA,YAAY,CAACM,SAAb,CAAuB,CAACT,GAAD,EAAMO,IAAN,CAAvB;AACH;;AACDD,EAAAA,MAAM,GAAGT,kBAAkB,CAACE,KAAD,EAAQC,GAAR,EAAaM,MAAb,EAAqBL,KAArB,EAA4BG,SAA5B,EAAuCC,MAAvC,CAA3B;AAEA,SAAO,CAACC,MAAD,EAASH,YAAT,CAAP;AACH,C,CAED;;AAEA","sourcesContent":["import {canKingSideCastle} from \"../../specialMoves/castle/canKingSideCastle\";\nimport {canQueenSideCastle} from \"../../specialMoves/castle/canQueenSideCastle\";\nimport {getCastleTargetSquare} from \"../../specialMoves/castle/getCastleTargetSquare\";\nimport {getKingInitialMoves} from \"../getKingInitialMoves\";\nimport {getKingActualMoves} from \"../getKingActualMoves\";\n\n\nexport function king(board, sqr, color, jsonRecords, specialMoves, pieceDefs, idDict) {\n    /**get the range of king at location sqr on board of given color\n    pseudocode\n    ---------\n    get initial moves\n    filter initial moves to get actual moves\n    if canKingSideCastle...\n        ..getKingSideCastle\n    if canQueenSideCastle...\n        ..getQueenSideCastle\n    */\n    var kRange, tSqr;\n    kRange = getKingInitialMoves(board, sqr, color)\n    if (canKingSideCastle(board, color, jsonRecords, pieceDefs, idDict)) {\n        tSqr = getCastleTargetSquare(color, 'K')\n        kRange.push(tSqr)\n        specialMoves.addCastle([sqr, tSqr])\n    }\n    if (canQueenSideCastle(board, color, jsonRecords, pieceDefs, idDict)) {\n        tSqr = getCastleTargetSquare(color, 'Q')\n        kRange.push(tSqr)\n        specialMoves.addCastle([sqr, tSqr])\n    }\n    kRange = getKingActualMoves(board, sqr, kRange, color, pieceDefs, idDict)\n\n    return [kRange, specialMoves]\n}\n\n// module.exports = king;\n\n/** for node.js\nif (require.main === module) {\n\n\n    import {getStandardPieceDefs} from \"../../../testObjects/getStandardPieceDefs\";\n    import {getStandardIdDict} from \"../../../testObjects/getStandardIdDict\";\n    import {sampleBoardDicts} from \"../../../testObjects/sampleBoardDicts\";\n    import {printBoard} from \"../../../printers/printBoard\";\n    import {initPawnIds} from \"../../../JsonRecords/initPawnIds\";\n    import {initEmptyRanges} from \"../../../apiHelpers/initEmptyRanges\";\n    import {JsonRecords} from \"../../../JsonRecords/JsonRecords\";\n    import {SpecialMoves} from \"../../specialMoves/SpecialMoves\";    \n    import {dataDict} from \"../../../testObjects/dataDicts/dd1\";\n\n    dataDict = initDDEmptyLists(dataDict)\n\n    var board, records, range, specialMoves;\n    var pieceDefs = initEmptyRanges(getStandardPieceDefs())\n    var idDict = getStandardIdDict()\n\n    //king range test\n    board = sampleBoardDicts[\"king_range_test\"];\n    records = dataDict[\"king_range_test\"][\"json\"]\n    specialMoves = new SpecialMoves()\n    jsonRecords = new JsonRecords(initPawnIds(records, board))\n    var [range, specialMoves] = king(board, [4, 3], \"W\", jsonRecords, specialMoves, pieceDefs, idDict)\n    printBoard(board, \"king_range_test\",  mapListXyToRf(range), [\"d3\"])\n\n    //check example 1\n    specialMoves = new SpecialMoves()\n    board = sampleBoardDicts[\"check_example1\"];\n    records = dataDict[\"check_example1\"][\"json\"]\n    jsonRecords = new JsonRecords(initPawnIds(records, board))\n    var [range, specialMoves] = king(board, [3, 4], \"B\", jsonRecords, specialMoves, pieceDefs, idDict)\n    printBoard(board, \"check_example1\",  mapListXyToRf(range), [\"c4\"])\n\n    //check example 2\n    board = sampleBoardDicts[\"check_example2\"];\n    records = dataDict[\"check_example2\"][\"json\"]\n    specialMoves = new SpecialMoves()\n    jsonRecords = new JsonRecords(initPawnIds(records, board))\n    var [range, specialMoves] = king(board, [1, 6], \"W\", jsonRecords, specialMoves, pieceDefs, idDict)\n    printBoard(board, \"check_example2\",  mapListXyToRf(range), [\"a6\"])\n\n    //check example 3\n    board = sampleBoardDicts[\"check_example3\"];\n    records = dataDict[\"check_example3\"][\"json\"]\n    specialMoves = new SpecialMoves()\n    jsonRecords = new JsonRecords(initPawnIds(records, board))\n    var [range, specialMoves] = king(board, [4, 4], \"W\", jsonRecords, specialMoves, pieceDefs, idDict)\n    printBoard(board, \"check_example3\",  mapListXyToRf(range), [\"d4\"])\n\n    //check example 4\n    board = sampleBoardDicts[\"check_example4\"];\n    records = dataDict[\"check_example4\"][\"json\"]\n    specialMoves = new SpecialMoves()\n    jsonRecords = new JsonRecords(initPawnIds(records, board))\n    var [range, specialMoves] = king(board, [5, 5], \"W\", jsonRecords, specialMoves, pieceDefs, idDict)\n    printBoard(board, \"check_example4\",  mapListXyToRf(range), [\"e5\"])\n\n    //check example 6\n    board = sampleBoardDicts[\"check_example6\"];\n    records = dataDict[\"check_example6\"][\"json\"]\n    specialMoves = new SpecialMoves()\n    jsonRecords = new JsonRecords(initPawnIds(records, board))\n    var [range, specialMoves] = king(board, [6, 1], \"W\", jsonRecords, specialMoves, pieceDefs, idDict)\n    printBoard(board, \"check_example6\",  mapListXyToRf(range), [\"f1\"])\n\n\n}\n*/\n"]},"metadata":{},"sourceType":"module"}