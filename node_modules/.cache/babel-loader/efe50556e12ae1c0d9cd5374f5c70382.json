{"ast":null,"code":"var _jsxFileName = \"/home/brian/ChessKingsCouncil/app/src/Components/CreatePiece/Icon/Upload/UploadModal.jsx\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Dropzone from \"react-dropzone\";\nimport ReactCrop from \"react-image-crop\";\nimport \"./custom-image-crop.css\";\nimport \"./UploadModal.css\";\nimport { base64StringtoFile, downloadBase64File, extractImageFileExtensionFromBase64, image64toCanvasRef } from \"./ReusableUtils\";\nconst imageMaxSize = 1000000000; // bytes\n\nconst acceptedFileTypes = \"image/x-png, image/png, image/jpg, image/jpeg, image/gif\";\nconst acceptedFileTypesArray = acceptedFileTypes.split(\",\").map(item => {\n  return item.trim();\n});\n\nclass UploadModal extends Component {\n  constructor(props) {\n    super(props);\n\n    this.verifyFile = files => {\n      if (files && files.length > 0) {\n        const currentFile = files[0];\n        const currentFileType = currentFile.type;\n        const currentFileSize = currentFile.size;\n\n        if (currentFileSize > imageMaxSize) {\n          alert(\"This file is not allowed. \" + currentFileSize + \" bytes is too large\");\n          return false;\n        }\n\n        if (!acceptedFileTypesArray.includes(currentFileType)) {\n          alert(\"This file is not allowed. Only images are allowed.\");\n          return false;\n        }\n\n        return true;\n      }\n    };\n\n    this.handleOnDrop = (files, rejectedFiles) => {\n      if (rejectedFiles && rejectedFiles.length > 0) {\n        this.verifyFile(rejectedFiles);\n      }\n\n      if (files && files.length > 0) {\n        const isVerified = this.verifyFile(files);\n\n        if (isVerified) {\n          // imageBase64Data\n          const currentFile = files[0];\n          const myFileItemReader = new FileReader();\n          myFileItemReader.addEventListener(\"load\", () => {\n            // console.log(myFileItemReader.result)\n            const myResult = myFileItemReader.result;\n            this.setState({\n              imgSrc: myResult,\n              imgSrcExt: extractImageFileExtensionFromBase64(myResult)\n            });\n          }, false);\n          myFileItemReader.readAsDataURL(currentFile);\n        }\n      }\n    };\n\n    this.handleImageLoaded = image => {//console.log(image)\n    };\n\n    this.handleOnCropChange = crop => {\n      this.setState({\n        crop: crop\n      });\n    };\n\n    this.handleOnCropComplete = (crop, pixelCrop) => {\n      //console.log(crop, pixelCrop)\n      const canvasRef = this.imagePreviewCanvasRef.current;\n      const {\n        imgSrc\n      } = this.state;\n      image64toCanvasRef(canvasRef, imgSrc, pixelCrop);\n    };\n\n    this.handleDownloadClick = event => {\n      event.preventDefault();\n      const {\n        imgSrc\n      } = this.state;\n\n      if (imgSrc) {\n        const canvasRef = this.imagePreviewCanvasRef.current;\n        const {\n          imgSrcExt\n        } = this.state;\n        const imageData64 = canvasRef.toDataURL(\"image/\" + imgSrcExt);\n        const myFilename = \"previewFile.\" + imgSrcExt; // file to be uploaded\n\n        const myNewCroppedFile = base64StringtoFile(imageData64, myFilename);\n        console.log(myNewCroppedFile); // download file\n\n        downloadBase64File(imageData64, myFilename);\n        this.handleClearToDefault();\n      }\n    };\n\n    this.handleClearToDefault = event => {\n      if (event) event.preventDefault();\n      const canvas = this.imagePreviewCanvasRef.current;\n      const ctx = canvas.getContext(\"2d\");\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      this.setState({\n        imgSrc: null,\n        imgSrcExt: null,\n        crop: {\n          aspect: 1 / 1\n        }\n      });\n      this.fileInputRef.current.value = null;\n    };\n\n    this.handleFileSelect = event => {\n      // console.log(event)\n      const files = event.target.files;\n\n      if (files && files.length > 0) {\n        const isVerified = this.verifyFile(files);\n\n        if (isVerified) {\n          // imageBase64Data\n          const currentFile = files[0];\n          const myFileItemReader = new FileReader();\n          myFileItemReader.addEventListener(\"load\", () => {\n            // console.log(myFileItemReader.result)\n            const myResult = myFileItemReader.result;\n            this.setState({\n              imgSrc: myResult,\n              imgSrcExt: extractImageFileExtensionFromBase64(myResult)\n            });\n          }, false);\n          myFileItemReader.readAsDataURL(currentFile);\n        }\n      }\n    };\n\n    this.imagePreviewCanvasRef = React.createRef();\n    this.fileInputRef = React.createRef();\n    this.state = {\n      imgSrc: null,\n      imgSrcExt: null,\n      crop: {\n        aspect: 1 / 1\n      }\n    };\n  }\n\n  render() {\n    const {\n      imgSrc\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 13\n      }\n    }, imgSrc !== null ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crop-icon-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crop-icon-grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"original-img\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(ReactCrop, {\n      src: imgSrc,\n      crop: this.state.crop,\n      onImageLoaded: this.handleImageLoaded,\n      onComplete: this.handleOnCropComplete,\n      onChange: this.handleOnCropChange,\n      style: {\n        width: 500\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cropped-img\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: this.imagePreviewCanvasRef,\n      style: {\n        width: 500,\n        height: 500\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 33\n      }\n    }))), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"choose-icon-file\",\n      className: \"choose-file-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 25\n      }\n    }, \"Upload\"), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"choose-icon-file\",\n      type: \"file\",\n      multiple: false,\n      style: {\n        display: \"none\"\n      },\n      ref: this.fileInputRef,\n      accept: acceptedFileTypes,\n      onChange: this.handleFileSelect,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"download-file-button\",\n      onClick: this.handleDownloadClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 25\n      }\n    }, \"Download\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"clear-file-button\",\n      onClick: this.handleClearToDefault,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 25\n      }\n    }, \"Clear\")) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"upload-icon-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 25\n      }\n    }, \"Choose Piece Icon\"), /*#__PURE__*/React.createElement(Dropzone, {\n      onDrop: this.handleOnDrop,\n      accept: acceptedFileTypes,\n      multiple: false,\n      maxSize: imageMaxSize,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 25\n      }\n    }, \"click to upload\")));\n  }\n\n}\n\nexport let test = () => ReactDOM.render( /*#__PURE__*/React.createElement(UploadModal, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 41\n  }\n}), document.getElementById(\"root\"));\nexport default UploadModal;","map":{"version":3,"sources":["/home/brian/ChessKingsCouncil/app/src/Components/CreatePiece/Icon/Upload/UploadModal.jsx"],"names":["React","Component","ReactDOM","Dropzone","ReactCrop","base64StringtoFile","downloadBase64File","extractImageFileExtensionFromBase64","image64toCanvasRef","imageMaxSize","acceptedFileTypes","acceptedFileTypesArray","split","map","item","trim","UploadModal","constructor","props","verifyFile","files","length","currentFile","currentFileType","type","currentFileSize","size","alert","includes","handleOnDrop","rejectedFiles","isVerified","myFileItemReader","FileReader","addEventListener","myResult","result","setState","imgSrc","imgSrcExt","readAsDataURL","handleImageLoaded","image","handleOnCropChange","crop","handleOnCropComplete","pixelCrop","canvasRef","imagePreviewCanvasRef","current","state","handleDownloadClick","event","preventDefault","imageData64","toDataURL","myFilename","myNewCroppedFile","console","log","handleClearToDefault","canvas","ctx","getContext","clearRect","width","height","aspect","fileInputRef","value","handleFileSelect","target","createRef","render","display","test","document","getElementById"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Dropzone from \"react-dropzone\";\nimport ReactCrop from \"react-image-crop\";\nimport \"./custom-image-crop.css\";\nimport \"./UploadModal.css\";\n\nimport {\n    base64StringtoFile,\n    downloadBase64File,\n    extractImageFileExtensionFromBase64,\n    image64toCanvasRef,\n} from \"./ReusableUtils\";\n\nconst imageMaxSize = 1000000000; // bytes\nconst acceptedFileTypes = \"image/x-png, image/png, image/jpg, image/jpeg, image/gif\";\nconst acceptedFileTypesArray = acceptedFileTypes.split(\",\").map((item) => {\n    return item.trim();\n});\n\nclass UploadModal extends Component {\n    constructor(props) {\n        super(props);\n        this.imagePreviewCanvasRef = React.createRef();\n        this.fileInputRef = React.createRef();\n        this.state = {\n            imgSrc: null,\n            imgSrcExt: null,\n            crop: {\n                aspect: 1 / 1,\n            },\n        };\n    }\n\n    verifyFile = (files) => {\n        if (files && files.length > 0) {\n            const currentFile = files[0];\n            const currentFileType = currentFile.type;\n            const currentFileSize = currentFile.size;\n            if (currentFileSize > imageMaxSize) {\n                alert(\"This file is not allowed. \" + currentFileSize + \" bytes is too large\");\n                return false;\n            }\n            if (!acceptedFileTypesArray.includes(currentFileType)) {\n                alert(\"This file is not allowed. Only images are allowed.\");\n                return false;\n            }\n            return true;\n        }\n    };\n\n    handleOnDrop = (files, rejectedFiles) => {\n        if (rejectedFiles && rejectedFiles.length > 0) {\n            this.verifyFile(rejectedFiles);\n        }\n\n        if (files && files.length > 0) {\n            const isVerified = this.verifyFile(files);\n            if (isVerified) {\n                // imageBase64Data\n                const currentFile = files[0];\n                const myFileItemReader = new FileReader();\n                myFileItemReader.addEventListener(\n                    \"load\",\n                    () => {\n                        // console.log(myFileItemReader.result)\n                        const myResult = myFileItemReader.result;\n                        this.setState({\n                            imgSrc: myResult,\n                            imgSrcExt: extractImageFileExtensionFromBase64(myResult),\n                        });\n                    },\n                    false\n                );\n\n                myFileItemReader.readAsDataURL(currentFile);\n            }\n        }\n    };\n\n    handleImageLoaded = (image) => {\n        //console.log(image)\n    };\n    handleOnCropChange = (crop) => {\n        this.setState({ crop: crop });\n    };\n    handleOnCropComplete = (crop, pixelCrop) => {\n        //console.log(crop, pixelCrop)\n\n        const canvasRef = this.imagePreviewCanvasRef.current;\n        const { imgSrc } = this.state;\n        image64toCanvasRef(canvasRef, imgSrc, pixelCrop);\n    };\n    handleDownloadClick = (event) => {\n        event.preventDefault();\n        const { imgSrc } = this.state;\n        if (imgSrc) {\n            const canvasRef = this.imagePreviewCanvasRef.current;\n\n            const { imgSrcExt } = this.state;\n            const imageData64 = canvasRef.toDataURL(\"image/\" + imgSrcExt);\n\n            const myFilename = \"previewFile.\" + imgSrcExt;\n\n            // file to be uploaded\n            const myNewCroppedFile = base64StringtoFile(imageData64, myFilename);\n            console.log(myNewCroppedFile);\n            // download file\n            downloadBase64File(imageData64, myFilename);\n            this.handleClearToDefault();\n        }\n    };\n\n    handleClearToDefault = (event) => {\n        if (event) event.preventDefault();\n        const canvas = this.imagePreviewCanvasRef.current;\n        const ctx = canvas.getContext(\"2d\");\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n        this.setState({\n            imgSrc: null,\n            imgSrcExt: null,\n            crop: {\n                aspect: 1 / 1,\n            },\n        });\n        this.fileInputRef.current.value = null;\n    };\n\n    handleFileSelect = (event) => {\n        // console.log(event)\n        const files = event.target.files;\n        if (files && files.length > 0) {\n            const isVerified = this.verifyFile(files);\n            if (isVerified) {\n                // imageBase64Data\n                const currentFile = files[0];\n                const myFileItemReader = new FileReader();\n                myFileItemReader.addEventListener(\n                    \"load\",\n                    () => {\n                        // console.log(myFileItemReader.result)\n                        const myResult = myFileItemReader.result;\n                        this.setState({\n                            imgSrc: myResult,\n                            imgSrcExt: extractImageFileExtensionFromBase64(myResult),\n                        });\n                    },\n                    false\n                );\n\n                myFileItemReader.readAsDataURL(currentFile);\n            }\n        }\n    };\n    render() {\n        const { imgSrc } = this.state;\n        return (\n            <div>\n                {imgSrc !== null ? (\n                    <div className=\"crop-icon-window\">\n                        <div className=\"crop-icon-grid\">\n                            <div className=\"original-img\">\n                                <ReactCrop\n                                    src={imgSrc}\n                                    crop={this.state.crop}\n                                    onImageLoaded={this.handleImageLoaded}\n                                    onComplete={this.handleOnCropComplete}\n                                    onChange={this.handleOnCropChange}\n                                    style={{width: 500}}\n                                />\n                            </div>\n                            <div className=\"cropped-img\">\n                                <canvas ref={this.imagePreviewCanvasRef} style={{width: 500, height: 500}}></canvas>\n                            </div>\n                        </div>\n                        <label htmlFor=\"choose-icon-file\" className=\"choose-file-button\">Upload</label>\n                        <input id=\"choose-icon-file\"\n                               type=\"file\"\n                               multiple={false}\n                               style={{display: \"none\"}}\n                               ref={this.fileInputRef}\n                               accept={acceptedFileTypes}\n                               onChange={this.handleFileSelect}\n                        />\n                        <div className=\"download-file-button\" onClick={this.handleDownloadClick}>Download</div>\n                        <div className=\"clear-file-button\" onClick={this.handleClearToDefault}>Clear</div>\n                    </div>\n                ) : (\n                    <div className=\"upload-icon-window\">\n                        <h1>Choose Piece Icon</h1>\n                        <Dropzone\n                            onDrop={this.handleOnDrop}\n                            accept={acceptedFileTypes}\n                            multiple={false}\n                            maxSize={imageMaxSize}\n                        >\n                            click to upload\n                        </Dropzone>\n                    </div>\n\n                )}\n            </div>\n        );\n    }\n}\n\nexport let test = () => ReactDOM.render(<UploadModal />, document.getElementById(\"root\"));\n\nexport default UploadModal;\n"]},"metadata":{},"sourceType":"module"}