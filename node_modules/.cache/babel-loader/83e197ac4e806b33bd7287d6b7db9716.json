{"ast":null,"code":"import { getUnicodePiece } from \"../printers/getUnicodePiece\";\nimport { checkerboard } from \"../printers/checkerBoard\";\nimport { isPiece } from \"../pieceType/isPiece\";\nimport { xyToRf } from \"../coordType/crdCnvrt\";\nimport colors from 'colors';\nexport function printBoard(board, heading, ...highlights) {\n  /*print increasing.includes(boardDict) order of x, decreasing order of y (how 2d board normally displayed)\n  the following are  \n  highlights[0] will be printed as red\n   higlights[1] will be brinted as green\n   highlights[2] will be printed as blue\n   highlights[3] will be printed as yellow\n  **/\n  if (heading) console.log(heading.red);\n  var char, row;\n\n  for (var y = 8; y > 0; y--) {\n    row = y.toString();\n\n    for (let x = 1; x < 9; x++) {\n      if (isPiece(board[xyToRf(x, y)])) {\n        char = getUnicodePiece(board[xyToRf(x, y)]);\n      } else {\n        char = checkerboard[xyToRf(x, y)];\n      }\n\n      if (highlights[0] && highlights[0].includes(xyToRf(x, y))) {\n        row = row + \" \" + char.red;\n      } else if (highlights[1] && highlights[1].includes(xyToRf(x, y))) {\n        row = row + \" \" + char.green;\n      } else if (highlights[2] && highlights[2].includes(xyToRf(x, y))) {\n        row = row + \" \" + char.blue;\n      } else if (highlights[3] && highlights[3].includes(xyToRf(x, y))) {\n        row = row + \" \" + char.yellow;\n      } else {\n        row = row + \" \" + char;\n      }\n    }\n\n    console.log(row);\n  }\n\n  console.log(\"  a b c d e f g h\");\n} // module.exports = printBoard;\n\n/** for node.js\nif (require.main === module) {\n\n    printBoard(\n        {\"a1\": 'WR1', \"a2\": 'WP1', \"a3\": '#', \"a4\": '#', \"a5\": '#', \"a6\": '#', \"a7\": 'BP1', \"a8\": 'BR1',\n         \"b1\": 'WN1', \"b2\": 'WP2', \"b3\": '#', \"b4\": '#', \"b5\": '#', \"b6\": '#', \"b7\": 'BP2', \"b8\": 'BN1',\n         \"c1\": 'WB1', \"c2\": 'WP3', \"c3\": '#', \"c4\": '#', \"c5\": '#', \"c6\": '#', \"c7\": 'BP3', \"c8\": 'BB1',\n         \"d1\": 'WQ1', \"d2\": 'WP4', \"d3\": '#', \"d4\": '#', \"d5\": '#', \"d6\": '#', \"d7\": 'BP4', \"d8\": 'BQ1',\n         \"e1\": 'WK1', \"e2\": 'WP5', \"e3\": '#', \"e4\": '#', \"e5\": '#', \"e6\": '#', \"e7\": 'BP5', \"e8\": 'BK1',\n         \"f1\": 'WB2', \"f2\": 'WP6', \"f3\": '#', \"f4\": '#', \"f5\": '#', \"f6\": '#', \"f7\": 'BP6', \"f8\": 'BB2',\n         \"g1\": 'WN2', \"g2\": 'WP7', \"g3\": '#', \"g4\": '#', \"g5\": '#', \"g6\": '#', \"g7\": 'BP7', \"g8\": 'BN2',\n         \"h1\": 'WR2', \"h2\": 'WP8', \"h3\": '#', \"h4\": '#', \"h5\": '#', \"h6\": '#', \"h7\": 'BP8',\n         \"h8\": 'BR2'},  \"board 1\", [\"d2\", \"e2\"])\n    printBoard(\n        {\"a8\": '#', \"b8\": '#', \"c8\": '#', \"d8\": '#', \"e8\": '#', \"f8\": 'BR3', \"g8\": 'BK1', \"h8\": '#',\n         \"a7\": '#', \"b7\": '#', \"c7\": '#', \"d7\": 'BN1', \"e7\": 'BP1', \"f7\": '#', \"g7\": 'BP2', \"h7\": '#',\n         \"a6\": 'BR2', \"b6\": '#', \"c6\": '#', \"d6\": '#', \"e6\": '#', \"f6\": 'WK1', \"g6\": '#', \"h6\": '#',\n         \"a5\": '#', \"b5\": '#', \"c5\": '#', \"d5\": '#', \"e5\": '#', \"f5\": '#', \"g5\": '#', \"h5\": '#',\n         \"a4\": '#', \"b4\": '#', \"c4\": '#', \"d4\": '#', \"e4\": '#', \"f4\": '#', \"g4\": '#', \"h4\": 'BB1',\n         \"a3\": '#', \"b3\": '#', \"c3\": '#', \"d3\": '#', \"e3\": '#', \"f3\": '#', \"g3\": '#', \"h3\": '#',\n         \"a2\": '#', \"b2\": '#', \"c2\": '#', \"d2\": '#', \"e2\": '#', \"f2\": '#', \"g2\": '#', \"h2\": '#',\n         \"a1\": 'BQ1', \"b1\": '#', \"c1\": '#', \"d1\": '#', \"e1\": '#', \"f1\": 'BR1', \"g1\": '#', \"h1\": '#'}, \"board 1\", [\"e7\"])\n\n}\n*/","map":{"version":3,"sources":["/home/brian/ChessKingsCouncil/app/src/game_logic/printers/printBoard.js"],"names":["getUnicodePiece","checkerboard","isPiece","xyToRf","colors","printBoard","board","heading","highlights","console","log","red","char","row","y","toString","x","includes","green","blue","yellow"],"mappings":"AAAA,SAAQA,eAAR,QAA8B,6BAA9B;AACA,SAAQC,YAAR,QAA2B,0BAA3B;AACA,SAAQC,OAAR,QAAsB,sBAAtB;AACA,SAAQC,MAAR,QAAqB,uBAArB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAGA,OAAO,SAASC,UAAT,CAAoBC,KAApB,EAA2BC,OAA3B,EAAoC,GAAGC,UAAvC,EAAmD;AACtD;;;;;;;AAOA,MAAID,OAAJ,EACIE,OAAO,CAACC,GAAR,CAAYH,OAAO,CAACI,GAApB;AACJ,MAAIC,IAAJ,EAAUC,GAAV;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxBD,IAAAA,GAAG,GAAGC,CAAC,CAACC,QAAF,EAAN;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzB,UAAId,OAAO,CAACI,KAAK,CAACH,MAAM,CAACa,CAAD,EAAIF,CAAJ,CAAP,CAAN,CAAX,EAAkC;AAC9BF,QAAAA,IAAI,GAAGZ,eAAe,CAACM,KAAK,CAACH,MAAM,CAACa,CAAD,EAAIF,CAAJ,CAAP,CAAN,CAAtB;AACH,OAFD,MAGK;AACDF,QAAAA,IAAI,GAAGX,YAAY,CAACE,MAAM,CAACa,CAAD,EAAIF,CAAJ,CAAP,CAAnB;AACH;;AACD,UAAIN,UAAU,CAAC,CAAD,CAAV,IAAiBA,UAAU,CAAC,CAAD,CAAV,CAAcS,QAAd,CAAuBd,MAAM,CAACa,CAAD,EAAIF,CAAJ,CAA7B,CAArB,EAA2D;AACvDD,QAAAA,GAAG,GAAGA,GAAG,GAAG,GAAN,GAAYD,IAAI,CAACD,GAAvB;AACH,OAFD,MAGK,IAAIH,UAAU,CAAC,CAAD,CAAV,IAAiBA,UAAU,CAAC,CAAD,CAAV,CAAcS,QAAd,CAAuBd,MAAM,CAACa,CAAD,EAAIF,CAAJ,CAA7B,CAArB,EAA2D;AAC5DD,QAAAA,GAAG,GAAGA,GAAG,GAAG,GAAN,GAAYD,IAAI,CAACM,KAAvB;AACH,OAFI,MAGA,IAAIV,UAAU,CAAC,CAAD,CAAV,IAAiBA,UAAU,CAAC,CAAD,CAAV,CAAcS,QAAd,CAAuBd,MAAM,CAACa,CAAD,EAAIF,CAAJ,CAA7B,CAArB,EAA2D;AAC5DD,QAAAA,GAAG,GAAGA,GAAG,GAAG,GAAN,GAAYD,IAAI,CAACO,IAAvB;AACH,OAFI,MAGA,IAAIX,UAAU,CAAC,CAAD,CAAV,IAAiBA,UAAU,CAAC,CAAD,CAAV,CAAcS,QAAd,CAAuBd,MAAM,CAACa,CAAD,EAAIF,CAAJ,CAA7B,CAArB,EAA2D;AAC5DD,QAAAA,GAAG,GAAGA,GAAG,GAAG,GAAN,GAAYD,IAAI,CAACQ,MAAvB;AACH,OAFI,MAGA;AACDP,QAAAA,GAAG,GAAGA,GAAG,GAAG,GAAN,GAAYD,IAAlB;AACH;AACJ;;AACDH,IAAAA,OAAO,CAACC,GAAR,CAAYG,GAAZ;AACH;;AACDJ,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACH,C,CAED;;AAEA","sourcesContent":["import {getUnicodePiece} from \"../printers/getUnicodePiece\";\nimport {checkerboard} from \"../printers/checkerBoard\";\nimport {isPiece} from \"../pieceType/isPiece\";\nimport {xyToRf} from \"../coordType/crdCnvrt\";\nimport colors from 'colors';\n\n\nexport function printBoard(board, heading, ...highlights) {\n    /*print increasing.includes(boardDict) order of x, decreasing order of y (how 2d board normally displayed)\n    the following are  \n    highlights[0] will be printed as red\n     higlights[1] will be brinted as green\n     highlights[2] will be printed as blue\n     highlights[3] will be printed as yellow\n    **/\n    if (heading)\n        console.log(heading.red)\n    var char, row;\n    for (var y = 8; y > 0; y--) {\n        row = y.toString();\n        for (let x = 1; x < 9 ; x++) {\n            if (isPiece(board[xyToRf(x, y)])) {\n                char = getUnicodePiece(board[xyToRf(x, y)])\n            }\n            else {\n                char = checkerboard[xyToRf(x, y)]\n            }\n            if (highlights[0] && highlights[0].includes(xyToRf(x, y))) {\n                row = row + \" \" + char.red;\n            }\n            else if (highlights[1] && highlights[1].includes(xyToRf(x, y))) {\n                row = row + \" \" + char.green;\n            }\n            else if (highlights[2] && highlights[2].includes(xyToRf(x, y))) {\n                row = row + \" \" + char.blue;\n            }\n            else if (highlights[3] && highlights[3].includes(xyToRf(x, y))) {\n                row = row + \" \" + char.yellow;\n            }\n            else {\n                row = row + \" \" + char;\n            }\n        }\n        console.log(row)\n    }\n    console.log(\"  a b c d e f g h\")\n}\n\n// module.exports = printBoard;\n\n/** for node.js\nif (require.main === module) {\n\n    printBoard(\n        {\"a1\": 'WR1', \"a2\": 'WP1', \"a3\": '#', \"a4\": '#', \"a5\": '#', \"a6\": '#', \"a7\": 'BP1', \"a8\": 'BR1',\n         \"b1\": 'WN1', \"b2\": 'WP2', \"b3\": '#', \"b4\": '#', \"b5\": '#', \"b6\": '#', \"b7\": 'BP2', \"b8\": 'BN1',\n         \"c1\": 'WB1', \"c2\": 'WP3', \"c3\": '#', \"c4\": '#', \"c5\": '#', \"c6\": '#', \"c7\": 'BP3', \"c8\": 'BB1',\n         \"d1\": 'WQ1', \"d2\": 'WP4', \"d3\": '#', \"d4\": '#', \"d5\": '#', \"d6\": '#', \"d7\": 'BP4', \"d8\": 'BQ1',\n         \"e1\": 'WK1', \"e2\": 'WP5', \"e3\": '#', \"e4\": '#', \"e5\": '#', \"e6\": '#', \"e7\": 'BP5', \"e8\": 'BK1',\n         \"f1\": 'WB2', \"f2\": 'WP6', \"f3\": '#', \"f4\": '#', \"f5\": '#', \"f6\": '#', \"f7\": 'BP6', \"f8\": 'BB2',\n         \"g1\": 'WN2', \"g2\": 'WP7', \"g3\": '#', \"g4\": '#', \"g5\": '#', \"g6\": '#', \"g7\": 'BP7', \"g8\": 'BN2',\n         \"h1\": 'WR2', \"h2\": 'WP8', \"h3\": '#', \"h4\": '#', \"h5\": '#', \"h6\": '#', \"h7\": 'BP8',\n         \"h8\": 'BR2'},  \"board 1\", [\"d2\", \"e2\"])\n    printBoard(\n        {\"a8\": '#', \"b8\": '#', \"c8\": '#', \"d8\": '#', \"e8\": '#', \"f8\": 'BR3', \"g8\": 'BK1', \"h8\": '#',\n         \"a7\": '#', \"b7\": '#', \"c7\": '#', \"d7\": 'BN1', \"e7\": 'BP1', \"f7\": '#', \"g7\": 'BP2', \"h7\": '#',\n         \"a6\": 'BR2', \"b6\": '#', \"c6\": '#', \"d6\": '#', \"e6\": '#', \"f6\": 'WK1', \"g6\": '#', \"h6\": '#',\n         \"a5\": '#', \"b5\": '#', \"c5\": '#', \"d5\": '#', \"e5\": '#', \"f5\": '#', \"g5\": '#', \"h5\": '#',\n         \"a4\": '#', \"b4\": '#', \"c4\": '#', \"d4\": '#', \"e4\": '#', \"f4\": '#', \"g4\": '#', \"h4\": 'BB1',\n         \"a3\": '#', \"b3\": '#', \"c3\": '#', \"d3\": '#', \"e3\": '#', \"f3\": '#', \"g3\": '#', \"h3\": '#',\n         \"a2\": '#', \"b2\": '#', \"c2\": '#', \"d2\": '#', \"e2\": '#', \"f2\": '#', \"g2\": '#', \"h2\": '#',\n         \"a1\": 'BQ1', \"b1\": '#', \"c1\": '#', \"d1\": '#', \"e1\": '#', \"f1\": 'BR1', \"g1\": '#', \"h1\": '#'}, \"board 1\", [\"e7\"])\n\n}\n*/"]},"metadata":{},"sourceType":"module"}