{"ast":null,"code":"import { stepFuncDict } from \"../../helpers/stepFuncs\";\nimport { getPath } from \"../../ranges/paths/getPath\";\nexport function getPaths(funcNames, board, sqr, color) {\n  /* **/\n  var paths = [];\n  var stepFunc;\n\n  for (var funcName of funcNames) {\n    stepFunc = stepFuncDict[funcName];\n    paths.push(...getPath(sqr, board, color, stepFunc));\n  }\n\n  return paths;\n} // module.exports = getPaths;\n\n/** for node.js\nif (require.main === module) {\n    \n    import {sampleBoardDicts} from \"../../testObjects/sampleBoardDicts\";\n    import {printBoard} from \"../../printers/printBoard\";\n\n    var board, paths;\n\n    var stepFuncNames =\n        [\"step_1sqr90d\",\n         \"step_1sqr45d\",\n         \"step_1sqr0d\",\n         \"step_1sqr315d\",\n         \"step_1sqr270d\",\n         \"step_1sqr225d\",\n         \"step_1sqr180d\",\n         \"step_1sqr135d\"]\n    board = sampleBoardDicts[\"rangesTest\"];\n    paths = getPaths(stepFuncNames, board, [4, 3], 'W')\n    printBoard(board, \"white\", mapListXyToRf(paths), null, [\"d3\"])\n    paths = getPaths(stepFuncNames, board, [4, 5], 'B')\n    printBoard(board, \"black\", mapListXyToRf(paths), null, [\"d5\"])\n\n}\n*/","map":{"version":3,"sources":["/home/brian/ChessKingsCouncil/app/src/game_logic/ranges/paths/getPaths.js"],"names":["stepFuncDict","getPath","getPaths","funcNames","board","sqr","color","paths","stepFunc","funcName","push"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,yBAA3B;AACA,SAAQC,OAAR,QAAsB,4BAAtB;AAIA,OAAO,SAASC,QAAT,CAAkBC,SAAlB,EAA6BC,KAA7B,EAAoCC,GAApC,EAAyCC,KAAzC,EAAgD;AACnD;AACA,MAAIC,KAAK,GAAG,EAAZ;AACA,MAAIC,QAAJ;;AACA,OAAK,IAAIC,QAAT,IAAqBN,SAArB,EAAgC;AAC5BK,IAAAA,QAAQ,GAAGR,YAAY,CAACS,QAAD,CAAvB;AACAF,IAAAA,KAAK,CAACG,IAAN,CAAW,GAAGT,OAAO,CAACI,GAAD,EAAMD,KAAN,EAAaE,KAAb,EAAoBE,QAApB,CAArB;AACH;;AACD,SAAOD,KAAP;AACH,C,CAED;;AAEA","sourcesContent":["import {stepFuncDict} from \"../../helpers/stepFuncs\";\nimport {getPath} from \"../../ranges/paths/getPath\";\n\n\n\nexport function getPaths(funcNames, board, sqr, color) {\n    /* **/\n    var paths = [];\n    var stepFunc;\n    for (var funcName of funcNames) {\n        stepFunc = stepFuncDict[funcName];\n        paths.push(...getPath(sqr, board, color, stepFunc));\n    }\n    return paths;\n}\n\n// module.exports = getPaths;\n\n/** for node.js\nif (require.main === module) {\n    \n    import {sampleBoardDicts} from \"../../testObjects/sampleBoardDicts\";\n    import {printBoard} from \"../../printers/printBoard\";\n\n    var board, paths;\n\n    var stepFuncNames =\n        [\"step_1sqr90d\",\n         \"step_1sqr45d\",\n         \"step_1sqr0d\",\n         \"step_1sqr315d\",\n         \"step_1sqr270d\",\n         \"step_1sqr225d\",\n         \"step_1sqr180d\",\n         \"step_1sqr135d\"]\n    board = sampleBoardDicts[\"rangesTest\"];\n    paths = getPaths(stepFuncNames, board, [4, 3], 'W')\n    printBoard(board, \"white\", mapListXyToRf(paths), null, [\"d3\"])\n    paths = getPaths(stepFuncNames, board, [4, 5], 'B')\n    printBoard(board, \"black\", mapListXyToRf(paths), null, [\"d5\"])\n\n}\n*/"]},"metadata":{},"sourceType":"module"}