{"ast":null,"code":"import { noRanges } from \"./noRanges\";\nimport { OVER, IN_PROGRESS } from \"./gStatusTypes\";\nimport { getPieceTypeInstances } from \"../../pieceType/getPieceTypeInstances\";\nexport class GameStatus {\n  /**\n   * \n   * @param {*} board : game board object.\n   * @param {*} ranges : ranges of pieces object.\n   * @param {*} enemyColor : opposite color of play whos turn it is, used to declare winner.\n   * @param {*} npck : shorthand for Number of Pieces Checking the King of player who's turn it is now.\n   * \n   * the status of the game: OVER or IN_PROGRESS\n   * the winner of the game: 'W', 'B', or '-' (neither)\n   * the condition of the king of pla: 'check', 'checkmate', 'stalemate', or 'safe'\n   * \n   */\n  constructor(status) {\n    this.status = status['status'];\n    this.condition = status['condition'];\n    this.winner = status['winner'];\n  }\n\n  update(board, ranges, enemyColor, npck) {\n    /**\n     update the status of the game: OVER || IN_PROGRESS\n     update the winner of the game: 'w', 'b', || '-' (neither)\n     udpate the condition of the enemy king: 'check', 'checkmate', 'stalemate', || 'safe'\n     :param board: dict, game board\n     :param npck: int, number of pieces checking the king\n     :param ranges: dict, ranges of pieces of color\n     :param enemyColor: str, color of king\n    */\n    if (this.noRanges(ranges)) {\n      if (npck > 0) {\n        this.condition = 'checkmate';\n        this.status = OVER;\n        this.winner = enemyColor;\n      } else {\n        this.condition = 'stalemate';\n        this.status = OVER;\n        this.winner = '-';\n      }\n\n      return;\n    }\n\n    var pieceTypeInstances = getPieceTypeInstances(board);\n\n    if (pieceTypeInstances.toString() === ['K', 'K'].toString()) {\n      this.condition = 'stalemate';\n      this.status = OVER;\n      this.winner = '-';\n    } else if (npck > 0) {\n      this.condition = 'check';\n      this.status = IN_PROGRESS;\n      this.winner = '-';\n    } else {\n      this.condition = '';\n      this.status = IN_PROGRESS;\n      this.winner = '-';\n    }\n  }\n\n  updateByObj(status) {\n    /**update the game status directly by passing a status object */\n    this.status = status['status'];\n    this.condition = status['condition'];\n    this.winner = status['winner'];\n  }\n\n  getStatus() {\n    return {\n      'condition': this.condition,\n      'status': this.status,\n      'winner': this.winner\n    };\n  }\n\n  hasResigned() {\n    if (this.condition === \"resigned\") return true;else return false;\n  }\n\n  noRanges(ranges) {\n    for (var range of Object.values(ranges)) {\n      if (range.length > 0) return false;\n    }\n\n    return true;\n  }\n\n}","map":{"version":3,"sources":["/home/brian/ChessKingsCouncil/app/src/game_logic/fenParser/GameStatus/GameStatus.js"],"names":["noRanges","OVER","IN_PROGRESS","getPieceTypeInstances","GameStatus","constructor","status","condition","winner","update","board","ranges","enemyColor","npck","pieceTypeInstances","toString","updateByObj","getStatus","hasResigned","range","Object","values","length"],"mappings":"AAAA,SAAQA,QAAR,QAAuB,YAAvB;AACA,SAAQC,IAAR,EAAcC,WAAd,QAAgC,gBAAhC;AACA,SAAQC,qBAAR,QAAoC,uCAApC;AAGA,OAAO,MAAMC,UAAN,CAAiB;AACpB;;;;;;;;;;;;AAYAC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAChB,SAAKA,MAAL,GAAcA,MAAM,CAAC,QAAD,CAApB;AACA,SAAKC,SAAL,GAAiBD,MAAM,CAAC,WAAD,CAAvB;AACA,SAAKE,MAAL,GAAcF,MAAM,CAAC,QAAD,CAApB;AACH;;AAEDG,EAAAA,MAAM,CAACC,KAAD,EAAQC,MAAR,EAAgBC,UAAhB,EAA4BC,IAA5B,EAAkC;AACpC;;;;;;;;;AASA,QAAI,KAAKb,QAAL,CAAcW,MAAd,CAAJ,EAA2B;AACvB,UAAIE,IAAI,GAAG,CAAX,EAAc;AACV,aAAKN,SAAL,GAAiB,WAAjB;AACA,aAAKD,MAAL,GAAcL,IAAd;AACA,aAAKO,MAAL,GAAeI,UAAf;AACH,OAJD,MAKK;AACD,aAAKL,SAAL,GAAiB,WAAjB;AACA,aAAKD,MAAL,GAAcL,IAAd;AACA,aAAKO,MAAL,GAAc,GAAd;AACH;;AACD;AACH;;AAED,QAAIM,kBAAkB,GAAGX,qBAAqB,CAACO,KAAD,CAA9C;;AAEA,QAAII,kBAAkB,CAACC,QAAnB,OAAkC,CAAC,GAAD,EAAM,GAAN,EAAWA,QAAX,EAAtC,EAA6D;AACzD,WAAKR,SAAL,GAAiB,WAAjB;AACA,WAAKD,MAAL,GAAcL,IAAd;AACA,WAAKO,MAAL,GAAc,GAAd;AACH,KAJD,MAMK,IAAIK,IAAI,GAAG,CAAX,EAAc;AACf,WAAKN,SAAL,GAAiB,OAAjB;AACA,WAAKD,MAAL,GAAcJ,WAAd;AACA,WAAKM,MAAL,GAAc,GAAd;AACH,KAJI,MAMA;AACD,WAAKD,SAAL,GAAiB,EAAjB;AACA,WAAKD,MAAL,GAAcJ,WAAd;AACA,WAAKM,MAAL,GAAc,GAAd;AACH;AACJ;;AAEDQ,EAAAA,WAAW,CAACV,MAAD,EAAS;AAChB;AACA,SAAKA,MAAL,GAAcA,MAAM,CAAC,QAAD,CAApB;AACA,SAAKC,SAAL,GAAiBD,MAAM,CAAC,WAAD,CAAvB;AACA,SAAKE,MAAL,GAAcF,MAAM,CAAC,QAAD,CAApB;AACH;;AAEDW,EAAAA,SAAS,GAAG;AACR,WAAO;AACH,mBAAa,KAAKV,SADf;AAEH,gBAAS,KAAKD,MAFX;AAGH,gBAAS,KAAKE;AAHX,KAAP;AAKH;;AAEDU,EAAAA,WAAW,GAAG;AACV,QAAI,KAAKX,SAAL,KAAmB,UAAvB,EACI,OAAO,IAAP,CADJ,KAGI,OAAO,KAAP;AACP;;AAEDP,EAAAA,QAAQ,CAACW,MAAD,EAAS;AACb,SAAK,IAAIQ,KAAT,IAAkBC,MAAM,CAACC,MAAP,CAAcV,MAAd,CAAlB,EAAyC;AACrC,UAAIQ,KAAK,CAACG,MAAN,GAAe,CAAnB,EACI,OAAO,KAAP;AACP;;AACD,WAAO,IAAP;AACH;;AA5FmB","sourcesContent":["import {noRanges} from \"./noRanges\";\nimport {OVER, IN_PROGRESS} from \"./gStatusTypes\";\nimport {getPieceTypeInstances} from \"../../pieceType/getPieceTypeInstances\";\n\n\nexport class GameStatus {\n    /**\n     * \n     * @param {*} board : game board object.\n     * @param {*} ranges : ranges of pieces object.\n     * @param {*} enemyColor : opposite color of play whos turn it is, used to declare winner.\n     * @param {*} npck : shorthand for Number of Pieces Checking the King of player who's turn it is now.\n     * \n     * the status of the game: OVER or IN_PROGRESS\n     * the winner of the game: 'W', 'B', or '-' (neither)\n     * the condition of the king of pla: 'check', 'checkmate', 'stalemate', or 'safe'\n     * \n     */\n    constructor(status) {\n        this.status = status['status']\n        this.condition = status['condition']\n        this.winner = status['winner']\n    }\n\n    update(board, ranges, enemyColor, npck) {\n        /**\n         update the status of the game: OVER || IN_PROGRESS\n         update the winner of the game: 'w', 'b', || '-' (neither)\n         udpate the condition of the enemy king: 'check', 'checkmate', 'stalemate', || 'safe'\n         :param board: dict, game board\n         :param npck: int, number of pieces checking the king\n         :param ranges: dict, ranges of pieces of color\n         :param enemyColor: str, color of king\n        */\n        if (this.noRanges(ranges)) {\n            if (npck > 0) {\n                this.condition = 'checkmate'\n                this.status = OVER\n                this.winner =  enemyColor\n            }\n            else {\n                this.condition = 'stalemate';\n                this.status = OVER;\n                this.winner = '-';\n            }\n            return\n        }\n\n        var pieceTypeInstances = getPieceTypeInstances(board);\n\n        if (pieceTypeInstances.toString() === ['K', 'K'].toString()) {\n            this.condition = 'stalemate';\n            this.status = OVER;\n            this.winner = '-';\n        }\n\n        else if (npck > 0) {\n            this.condition = 'check';\n            this.status = IN_PROGRESS;\n            this.winner = '-';\n        }\n        \n        else {\n            this.condition = '';\n            this.status = IN_PROGRESS;\n            this.winner = '-';\n        }\n    }\n\n    updateByObj(status) {\n        /**update the game status directly by passing a status object */\n        this.status = status['status']\n        this.condition = status['condition']\n        this.winner = status['winner']\n    }\n\n    getStatus() {\n        return {\n            'condition': this.condition,\n            'status':this.status,\n            'winner':this.winner,\n        }\n    }\n\n    hasResigned() {\n        if (this.condition === \"resigned\")\n            return true\n        else\n            return false\n    }\n\n    noRanges(ranges) {\n        for (var range of Object.values(ranges)) {\n            if (range.length > 0)\n                return false\n        }\n        return true\n    }\n\n}"]},"metadata":{},"sourceType":"module"}