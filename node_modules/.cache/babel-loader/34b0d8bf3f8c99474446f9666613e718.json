{"ast":null,"code":"import { rfToXy } from \"../coordType/crdCnvrt\";\nimport { getPieceType } from \"../pieceType/getPieceType\";\nimport { mapListRfToXy } from \"../coordType/mapListRfToXy\";\nimport { getColor } from \"../color/getColor\";\nexport function getKingLocs(board, color) {\n  /*get the location of the king of given color NOTE: in the modified chess can return list instead of single item**/\n  var locs = Object.keys(board).filter(s => getPieceType(board[s]) === 'K' && getColor(board[s]) === color);\n\n  if (locs.length === 1) {\n    return rfToXy(locs[0]);\n  } else {\n    return mapListRfToXy(locs);\n  }\n} // module.exports = getKingLocs;\n\n/** for node.js\nif (require.main === module) {\n    \n    import {sampleBoardDicts} from \"../testObjects/sampleBoardDicts\";\n    import {printBoard} from \"../printers/printBoard\";\n\n    var board, kingLoc;\n    \n    board = sampleBoardDicts['check_example3']\n    kingLoc = getKingLocs(board, 'W')\n    printBoard(board, `\\ncheck_example3, white`, [kingLoc])\n    kingLoc = getKingLocs(board, 'B')\n    printBoard(board, `\\ncheck_example3, black`, [kingLoc])\n\n    board = sampleBoardDicts['super_checkmate_impossible_example']\n    kingLoc = getKingLocs(board, 'W')\n    printBoard(board, `\\nsuper_checkmate_impossible_example, white`, [kingLoc])\n    kingLoc = getKingLocs(board, 'B')\n    printBoard(board, `\\nsuper_checkmate_impossible_example, black`, [kingLoc])\n\n\n}\n*/","map":{"version":3,"sources":["/home/brian/ChessKingsCouncil/app/src/game_logic/threatArea/getKingLocs.js"],"names":["rfToXy","getPieceType","mapListRfToXy","getColor","getKingLocs","board","color","locs","Object","keys","filter","s","length"],"mappings":"AAAA,SAAQA,MAAR,QAAqB,uBAArB;AACA,SAAQC,YAAR,QAA2B,2BAA3B;AACA,SAAQC,aAAR,QAA4B,4BAA5B;AACA,SAAQC,QAAR,QAAuB,mBAAvB;AAIA,OAAO,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,KAA5B,EAAmC;AACtC;AACA,MAAIC,IAAI,GAAGC,MAAM,CAACC,IAAP,CAAYJ,KAAZ,EAAmBK,MAAnB,CAA0BC,CAAC,IAAIV,YAAY,CAACI,KAAK,CAACM,CAAD,CAAN,CAAZ,KAA2B,GAA3B,IAAmCR,QAAQ,CAACE,KAAK,CAACM,CAAD,CAAN,CAAR,KAAuBL,KAAzF,CAAX;;AACA,MAAIC,IAAI,CAACK,MAAL,KAAgB,CAApB,EAAuB;AACnB,WAAOZ,MAAM,CAACO,IAAI,CAAC,CAAD,CAAL,CAAb;AACH,GAFD,MAGK;AACD,WAAOL,aAAa,CAACK,IAAD,CAApB;AACH;AACJ,C,CAED;;AAEA","sourcesContent":["import {rfToXy} from \"../coordType/crdCnvrt\"\nimport {getPieceType} from \"../pieceType/getPieceType\";\nimport {mapListRfToXy} from \"../coordType/mapListRfToXy\";\nimport {getColor} from \"../color/getColor\";\n\n\n\nexport function getKingLocs(board, color) {\n    /*get the location of the king of given color NOTE: in the modified chess can return list instead of single item**/\n    var locs = Object.keys(board).filter(s => getPieceType(board[s]) === 'K' &&  getColor(board[s]) === color)\n    if (locs.length === 1) {\n        return rfToXy(locs[0])\n    }\n    else {\n        return mapListRfToXy(locs)\n    }\n}\n\n// module.exports = getKingLocs;\n\n/** for node.js\nif (require.main === module) {\n    \n    import {sampleBoardDicts} from \"../testObjects/sampleBoardDicts\";\n    import {printBoard} from \"../printers/printBoard\";\n\n    var board, kingLoc;\n    \n    board = sampleBoardDicts['check_example3']\n    kingLoc = getKingLocs(board, 'W')\n    printBoard(board, `\\ncheck_example3, white`, [kingLoc])\n    kingLoc = getKingLocs(board, 'B')\n    printBoard(board, `\\ncheck_example3, black`, [kingLoc])\n\n    board = sampleBoardDicts['super_checkmate_impossible_example']\n    kingLoc = getKingLocs(board, 'W')\n    printBoard(board, `\\nsuper_checkmate_impossible_example, white`, [kingLoc])\n    kingLoc = getKingLocs(board, 'B')\n    printBoard(board, `\\nsuper_checkmate_impossible_example, black`, [kingLoc])\n\n\n}\n*/\n"]},"metadata":{},"sourceType":"module"}