{"ast":null,"code":"import { mapListXyToRf } from \"../coordType/mapListXyToRf\";\nimport { printBoard } from \"../printers/printBoard\";\nexport function isPin(pathData) {\n  /**return true if the path contains a pinned piece, otherwise false \n      see class PathData\n  */\n  if (pathData.statuses.length < 2) {\n    return false;\n  }\n\n  if (pathData.statuses[0] != 'f') {\n    return false;\n  }\n\n  if (pathData.statuses[1] != 'e') {\n    return false;\n  }\n\n  if (!pathData.pieceMatchesPath[1]) {\n    return false;\n  }\n\n  return true;\n} // module.exports = isPin;\n\n/** for node.js\nif (require.main === module) {\n\n    import {getPathdataDict} from \"../pathsInfo/top/getpathDataDict\";\n    import {getStandardPieceDefs} from \"../testObjects/getStandardPieceDefs\";\n    import {sampleBoardDicts} from \"../testObjects/sampleBoardDicts\";\n    import {getStandardIdDict} from \"../testObjects/getStandardIdDict\";   \n\n    var idDict = getStandardIdDict()\n    var pieceDefs = getStandardPieceDefs()\n    var pins = []\n    var nonPins = []\n\n    // test 1:\n    pins = []\n    nonPins = []\n    console.log('test 1:')\n    board = sampleBoardDicts[\"check_example3\"]\n    pathDict = getPathdataDict(board, [4, 4], 'W', pieceDefs, idDict)\n    for (var direction of Object.keys(pathDict)) {\n        if (isPin(pathDict[direction]))\n            pins.push(...mapListXyToRf(pathDict[direction].coordPath))\n        else\n            nonPins.push(...mapListXyToRf(pathDict[direction].coordPath))\n    }\n    printBoard(board, \"pins: red, non-pins: green\", pins, nonPins, [\"d4\"])\n    console.log('\\n')\n\n\n    // test 2:\n    pins = []\n    nonPins = []\n    console.log('test 2:')\n    var board = sampleBoardDicts[\"pinned_ex1\"];\n    var pathDict = getPathdataDict(board, [4, 7], 'W', pieceDefs, idDict)\n    for (var direction of Object.keys(pathDict)) {\n        if (isPin(pathDict[direction]))\n            pins.push(...mapListXyToRf(pathDict[direction].coordPath))\n        else\n            nonPins.push(...mapListXyToRf(pathDict[direction].coordPath))\n    }\n    printBoard(board, \"pins: red, non-pins: green\", pins, nonPins, [\"d7\"])\n    console.log('\\n')\n\n    // test 3:\n    pins = []\n    nonPins = []\n    console.log('test 3:')\n    board = sampleBoardDicts[\"pinned_ex2\"];\n    var pathDict = getPathdataDict(board, [4, 5], 'W', pieceDefs, idDict)\n    for (var direction of Object.keys(pathDict)) {\n        if (isPin(pathDict[direction]))\n            pins.push(...mapListXyToRf(pathDict[direction].coordPath))\n        else\n            nonPins.push(...mapListXyToRf(pathDict[direction].coordPath))\n    }\n    printBoard(board, \"pins: red, non-pins: green\", pins, nonPins, [\"d5\"])\n    console.log('\\n')\n\n\n\n}\n*/","map":{"version":3,"sources":["/home/brian/ChessKingsCouncil/app/src/game_logic/pins/isPin.js"],"names":["mapListXyToRf","printBoard","isPin","pathData","statuses","length","pieceMatchesPath"],"mappings":"AAAA,SAAQA,aAAR,QAA4B,4BAA5B;AACA,SAAQC,UAAR,QAAyB,wBAAzB;AAGA,OAAO,SAASC,KAAT,CAAeC,QAAf,EAAyB;AAC5B;;;AAGA,MAAIA,QAAQ,CAACC,QAAT,CAAkBC,MAAlB,GAA2B,CAA/B,EAAkC;AAC9B,WAAO,KAAP;AACH;;AACD,MAAIF,QAAQ,CAACC,QAAT,CAAkB,CAAlB,KAAwB,GAA5B,EAAiC;AAC7B,WAAO,KAAP;AACH;;AACD,MAAID,QAAQ,CAACC,QAAT,CAAkB,CAAlB,KAAwB,GAA5B,EAAiC;AAC7B,WAAO,KAAP;AACH;;AACD,MAAI,CAAED,QAAQ,CAACG,gBAAT,CAA0B,CAA1B,CAAN,EAAoC;AAChC,WAAO,KAAP;AACH;;AACD,SAAO,IAAP;AACH,C,CAED;;AAEA","sourcesContent":["import {mapListXyToRf} from \"../coordType/mapListXyToRf\"\nimport {printBoard} from \"../printers/printBoard\"\n\n\nexport function isPin(pathData) {\n    /**return true if the path contains a pinned piece, otherwise false \n        see class PathData\n    */\n    if (pathData.statuses.length < 2) {\n        return false\n    }\n    if (pathData.statuses[0] != 'f') {\n        return false\n    }\n    if (pathData.statuses[1] != 'e') {\n        return false\n    }\n    if (! pathData.pieceMatchesPath[1]) {\n        return false\n    }\n    return true\n}\n\n// module.exports = isPin;\n\n/** for node.js\nif (require.main === module) {\n\n    import {getPathdataDict} from \"../pathsInfo/top/getpathDataDict\";\n    import {getStandardPieceDefs} from \"../testObjects/getStandardPieceDefs\";\n    import {sampleBoardDicts} from \"../testObjects/sampleBoardDicts\";\n    import {getStandardIdDict} from \"../testObjects/getStandardIdDict\";   \n\n    var idDict = getStandardIdDict()\n    var pieceDefs = getStandardPieceDefs()\n    var pins = []\n    var nonPins = []\n\n    // test 1:\n    pins = []\n    nonPins = []\n    console.log('test 1:')\n    board = sampleBoardDicts[\"check_example3\"]\n    pathDict = getPathdataDict(board, [4, 4], 'W', pieceDefs, idDict)\n    for (var direction of Object.keys(pathDict)) {\n        if (isPin(pathDict[direction]))\n            pins.push(...mapListXyToRf(pathDict[direction].coordPath))\n        else\n            nonPins.push(...mapListXyToRf(pathDict[direction].coordPath))\n    }\n    printBoard(board, \"pins: red, non-pins: green\", pins, nonPins, [\"d4\"])\n    console.log('\\n')\n\n\n    // test 2:\n    pins = []\n    nonPins = []\n    console.log('test 2:')\n    var board = sampleBoardDicts[\"pinned_ex1\"];\n    var pathDict = getPathdataDict(board, [4, 7], 'W', pieceDefs, idDict)\n    for (var direction of Object.keys(pathDict)) {\n        if (isPin(pathDict[direction]))\n            pins.push(...mapListXyToRf(pathDict[direction].coordPath))\n        else\n            nonPins.push(...mapListXyToRf(pathDict[direction].coordPath))\n    }\n    printBoard(board, \"pins: red, non-pins: green\", pins, nonPins, [\"d7\"])\n    console.log('\\n')\n\n    // test 3:\n    pins = []\n    nonPins = []\n    console.log('test 3:')\n    board = sampleBoardDicts[\"pinned_ex2\"];\n    var pathDict = getPathdataDict(board, [4, 5], 'W', pieceDefs, idDict)\n    for (var direction of Object.keys(pathDict)) {\n        if (isPin(pathDict[direction]))\n            pins.push(...mapListXyToRf(pathDict[direction].coordPath))\n        else\n            nonPins.push(...mapListXyToRf(pathDict[direction].coordPath))\n    }\n    printBoard(board, \"pins: red, non-pins: green\", pins, nonPins, [\"d5\"])\n    console.log('\\n')\n\n\n\n}\n*/"]},"metadata":{},"sourceType":"module"}