{"ast":null,"code":"import { getPaths } from \"./paths/getPaths\";\nimport { getJumps } from \"./jumps/getJumps\";\nimport { xyToRf } from \"../coordType/crdCnvrt\";\nexport function getRange(board, sqr, color, pieceDefs, idDict) {\n  /* **/\n  var id = board[xyToRf(...sqr)];\n  var fenId = id[1].toLowerCase();\n  var name = idDict[fenId];\n  var def = pieceDefs[name];\n  var offsets = def[color]['offsets'];\n  var stepFuncNames = def[color]['spans'];\n  var paths = getPaths(stepFuncNames, board, sqr, color);\n  var jumps = getJumps(offsets, board, sqr, color);\n  paths.push(...jumps);\n  return paths;\n} // module.exports = getRange;\n\n/** for node.js\nif (require.main === module) {\n    var board = sampleBoardDicts['ranges_test']\n    var idDict = getStandardIdDict()\n    var pieceDefs = getStandardPieceDefs()\n    var pieceRange;\n    for (var sqr of [[2, 1], [3, 1], [4, 1], [1, 3], [2, 3], [3, 3], [4, 3], [6, 3], [7, 3], [8, 3]]) {\n        pieceRange = getRange(board, sqr, 'W', pieceDefs, idDict)\n        printBoard(board, `\\n${board[xyToRf(...sqr)]}`, mapListXyToRf(pieceRange), null, [xyToRf(...sqr)])\n    }\n    for (var sqr of [[1, 5], [2, 5], [3, 5], [4, 5], [6, 5], [7, 5], [8, 5]]) {\n        pieceRange = getRange(board, sqr, 'B', pieceDefs, idDict)\n        printBoard(board, `\\n${board[xyToRf(...sqr)]}`, mapListXyToRf(pieceRange), null, [xyToRf(...sqr)])\n    }\n\n}\n*/","map":{"version":3,"sources":["/home/brian/ChessKingsCouncil/app/src/game_logic/ranges/getRange.js"],"names":["getPaths","getJumps","xyToRf","getRange","board","sqr","color","pieceDefs","idDict","id","fenId","toLowerCase","name","def","offsets","stepFuncNames","paths","jumps","push"],"mappings":"AAAA,SAAQA,QAAR,QAAuB,kBAAvB;AACA,SAAQC,QAAR,QAAuB,kBAAvB;AACA,SAAQC,MAAR,QAAqB,uBAArB;AAGA,OAAO,SAASC,QAAT,CAAkBC,KAAlB,EAAyBC,GAAzB,EAA8BC,KAA9B,EAAqCC,SAArC,EAAgDC,MAAhD,EAAwD;AAC3D;AACA,MAAIC,EAAE,GAAGL,KAAK,CAACF,MAAM,CAAC,GAAGG,GAAJ,CAAP,CAAd;AACA,MAAIK,KAAK,GAAGD,EAAE,CAAC,CAAD,CAAF,CAAME,WAAN,EAAZ;AACA,MAAIC,IAAI,GAAGJ,MAAM,CAACE,KAAD,CAAjB;AACA,MAAIG,GAAG,GAAGN,SAAS,CAACK,IAAD,CAAnB;AACA,MAAIE,OAAO,GAAGD,GAAG,CAACP,KAAD,CAAH,CAAW,SAAX,CAAd;AACA,MAAIS,aAAa,GAAGF,GAAG,CAACP,KAAD,CAAH,CAAW,OAAX,CAApB;AACA,MAAIU,KAAK,GAAGhB,QAAQ,CAACe,aAAD,EAAgBX,KAAhB,EAAuBC,GAAvB,EAA4BC,KAA5B,CAApB;AACA,MAAIW,KAAK,GAAGhB,QAAQ,CAACa,OAAD,EAAUV,KAAV,EAAiBC,GAAjB,EAAsBC,KAAtB,CAApB;AACAU,EAAAA,KAAK,CAACE,IAAN,CAAW,GAAGD,KAAd;AACA,SAAOD,KAAP;AACH,C,CAED;;AAEA","sourcesContent":["import {getPaths} from \"./paths/getPaths\";\nimport {getJumps} from \"./jumps/getJumps\";\nimport {xyToRf} from \"../coordType/crdCnvrt\";\n\n\nexport function getRange(board, sqr, color, pieceDefs, idDict) {\n    /* **/\n    var id = board[xyToRf(...sqr)]\n    var fenId = id[1].toLowerCase()\n    var name = idDict[fenId]\n    var def = pieceDefs[name]\n    var offsets = def[color]['offsets']\n    var stepFuncNames = def[color]['spans']\n    var paths = getPaths(stepFuncNames, board, sqr, color)\n    var jumps = getJumps(offsets, board, sqr, color)\n    paths.push(...jumps)\n    return paths;\n}\n\n// module.exports = getRange;\n\n/** for node.js\nif (require.main === module) {\n    var board = sampleBoardDicts['ranges_test']\n    var idDict = getStandardIdDict()\n    var pieceDefs = getStandardPieceDefs()\n    var pieceRange;\n    for (var sqr of [[2, 1], [3, 1], [4, 1], [1, 3], [2, 3], [3, 3], [4, 3], [6, 3], [7, 3], [8, 3]]) {\n        pieceRange = getRange(board, sqr, 'W', pieceDefs, idDict)\n        printBoard(board, `\\n${board[xyToRf(...sqr)]}`, mapListXyToRf(pieceRange), null, [xyToRf(...sqr)])\n    }\n    for (var sqr of [[1, 5], [2, 5], [3, 5], [4, 5], [6, 5], [7, 5], [8, 5]]) {\n        pieceRange = getRange(board, sqr, 'B', pieceDefs, idDict)\n        printBoard(board, `\\n${board[xyToRf(...sqr)]}`, mapListXyToRf(pieceRange), null, [xyToRf(...sqr)])\n    }\n\n}\n*/\n\n"]},"metadata":{},"sourceType":"module"}