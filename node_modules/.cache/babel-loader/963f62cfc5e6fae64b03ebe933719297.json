{"ast":null,"code":"import { restriction } from \"../../restriction/restriction\";\nimport { getPieceType } from \"../../pieceType/getPieceType\";\nimport { mapListXyToRf } from \"../../coordType/mapListXyToRf\";\nimport { mapDictListXyToRf } from \"../../coordType/mapDictListXyToRf\";\nimport { intersection } from \"../../helpers/setOps\"; // initRanges, pins, threatArea, finalRanges, mtRestrict\n\nexport function getFinalRanges(initRanges, pins, threatArea, finalRanges, mtRestriction) {\n  /**the final range is the intersection of the initial range, pin, threat area, &&  multi-threat restriction\n  :param initRanges:\n  :param pins:\n  :param threatArea:\n  :param finalRanges:\n  :param mtRestriction:\n  :return:\n  */\n  var a, b, c, d, e, f, g;\n\n  for (var id of Object.keys(finalRanges)) {\n    if (getPieceType(id) === 'K') {\n      finalRanges[id] = initRanges[id];\n    } else {\n      a = new Set(initRanges[id]);\n      b = restriction(pins[id]);\n      c = restriction(threatArea);\n      d = restriction(mtRestriction[id]);\n      e = intersection(a, b);\n      f = intersection(e, c);\n      g = intersection(f, d);\n      finalRanges[id] = Array.from(g);\n    }\n\n    finalRanges[id] = Array.from(finalRanges[id]);\n  }\n\n  return finalRanges;\n} // module.exports = getFinalRanges;\n\n/** for node.js\nif (require.main === module) {\n    \n    import {printBoard} from \"../../printers/printBoard\";\n    import {sampleBoardDicts} from \"../../testObjects/sampleBoardDicts\";\n    import {getPieceLoc} from \"../../helpers/getPieceLoc\";\n\n    var board, initPieceDict, initRanges, pins, threatArea, finalRanges, mtRestriction;\n\n    initPieceDict = require(\"../../testObjects/white/initPieceDicts/check_example3\")\n    initRanges = require(\"../../testObjects/white/initRangeDicts/check_example3\");\n    pins = require(\"../../testObjects/white/pinDicts/check_example3\");\n    threatArea = require(\"../../testObjects/white/threatAreaLists/check_example3\")\n    mtRestriction = require(\"../../testObjects/white/restrictionDicts/check_example3\")\n    board = sampleBoardDicts['check_example3']\n\n    finalRanges = getFinalRanges(initRanges, pins, threatArea, initPieceDict, mtRestriction)\n    for (var id of Object.keys(finalRanges)) {\n        printBoard(board, `\\ncheck_example3, ${id}`, finalRanges[id], null, getPieceLoc(board, id))\n    }\n\n\n    initPieceDict = require(\"../../testObjects/white/initPieceDicts/knight_threat2\")\n    initRanges = require(\"../../testObjects/white/initRangeDicts/knight_threat2\");\n    pins = require(\"../../testObjects/white/pinDicts/knight_threat2\");\n    threatArea = require(\"../../testObjects/white/threatAreaLists/knight_threat2\")\n    mtRestriction = require(\"../../testObjects/white/restrictionDicts/knight_threat2\")\n    board = sampleBoardDicts['knight_threat2']\n\n    finalRanges = getFinalRanges(initRanges, pins, threatArea, initPieceDict, mtRestriction)\n    for (var id of Object.keys(finalRanges)) {\n        printBoard(board, `\\nknight_threat2, ${id}`, finalRanges[id], null, getPieceLoc(board, id))\n    }\n\n\n    initPieceDict = require(\"../../testObjects/white/initPieceDicts/super_checkmate_impossible_example\")\n    initRanges = require(\"../../testObjects/white/initRangeDicts/super_checkmate_impossible_example\");\n    pins = require(\"../../testObjects/white/pinDicts/super_checkmate_impossible_example\");\n    threatArea = require(\"../../testObjects/white/threatAreaLists/super_checkmate_impossible_example\")\n    mtRestriction = require(\"../../testObjects/white/restrictionDicts/super_checkmate_impossible_example\")\n    board = sampleBoardDicts['super_checkmate_impossible_example']\n\n    finalRanges = getFinalRanges(initRanges, pins, threatArea, initPieceDict, mtRestriction)\n    for (var id of Object.keys(finalRanges)) {\n        printBoard(board, `\\nsuper_checkmate_impossible_example, ${id}`, finalRanges[id], null, getPieceLoc(board, id))\n    }\n\n}\n*/","map":{"version":3,"sources":["/home/brian/ChessKingsCouncil/app/src/game_logic/ranges/top/getFinalRanges.js"],"names":["restriction","getPieceType","mapListXyToRf","mapDictListXyToRf","intersection","getFinalRanges","initRanges","pins","threatArea","finalRanges","mtRestriction","a","b","c","d","e","f","g","id","Object","keys","Set","Array","from"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,+BAA1B;AACA,SAAQC,YAAR,QAA2B,8BAA3B;AACA,SAAQC,aAAR,QAA4B,+BAA5B;AACA,SAAQC,iBAAR,QAAgC,mCAAhC;AACA,SAAQC,YAAR,QAA2B,sBAA3B,C,CAEA;;AACA,OAAO,SAASC,cAAT,CAAwBC,UAAxB,EAAoCC,IAApC,EAA0CC,UAA1C,EAAsDC,WAAtD,EAAmEC,aAAnE,EAAkF;AACrF;;;;;;;;AASA,MAAIC,CAAJ,EAAOC,CAAP,EAAUC,CAAV,EAAaC,CAAb,EAAgBC,CAAhB,EAAmBC,CAAnB,EAAsBC,CAAtB;;AAEA,OAAK,IAAIC,EAAT,IAAeC,MAAM,CAACC,IAAP,CAAYX,WAAZ,CAAf,EAAyC;AAErC,QAAIR,YAAY,CAACiB,EAAD,CAAZ,KAAqB,GAAzB,EAA8B;AAC1BT,MAAAA,WAAW,CAACS,EAAD,CAAX,GAAkBZ,UAAU,CAACY,EAAD,CAA5B;AACH,KAFD,MAIK;AAEDP,MAAAA,CAAC,GAAG,IAAIU,GAAJ,CAAQf,UAAU,CAACY,EAAD,CAAlB,CAAJ;AACAN,MAAAA,CAAC,GAAGZ,WAAW,CAACO,IAAI,CAACW,EAAD,CAAL,CAAf;AACAL,MAAAA,CAAC,GAAGb,WAAW,CAACQ,UAAD,CAAf;AACAM,MAAAA,CAAC,GAAGd,WAAW,CAACU,aAAa,CAACQ,EAAD,CAAd,CAAf;AAEAH,MAAAA,CAAC,GAAGX,YAAY,CAACO,CAAD,EAAIC,CAAJ,CAAhB;AACAI,MAAAA,CAAC,GAAGZ,YAAY,CAACW,CAAD,EAAIF,CAAJ,CAAhB;AACAI,MAAAA,CAAC,GAAGb,YAAY,CAACY,CAAD,EAAIF,CAAJ,CAAhB;AAEAL,MAAAA,WAAW,CAACS,EAAD,CAAX,GAAkBI,KAAK,CAACC,IAAN,CAAWN,CAAX,CAAlB;AACH;;AAEDR,IAAAA,WAAW,CAACS,EAAD,CAAX,GAAkBI,KAAK,CAACC,IAAN,CAAWd,WAAW,CAACS,EAAD,CAAtB,CAAlB;AACH;;AAED,SAAOT,WAAP;AACH,C,CAED;;AAEA","sourcesContent":["import {restriction} from \"../../restriction/restriction\";\nimport {getPieceType} from \"../../pieceType/getPieceType\";\nimport {mapListXyToRf} from \"../../coordType/mapListXyToRf\";\nimport {mapDictListXyToRf} from \"../../coordType/mapDictListXyToRf\";\nimport {intersection} from \"../../helpers/setOps\"\n\n// initRanges, pins, threatArea, finalRanges, mtRestrict\nexport function getFinalRanges(initRanges, pins, threatArea, finalRanges, mtRestriction) {\n    /**the final range is the intersection of the initial range, pin, threat area, &&  multi-threat restriction\n    :param initRanges:\n    :param pins:\n    :param threatArea:\n    :param finalRanges:\n    :param mtRestriction:\n    :return:\n    */\n\n    var a, b, c, d, e, f, g;\n\n    for (var id of Object.keys(finalRanges)) {\n        \n        if (getPieceType(id) === 'K') {\n            finalRanges[id] = initRanges[id]\n        }\n\n        else {\n\n            a = new Set(initRanges[id])\n            b = restriction(pins[id])\n            c = restriction(threatArea)\n            d = restriction(mtRestriction[id])\n\n            e = intersection(a, b)\n            f = intersection(e, c)\n            g = intersection(f, d)\n\n            finalRanges[id] = Array.from(g);\n        }\n        \n        finalRanges[id] = Array.from(finalRanges[id])\n    }\n\n    return finalRanges;\n}\n\n// module.exports = getFinalRanges;\n\n/** for node.js\nif (require.main === module) {\n    \n    import {printBoard} from \"../../printers/printBoard\";\n    import {sampleBoardDicts} from \"../../testObjects/sampleBoardDicts\";\n    import {getPieceLoc} from \"../../helpers/getPieceLoc\";\n\n    var board, initPieceDict, initRanges, pins, threatArea, finalRanges, mtRestriction;\n\n    initPieceDict = require(\"../../testObjects/white/initPieceDicts/check_example3\")\n    initRanges = require(\"../../testObjects/white/initRangeDicts/check_example3\");\n    pins = require(\"../../testObjects/white/pinDicts/check_example3\");\n    threatArea = require(\"../../testObjects/white/threatAreaLists/check_example3\")\n    mtRestriction = require(\"../../testObjects/white/restrictionDicts/check_example3\")\n    board = sampleBoardDicts['check_example3']\n\n    finalRanges = getFinalRanges(initRanges, pins, threatArea, initPieceDict, mtRestriction)\n    for (var id of Object.keys(finalRanges)) {\n        printBoard(board, `\\ncheck_example3, ${id}`, finalRanges[id], null, getPieceLoc(board, id))\n    }\n\n\n    initPieceDict = require(\"../../testObjects/white/initPieceDicts/knight_threat2\")\n    initRanges = require(\"../../testObjects/white/initRangeDicts/knight_threat2\");\n    pins = require(\"../../testObjects/white/pinDicts/knight_threat2\");\n    threatArea = require(\"../../testObjects/white/threatAreaLists/knight_threat2\")\n    mtRestriction = require(\"../../testObjects/white/restrictionDicts/knight_threat2\")\n    board = sampleBoardDicts['knight_threat2']\n\n    finalRanges = getFinalRanges(initRanges, pins, threatArea, initPieceDict, mtRestriction)\n    for (var id of Object.keys(finalRanges)) {\n        printBoard(board, `\\nknight_threat2, ${id}`, finalRanges[id], null, getPieceLoc(board, id))\n    }\n\n\n    initPieceDict = require(\"../../testObjects/white/initPieceDicts/super_checkmate_impossible_example\")\n    initRanges = require(\"../../testObjects/white/initRangeDicts/super_checkmate_impossible_example\");\n    pins = require(\"../../testObjects/white/pinDicts/super_checkmate_impossible_example\");\n    threatArea = require(\"../../testObjects/white/threatAreaLists/super_checkmate_impossible_example\")\n    mtRestriction = require(\"../../testObjects/white/restrictionDicts/super_checkmate_impossible_example\")\n    board = sampleBoardDicts['super_checkmate_impossible_example']\n\n    finalRanges = getFinalRanges(initRanges, pins, threatArea, initPieceDict, mtRestriction)\n    for (var id of Object.keys(finalRanges)) {\n        printBoard(board, `\\nsuper_checkmate_impossible_example, ${id}`, finalRanges[id], null, getPieceLoc(board, id))\n    }\n\n}\n*/"]},"metadata":{},"sourceType":"module"}