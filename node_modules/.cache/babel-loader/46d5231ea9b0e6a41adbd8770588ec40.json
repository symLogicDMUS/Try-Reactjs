{"ast":null,"code":"import { getPieceType } from \"../pieceType/getPieceType\";\nimport { getColor } from \"../color/getColor\";\nimport { rfToXy } from \"../coordType/crdCnvrt\";\nimport { getResetPieceDicts } from \"../getters/getResetPieceDicts\";\nexport function getMultithreatRestriction(board, numPiecesCheckingKing, color) {\n  /**\n  if there is more than 1 piece checking the king then each piece of color will be restricted to the square it's\n  currently on, otherwise no multi-threat restriction so each piece gets all 64 coordinates\n  */\n  var multithreatRestriction = {};\n\n  if (numPiecesCheckingKing > 1) {\n    for (var [rf, id] of Object.entries(board)) {\n      if (id === '#') {\n        continue;\n      }\n\n      if (getColor(id) != color) {\n        continue;\n      }\n\n      if (getPieceType(id) === 'K') {\n        continue;\n      }\n\n      multithreatRestriction[id] = [rfToXy(rf)];\n    }\n  } else {\n    for (var [rf, id] of Object.entries(board)) {\n      if (id === '#') {\n        continue;\n      }\n\n      if (getColor(id) != color) {\n        continue;\n      }\n\n      if (getPieceType(id) === 'K') {\n        continue;\n      }\n\n      multithreatRestriction[id] = [];\n    }\n  }\n\n  return multithreatRestriction;\n} // module.exports = getMultithreatRestriction;\n\n/** for node.js\nif (require.main === module) {\n\n    import {sampleBoardDicts} from \"../testObjects/sampleBoardDicts\";\n    import {printBoard} from \"../printers/printBoard\";\n\n    var board = {}\n\n    board = sampleBoardDicts['check_example3']\n    var [initRanges, pins, mtRestricts, finalRanges] = getResetPieceDicts(board, 'W')\n    multithreatRestriction = getMultithreatRestriction(board, 1, 'W')\n    printBoard(board, '\\ncheck_example3, 1 piece checking king')\n    console.log(multithreatRestriction)\n\n    board = sampleBoardDicts['knight_threat2']\n    var [initRanges, pins, mtRestricts, finalRanges] = getResetPieceDicts(board, 'W')\n    multithreatRestriction = getMultithreatRestriction(board, 2, 'W')\n    printBoard(board, '\\nknight_threat2, 2 pieces checking king')\n    console.log(multithreatRestriction)\n\n    board = sampleBoardDicts['super_checkmate_impossible_example']\n    var [initRanges, pins, mtRestricts, finalRanges] = getResetPieceDicts(board, 'W')\n    multithreatRestriction = getMultithreatRestriction(board, 8, 'W')\n    printBoard(board, '\\nsuper_checkmate_impossible_example, 8 pieces checking king')\n    console.log(multithreatRestriction)\n\n}\n*/","map":{"version":3,"sources":["/home/brian/ChessKingsCouncil/app/src/game_logic/restriction/getMultithreatRestriction.js"],"names":["getPieceType","getColor","rfToXy","getResetPieceDicts","getMultithreatRestriction","board","numPiecesCheckingKing","color","multithreatRestriction","rf","id","Object","entries"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,2BAA3B;AACA,SAAQC,QAAR,QAAuB,mBAAvB;AACA,SAAQC,MAAR,QAAqB,uBAArB;AACA,SAAQC,kBAAR,QAAiC,+BAAjC;AAGA,OAAO,SAASC,yBAAT,CAAmCC,KAAnC,EAA0CC,qBAA1C,EAAiEC,KAAjE,EAAwE;AAC3E;;;;AAKA,MAAIC,sBAAsB,GAAG,EAA7B;;AAEA,MAAIF,qBAAqB,GAAG,CAA5B,EAA+B;AAE3B,SAAK,IAAI,CAACG,EAAD,EAAKC,EAAL,CAAT,IAAqBC,MAAM,CAACC,OAAP,CAAeP,KAAf,CAArB,EAA4C;AAExC,UAAIK,EAAE,KAAK,GAAX,EAAgB;AACZ;AACH;;AACD,UAAIT,QAAQ,CAACS,EAAD,CAAR,IAAgBH,KAApB,EAA2B;AACvB;AACH;;AACD,UAAIP,YAAY,CAACU,EAAD,CAAZ,KAAqB,GAAzB,EAA8B;AAC1B;AACH;;AAEDF,MAAAA,sBAAsB,CAACE,EAAD,CAAtB,GAA6B,CAACR,MAAM,CAACO,EAAD,CAAP,CAA7B;AACH;AAEJ,GAjBD,MAmBK;AACD,SAAK,IAAI,CAACA,EAAD,EAAKC,EAAL,CAAT,IAAqBC,MAAM,CAACC,OAAP,CAAeP,KAAf,CAArB,EAA4C;AAExC,UAAIK,EAAE,KAAK,GAAX,EAAgB;AACZ;AACH;;AACD,UAAIT,QAAQ,CAACS,EAAD,CAAR,IAAgBH,KAApB,EAA2B;AACvB;AACH;;AACD,UAAIP,YAAY,CAACU,EAAD,CAAZ,KAAqB,GAAzB,EAA8B;AAC1B;AACH;;AAEDF,MAAAA,sBAAsB,CAACE,EAAD,CAAtB,GAA6B,EAA7B;AAEH;AACJ;;AAED,SAAOF,sBAAP;AACH,C,CAED;;AAGA","sourcesContent":["import {getPieceType} from \"../pieceType/getPieceType\";\nimport {getColor} from \"../color/getColor\";\nimport {rfToXy} from \"../coordType/crdCnvrt\";\nimport {getResetPieceDicts} from \"../getters/getResetPieceDicts\";\n\n\nexport function getMultithreatRestriction(board, numPiecesCheckingKing, color) {\n    /**\n    if there is more than 1 piece checking the king then each piece of color will be restricted to the square it's\n    currently on, otherwise no multi-threat restriction so each piece gets all 64 coordinates\n    */\n\n    var multithreatRestriction = {}\n\n    if (numPiecesCheckingKing > 1) {\n\n        for (var [rf, id] of Object.entries(board)) {\n\n            if (id === '#') {\n                continue\n            }\n            if (getColor(id) != color) {\n                continue\n            }\n            if (getPieceType(id) === 'K') {\n                continue\n            }\n\n            multithreatRestriction[id] = [rfToXy(rf)]\n        }\n\n    }\n\n    else {\n        for (var [rf, id] of Object.entries(board)) {\n\n            if (id === '#') {\n                continue\n            }\n            if (getColor(id) != color) {\n                continue\n            }\n            if (getPieceType(id) === 'K') {\n                continue\n            }\n\n            multithreatRestriction[id] = []\n\n        }\n    }\n\n    return multithreatRestriction;\n}\n\n// module.exports = getMultithreatRestriction;\n\n\n/** for node.js\nif (require.main === module) {\n\n    import {sampleBoardDicts} from \"../testObjects/sampleBoardDicts\";\n    import {printBoard} from \"../printers/printBoard\";\n\n    var board = {}\n\n    board = sampleBoardDicts['check_example3']\n    var [initRanges, pins, mtRestricts, finalRanges] = getResetPieceDicts(board, 'W')\n    multithreatRestriction = getMultithreatRestriction(board, 1, 'W')\n    printBoard(board, '\\ncheck_example3, 1 piece checking king')\n    console.log(multithreatRestriction)\n\n    board = sampleBoardDicts['knight_threat2']\n    var [initRanges, pins, mtRestricts, finalRanges] = getResetPieceDicts(board, 'W')\n    multithreatRestriction = getMultithreatRestriction(board, 2, 'W')\n    printBoard(board, '\\nknight_threat2, 2 pieces checking king')\n    console.log(multithreatRestriction)\n\n    board = sampleBoardDicts['super_checkmate_impossible_example']\n    var [initRanges, pins, mtRestricts, finalRanges] = getResetPieceDicts(board, 'W')\n    multithreatRestriction = getMultithreatRestriction(board, 8, 'W')\n    printBoard(board, '\\nsuper_checkmate_impossible_example, 8 pieces checking king')\n    console.log(multithreatRestriction)\n\n}\n*/"]},"metadata":{},"sourceType":"module"}