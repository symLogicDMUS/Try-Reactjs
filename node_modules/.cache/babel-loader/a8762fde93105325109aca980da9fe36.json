{"ast":null,"code":"import { sampleBoardDicts } from \"../testObjects/sampleBoardDicts\";\nimport { isPiece } from \"../pieceType/isPiece\";\nimport { getXyBoard } from \"../helpers/getXyBoard\";\nimport { xyToRf, rfToXy } from \"../coordType/crdCnvrt\";\nimport { printBoard } from \"../printers/printBoard\";\nexport function clearPath(board, path) {\n  /*return true if every square along the path is empty, else false**/\n  for (var rf of path) {\n    if (isPiece(board[rf])) {\n      return false;\n    }\n  }\n\n  return true;\n} // module.exports = clearPath;\n\n/** for node.js\nif (require.main === module) {\n\n    // test 1:\n    console.log('test 1:')\n    let board = sampleBoardDicts['checkExample3']\n    printBoard(board)\n    let xyBoard = getXyBoard()\n    for (var col of xyBoard) {\n        console.log(clearPath(board, col))\n    }\n    console.log('\\n')\n\n\n    // test 2:\n    console.log('test 2:')\n    board = sampleBoardDicts['superCheckmateImpossibleExample'];\n    printBoard(board)\n    for (var col of xyBoard) {\n        console.log(clearPath(board, col))\n    }\n    console.log('\\n');\n\n}\n*/","map":{"version":3,"sources":["/home/brian/ChessKingsCouncil/app/src/game_logic/bools/clearPath.js"],"names":["sampleBoardDicts","isPiece","getXyBoard","xyToRf","rfToXy","printBoard","clearPath","board","path","rf"],"mappings":"AAAA,SAAQA,gBAAR,QAA+B,iCAA/B;AACA,SAAQC,OAAR,QAAsB,sBAAtB;AACA,SAAQC,UAAR,QAAyB,uBAAzB;AACA,SAAQC,MAAR,EAAgBC,MAAhB,QAA6B,uBAA7B;AACA,SAAQC,UAAR,QAAyB,wBAAzB;AAGA,OAAO,SAASC,SAAT,CAAmBC,KAAnB,EAA0BC,IAA1B,EAAgC;AACnC;AACA,OAAK,IAAIC,EAAT,IAAeD,IAAf,EAAqB;AACjB,QAAIP,OAAO,CAACM,KAAK,CAACE,EAAD,CAAN,CAAX,EAAwB;AACpB,aAAO,KAAP;AACH;AACJ;;AAED,SAAO,IAAP;AACH,C,CAED;;AAEA","sourcesContent":["import {sampleBoardDicts} from \"../testObjects/sampleBoardDicts\";\nimport {isPiece} from \"../pieceType/isPiece\";\nimport {getXyBoard} from \"../helpers/getXyBoard\";\nimport {xyToRf, rfToXy} from \"../coordType/crdCnvrt\";\nimport {printBoard} from \"../printers/printBoard\";\n\n\nexport function clearPath(board, path) {\n    /*return true if every square along the path is empty, else false**/\n    for (var rf of path) {\n        if (isPiece(board[rf])) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n// module.exports = clearPath;\n\n/** for node.js\nif (require.main === module) {\n\n    // test 1:\n    console.log('test 1:')\n    let board = sampleBoardDicts['checkExample3']\n    printBoard(board)\n    let xyBoard = getXyBoard()\n    for (var col of xyBoard) {\n        console.log(clearPath(board, col))\n    }\n    console.log('\\n')\n\n\n    // test 2:\n    console.log('test 2:')\n    board = sampleBoardDicts['superCheckmateImpossibleExample'];\n    printBoard(board)\n    for (var col of xyBoard) {\n        console.log(clearPath(board, col))\n    }\n    console.log('\\n');\n\n}\n*/"]},"metadata":{},"sourceType":"module"}