{"ast":null,"code":"import { sqrUnderAttack } from \"../../threatArea/top/sqrUnderAttack\";\nimport { getHypoBoards } from \"../../threatArea/getHypoBoards\";\nimport { mapListXyToRf } from \"../../coordType/mapListXyToRf\";\nimport { rfToXy } from \"../../coordType/crdCnvrt\";\nexport function getKingActualMoves(board, kingLoc, initRange, color, pieceDefs, idDict) {\n  /*filter the king's initial moves to get the actual ones**/\n  var boards = getHypoBoards(board, kingLoc, initRange, color);\n  var actualMoves = [];\n\n  for (var [hypoKLoc, hypoBoard] of Object.entries(boards)) {\n    if (!sqrUnderAttack(hypoBoard, rfToXy(hypoKLoc), color, pieceDefs, idDict)) {\n      actualMoves.push(rfToXy(hypoKLoc));\n    }\n  }\n\n  return actualMoves;\n} // module.exports = getKingActualMoves;\n\n/** for node.js\nif (require.main === module) {\n    \n    import {JsonRecords} from \"../../JsonRecords/JsonRecords\";\n    import {SpecialMoves} from \"../specialMoves/SpecialMoves\";\n    import {getStandardPieceDefs} from \"../../testObjects/getStandardPieceDefs\";\n    import {getStandardIdDict} from \"../../testObjects/getStandardIdDict\";\n    import {sampleBoardDicts} from \"../../testObjects/sampleBoardDicts\";\n    import {printBoard} from \"../../printers/printBoard\";\n    import {initPawnIds} from \"../../JsonRecords/initPawnIds\";\n    import {initEmptyRanges} from \"../../apiHelpers/initEmptyRanges\";\n    import {dataDict} from \"../../testObjects/dataDicts/dd1\";\n    \n    var board, records, jsonRecords, specialMoves, actualMoves;\n    var pieceDefs = initEmptyRanges(getStandardPieceDefs())\n    var idDict = getStandardIdDict()\n\n    //king range test\n    board = sampleBoardDicts[\"king_range_test\"];\n    records = dataDict[\"king_range_test\"][\"json\"]\n    jsonRecords =  new JsonRecords(initPawnIds(records, board))\n    specialMoves = new SpecialMoves()\n    actualMoves = getKingActualMoves(board, [4, 3], [[3, 2], [4, 2], [3, 3], [5, 3], [3, 4], [5, 4]], \"W\", pieceDefs, idDict)\n    printBoard(board, \"\\nking_range_test\", mapListXyToRf(actualMoves))\n\n    //super_checkmate_impossible_example\n    board = sampleBoardDicts['super_checkmate_impossible_example']\n    records = dataDict[\"super_checkmate_impossible_example\"][\"json\"]\n    jsonRecords =  new JsonRecords(initPawnIds(records, board))\n    specialMoves = new SpecialMoves()\n    actualMoves = getKingActualMoves(board, [6, 6], [[5, 5], [5, 6], [5, 7], [6, 5], [6, 7], [7, 5], [7, 6], [7, 7]], \"W\", pieceDefs, idDict)\n    printBoard(board, \"super_checkmate_impossible_example\", mapListXyToRf(actualMoves))\n\n}\n*/","map":{"version":3,"sources":["/home/brian/ChessKingsCouncil/app/src/game_logic/ranges/king/getKingActualMoves.js"],"names":["sqrUnderAttack","getHypoBoards","mapListXyToRf","rfToXy","getKingActualMoves","board","kingLoc","initRange","color","pieceDefs","idDict","boards","actualMoves","hypoKLoc","hypoBoard","Object","entries","push"],"mappings":"AAAA,SAAQA,cAAR,QAA6B,qCAA7B;AACA,SAAQC,aAAR,QAA4B,gCAA5B;AACA,SAAQC,aAAR,QAA4B,+BAA5B;AACA,SAASC,MAAT,QAAuB,0BAAvB;AAGA,OAAO,SAASC,kBAAT,CAA4BC,KAA5B,EAAmCC,OAAnC,EAA4CC,SAA5C,EAAuDC,KAAvD,EAA8DC,SAA9D,EAAyEC,MAAzE,EAAiF;AACpF;AACA,MAAIC,MAAM,GAAGV,aAAa,CAACI,KAAD,EAAQC,OAAR,EAAiBC,SAAjB,EAA4BC,KAA5B,CAA1B;AACA,MAAII,WAAW,GAAG,EAAlB;;AACA,OAAK,IAAI,CAACC,QAAD,EAAWC,SAAX,CAAT,IAAkCC,MAAM,CAACC,OAAP,CAAeL,MAAf,CAAlC,EAA0D;AACtD,QAAI,CAAEX,cAAc,CAACc,SAAD,EAAYX,MAAM,CAACU,QAAD,CAAlB,EAA8BL,KAA9B,EAAqCC,SAArC,EAAgDC,MAAhD,CAApB,EAA6E;AACzEE,MAAAA,WAAW,CAACK,IAAZ,CAAiBd,MAAM,CAACU,QAAD,CAAvB;AACH;AACJ;;AACD,SAAOD,WAAP;AACH,C,CAED;;AAEA","sourcesContent":["import {sqrUnderAttack} from \"../../threatArea/top/sqrUnderAttack\";\nimport {getHypoBoards} from \"../../threatArea/getHypoBoards\";\nimport {mapListXyToRf} from \"../../coordType/mapListXyToRf\";\nimport { rfToXy } from \"../../coordType/crdCnvrt\";\n\n\nexport function getKingActualMoves(board, kingLoc, initRange, color, pieceDefs, idDict) {\n    /*filter the king's initial moves to get the actual ones**/\n    var boards = getHypoBoards(board, kingLoc, initRange, color)\n    var actualMoves = []\n    for (var [hypoKLoc, hypoBoard] of Object.entries(boards)) {\n        if (! sqrUnderAttack(hypoBoard, rfToXy(hypoKLoc), color, pieceDefs, idDict)) {\n            actualMoves.push(rfToXy(hypoKLoc))\n        }\n    }\n    return actualMoves\n}\n\n// module.exports = getKingActualMoves;\n\n/** for node.js\nif (require.main === module) {\n    \n    import {JsonRecords} from \"../../JsonRecords/JsonRecords\";\n    import {SpecialMoves} from \"../specialMoves/SpecialMoves\";\n    import {getStandardPieceDefs} from \"../../testObjects/getStandardPieceDefs\";\n    import {getStandardIdDict} from \"../../testObjects/getStandardIdDict\";\n    import {sampleBoardDicts} from \"../../testObjects/sampleBoardDicts\";\n    import {printBoard} from \"../../printers/printBoard\";\n    import {initPawnIds} from \"../../JsonRecords/initPawnIds\";\n    import {initEmptyRanges} from \"../../apiHelpers/initEmptyRanges\";\n    import {dataDict} from \"../../testObjects/dataDicts/dd1\";\n    \n    var board, records, jsonRecords, specialMoves, actualMoves;\n    var pieceDefs = initEmptyRanges(getStandardPieceDefs())\n    var idDict = getStandardIdDict()\n\n    //king range test\n    board = sampleBoardDicts[\"king_range_test\"];\n    records = dataDict[\"king_range_test\"][\"json\"]\n    jsonRecords =  new JsonRecords(initPawnIds(records, board))\n    specialMoves = new SpecialMoves()\n    actualMoves = getKingActualMoves(board, [4, 3], [[3, 2], [4, 2], [3, 3], [5, 3], [3, 4], [5, 4]], \"W\", pieceDefs, idDict)\n    printBoard(board, \"\\nking_range_test\", mapListXyToRf(actualMoves))\n\n    //super_checkmate_impossible_example\n    board = sampleBoardDicts['super_checkmate_impossible_example']\n    records = dataDict[\"super_checkmate_impossible_example\"][\"json\"]\n    jsonRecords =  new JsonRecords(initPawnIds(records, board))\n    specialMoves = new SpecialMoves()\n    actualMoves = getKingActualMoves(board, [6, 6], [[5, 5], [5, 6], [5, 7], [6, 5], [6, 7], [7, 5], [7, 6], [7, 7]], \"W\", pieceDefs, idDict)\n    printBoard(board, \"super_checkmate_impossible_example\", mapListXyToRf(actualMoves))\n\n}\n*/"]},"metadata":{},"sourceType":"module"}