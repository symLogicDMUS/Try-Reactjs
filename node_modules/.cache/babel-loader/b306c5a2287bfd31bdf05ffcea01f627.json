{"ast":null,"code":"var _jsxFileName = \"/home/brian/ChessKingsCouncil/app/src/Components/GameRoot/GameRoot.jsx\";\nimport React from \"react\";\nimport { Board } from \"./Components/Board\";\nimport { GameRootHeader as Header } from \"./Components/GameRootHeader\";\nimport { rook_starting_rf, king_starting_rf } from \"./sharedData/castleRankfiles\";\nimport { SpecialMoves } from \"../../game_logic/ranges/specialMoves/SpecialMoves\";\nimport { JsonRecords } from \"../../game_logic/JsonRecords/JsonRecords\";\nimport { initPawnIds } from \"../../game_logic/JsonRecords/initPawnIds\";\nimport { replacePawnIdWithCurrentLoc } from \"../../game_logic/JsonRecords/replacePawnIdWithCurrentLoc\";\nimport { GameStatus } from \"../../game_logic/fenParser/GameStatus/GameStatus\";\nimport { Fen } from \"../../game_logic/fenParser/Fen\";\nimport { getFen } from \"../../game_logic/fenParser/getFen/top/getFen\";\nimport { getFullFen } from \"../../game_logic/fenParser/getFen/getFullFen\";\nimport { gameDefsOffsetListsToStrs } from \"../../apiHelpers/gameDefsOffsetListsToStrs\";\nimport { Promo } from \"./Modals/Promo\";\nimport { isPawn } from \"./gameRootHelpers/isPawn\";\nimport { SaveAs } from \"./Modals/SaveAs\";\nimport { Saving } from \"./Modals/Saving\";\nimport { SaveSuccessfull } from \"./Modals/SaveSuccessfull\";\nimport { RangeDisplayTool } from \"./Components/RangeDisplayTool\";\nimport { SaveResignTool } from \"./Components/SaveResignTool\";\nimport { AiDisplay } from \"./Components/AiDisplay\";\nimport { makeMove } from \"./Move/makeMove\";\nimport { NavBar } from \"../NavBar/NavBarRegular\";\nimport { ConfirmRedirect } from \"../NavBar/ConfirmRedirect\";\nimport { gamePageRedirectMessage } from \"./sharedData/gamePageRedirectMessage\";\nimport { HelpModal } from \"../Help/HelpModal\";\nimport { OVER } from \"../helpers/gStatusTypes\";\nimport { update } from \"../../apiHelpers/update\";\nimport { updateCouncil } from \"../../apiHelpers/updateCouncil\";\nimport { saveGame } from \"../../API/saveGame\";\nimport \"./css/GameRoot.css\";\nexport class GameRoot extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      bValue: true,\n      isHelpModal: false\n    };\n    this.username = this.props.location.state.username;\n    this.gameName = this.props.location.state.gameName;\n    this.gameType = this.props.location.state.gameType;\n    this.playerType = this.props.location.state.playerType;\n    this.currentPage = this.props.location.state.currentPage;\n    this.gameData = this.props.location.state.gameData;\n    this.board = this.gameData['board'];\n    this.jsonRecords = new JsonRecords(initPawnIds(this.gameData['json_records'], this.board));\n    this.gameStatus = new GameStatus(this.gameData['status']);\n    this.specialMoves = new SpecialMoves(this.gameData['special_moves']);\n    this.fenObj = new Fen(this.gameData['fen_data']);\n    this.turn = this.gameData['color'];\n    this.ranges = this.gameData['ranges'];\n    this.enemyRanges = this.gameData['enemy_ranges'];\n    this.idDict = this.gameData['id_dict'];\n    this.pieceDefs = this.gameData['piece_defs'];\n    this.promoChoices = this.gameData['promos'];\n    this.playerType = this.gameData['pt']; //duplicate?\n\n    this.resigned = this.gameStatus.hasResigned();\n    this.unsaved = false;\n    this.aiDisplay = false;\n    this.first = true;\n    this.aiColor = this.setAiColor();\n    this.promo = false;\n    this.navExpanded = true;\n    this.pieceRangeHighlight = \"none\";\n    this.helpTitle = null;\n    this.helpText = null;\n    this.hmChildName = null;\n    this.hmChildren = {\n      \"none\": null\n    };\n    this.confirmRedirectModal = false;\n    this.redirectPath = null;\n    this.redirectMessage = gamePageRedirectMessage;\n    this.save = this.save.bind(this);\n    this.update = this.update.bind(this);\n    this.resign = this.resign.bind(this);\n    this.updatePrh = this.updatePrh.bind(this);\n    this.updateTurnData = this.updateTurnData.bind(this);\n    this.updateSpecialCase = this.updateSpecialCase.bind(this);\n    this.prepareAiMove = this.prepareAiMove.bind(this);\n    this.aiMakeMove = this.aiMakeMove.bind(this);\n    this.togleNav = this.togleNav.bind(this);\n    this.togleHelpModal = this.togleHelpModal.bind(this);\n    this.setHelpText = this.setHelpText.bind(this);\n    this.setConfirmRedirect = this.setConfirmRedirect.bind(this);\n    this.togleSaveAs = this.togleSaveAs.bind(this);\n    this.changeName = this.changeName.bind(this);\n  }\n\n  componentDidMount() {\n    document.body.className = \"game-root-body\";\n\n    if (this.first) {\n      this.first = false;\n\n      if (this.turn === this.aiColor && !this.isGameOver()) {\n        this.updateTurnData();\n        this.prepareAiMove();\n        this.update();\n      }\n    }\n  }\n\n  isGameOver() {\n    if (this.gameStatus.status === OVER) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  setAiColor() {\n    if (this.playerType === \"test\") return \"none\";\n    if (this.playerType === \"W\") return \"B\";\n    if (this.playerType === \"B\") return \"W\";\n  }\n\n  prepareAiMove() {\n    /**NOTE: if game over, conditional in render() will prevent the component rendering that makes ai move. */\n    this.aiDisplay = true;\n    this.setState({\n      bValue: !this.state.bValue\n    });\n  }\n\n  aiMakeMove() {\n    this.aiDisplay = false;\n    makeMove(this, this.aiStart, this.aiDest);\n    this.toggleTurn();\n    this.updateFen(this.aiStart, this.aiDest);\n    this.updateTurnData();\n    this.update();\n  }\n\n  getBoard() {\n    return this.board;\n  }\n\n  getTurn() {\n    return this.turn;\n  }\n\n  toggleTurn() {\n    if (this.turn === \"W\") {\n      this.turn = \"B\";\n    } else if (this.turn === \"B\") {\n      this.turn = \"W\";\n    } else {\n      console.log(\"color error\");\n    }\n  }\n\n  togleNav(boolVal) {\n    this.navExpanded = boolVal;\n    this.setState({\n      bValue: !this.state.bValue\n    });\n  }\n\n  togleHelpModal(boolVal) {\n    this.setState({\n      isHelpModal: boolVal\n    });\n  }\n\n  getHelpModalChild() {\n    return this.hmChildren[this.hmChildName];\n  }\n\n  setHelpText(helpTitle, helpText, hmChildName) {\n    this.helpTitle = helpTitle;\n    this.helpText = helpText;\n    this.hmChildName = hmChildName;\n  }\n\n  getCondition() {\n    if (this.resigned) return \"resigned\";else return this.gameStatus.condition;\n  }\n\n  getColorLastMove() {\n    if (this.turn === \"W\") {\n      return \"B\";\n    } else {\n      return \"W\";\n    }\n  }\n\n  update() {\n    this.setState({\n      bValue: !this.state.bValue\n    });\n  }\n\n  updateSpecialCase(case_) {\n    this.specialCase = case_;\n  }\n\n  updatePrh(pieceRangeHighlight) {\n    this.pieceRangeHighlight = pieceRangeHighlight;\n  }\n\n  updateTurnData() {\n    /**called after a move is made.*/\n    var turnData;\n\n    if (this.gameType === \"council\") {\n      turnData = updateCouncil(this.board, this.jsonRecords, this.turn, this.playerType, this.pieceDefs, this.idDict);\n    } else {\n      turnData = update(this.board, this.jsonRecords, this.turn, this.playerType, this.pieceDefs, this.idDict);\n    }\n\n    this.ranges = turnData['ranges'];\n    this.enemyRanges = turnData['enemy_ranges'];\n    this.specialMoves.update(turnData['special_moves']);\n    this.aiStart = turnData['ai_start'];\n    this.aiDest = turnData['ai_dest'];\n    this.gameStatus.update(this.board, this.ranges, this.getColorLastMove(), turnData['npck']);\n  }\n\n  updateJsonRecords(start, dest) {\n    var pieceId = this.board[dest];\n    var fenId = pieceId[1].toLowerCase();\n\n    if (isPawn(this.captured)) {\n      delete this.jsonRecords.pawnHistories[this.captured];\n    }\n\n    if (fenId === 'p') {\n      this.jsonRecords.pawnHistories[pieceId].push(dest);\n      this.jsonRecords.numConsecutiveNonPawnMoves = 0;\n    } else {\n      this.jsonRecords.numConsecutiveNonPawnMoves++;\n      if (fenId === 'k' && king_starting_rf.includes(start)) this.jsonRecords.kingsMoved[start] = true;\n      if (fenId === 'r' && rook_starting_rf.includes(start)) this.jsonRecords.rooksMoved[start] = true;\n    }\n\n    return;\n  }\n\n  updateFen(start, dest) {\n    this.fenObj.update(this.specialMoves, this.jsonRecords, start, dest, this.captured, this.turn);\n  }\n\n  save() {\n    this.setUnsavedProgress(false);\n    var posFen = getFen(this.board);\n    var fenData = this.fenObj.getData();\n    var fen = getFullFen(posFen, fenData);\n    var records = this.jsonRecords.getRecords();\n    records['pawn_histories'] = replacePawnIdWithCurrentLoc(records['pawn_histories']);\n    var pieceDefs = gameDefsOffsetListsToStrs(this.pieceDefs);\n    var status = this.gameStatus.getStatus();\n    saveGame(this.gameName, {\n      fen: fen,\n      status: status,\n      game_type: this.gameType,\n      player_type: this.playerType,\n      promos: this.promoChoices,\n      json_records: records,\n      piece_defs: pieceDefs,\n      id_dict: this.idDict\n    });\n  }\n\n  resign() {\n    if (!this.isGameOver()) {\n      this.gameStatus.updateByObj({\n        \"status\": OVER,\n        \"condition\": \"resigned\",\n        \"winner\": this.getColorLastMove()\n      });\n      this.update();\n    }\n  }\n\n  togleSaveAs(boolVal) {\n    this.saveAsModal = boolVal;\n  }\n\n  changeName(newName) {\n    this.gameName = newName;\n  }\n\n  setConfirmRedirect(boolVal, path) {\n    this.confirmRedirectModal = boolVal;\n    this.redirectPath = path;\n    this.update();\n  }\n\n  setUnsavedProgress(boolVal) {\n    this.unsaved = boolVal;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Board, {\n      gameroot: this,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Header, {\n      turn: this.turn,\n      condition: this.getCondition(),\n      winner: this.gameStatus.winner,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 17\n      }\n    }), this.specialCase === \"promo\" && /*#__PURE__*/React.createElement(Promo, {\n      promoChoices: this.promoChoices,\n      board: this.board,\n      jsonRecords: this.jsonRecords,\n      idDict: this.idDict,\n      pieceDefs: this.pieceDefs,\n      isCouncil: this.isCouncil,\n      updateTurnData: this.updateTurnData,\n      updateSpecialCase: this.updateSpecialCase,\n      update: this.update,\n      color: this.getColorLastMove(),\n      aiColor: this.aiColor,\n      pawnLoc: this.specialMoves.pendingPromo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 21\n      }\n    }), this.aiDisplay && this.specialCase !== \"promo\" && !this.isGameOver() && /*#__PURE__*/React.createElement(AiDisplay, {\n      aiStart: this.aiStart,\n      aiDest: this.aiDest,\n      aiMakeMove: this.aiMakeMove,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(RangeDisplayTool, {\n      board: this.board,\n      allRanges: { ...this.ranges,\n        ...this.enemyRanges\n      },\n      pieceDefs: this.pieceDefs,\n      idDict: this.idDict,\n      update: this.update,\n      updatePrh: this.updatePrh,\n      togleHelpModal: this.togleHelpModal,\n      setHelpText: this.setHelpText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(SaveResignTool, {\n      gameName: this.gameName,\n      gameType: this.gameType,\n      playerType: this.playerType,\n      save: this.save,\n      update: this.update,\n      resign: this.resign,\n      updateSpecialCase: this.updateSpecialCase,\n      togleHelpModal: this.togleHelpModal,\n      togleSaveAs: this.togleSaveAs,\n      setHelpText: this.setHelpText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 17\n      }\n    }), this.saveAsModal && /*#__PURE__*/React.createElement(SaveAs, {\n      togleSaveAs: this.togleSaveAs,\n      changeName: this.changeName,\n      update: this.update,\n      save: this.save,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 39\n      }\n    }), this.specialCase === \"saving\" && /*#__PURE__*/React.createElement(Saving, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 52\n      }\n    }), this.specialCase === \"save-success\" && /*#__PURE__*/React.createElement(SaveSuccessfull, {\n      update: this.update,\n      updateSpecialCase: this.updateSpecialCase,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 21\n      }\n    }), this.navExpanded && /*#__PURE__*/React.createElement(NavBar, {\n      navBarPosTop: 0,\n      navBarPosLeft: 368,\n      iconColor: \"b1faae\",\n      iconColorHover: \"b1faae\",\n      backgroundColor: \"green\",\n      backgroundColorSelected: \"darkgreen\",\n      border: \"1px solid darkgreen\",\n      currentPage: this.currentPage,\n      unsavedProgress: this.unsaved,\n      setConfirmRedirect: this.setConfirmRedirect,\n      togleHelpModal: this.togleHelpModal,\n      setHelpText: this.setHelpText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 39\n      }\n    }), this.confirmRedirectModal && /*#__PURE__*/React.createElement(ConfirmRedirect, {\n      path: this.redirectPath,\n      message: this.redirectMessage,\n      setConfirmRedirect: this.setConfirmRedirect,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 48\n      }\n    }), this.state.isHelpModal && /*#__PURE__*/React.createElement(HelpModal, {\n      helpTitle: this.helpTitle,\n      helpText: this.helpText,\n      togleHelpModal: this.togleHelpModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 45\n      }\n    }, this.getHelpModalChild()));\n  }\n\n}","map":{"version":3,"sources":["/home/brian/ChessKingsCouncil/app/src/Components/GameRoot/GameRoot.jsx"],"names":["React","Board","GameRootHeader","Header","rook_starting_rf","king_starting_rf","SpecialMoves","JsonRecords","initPawnIds","replacePawnIdWithCurrentLoc","GameStatus","Fen","getFen","getFullFen","gameDefsOffsetListsToStrs","Promo","isPawn","SaveAs","Saving","SaveSuccessfull","RangeDisplayTool","SaveResignTool","AiDisplay","makeMove","NavBar","ConfirmRedirect","gamePageRedirectMessage","HelpModal","OVER","update","updateCouncil","saveGame","GameRoot","Component","constructor","props","state","bValue","isHelpModal","username","location","gameName","gameType","playerType","currentPage","gameData","board","jsonRecords","gameStatus","specialMoves","fenObj","turn","ranges","enemyRanges","idDict","pieceDefs","promoChoices","resigned","hasResigned","unsaved","aiDisplay","first","aiColor","setAiColor","promo","navExpanded","pieceRangeHighlight","helpTitle","helpText","hmChildName","hmChildren","confirmRedirectModal","redirectPath","redirectMessage","save","bind","resign","updatePrh","updateTurnData","updateSpecialCase","prepareAiMove","aiMakeMove","togleNav","togleHelpModal","setHelpText","setConfirmRedirect","togleSaveAs","changeName","componentDidMount","document","body","className","isGameOver","status","setState","aiStart","aiDest","toggleTurn","updateFen","getBoard","getTurn","console","log","boolVal","getHelpModalChild","getCondition","condition","getColorLastMove","case_","specialCase","turnData","updateJsonRecords","start","dest","pieceId","fenId","toLowerCase","captured","pawnHistories","push","numConsecutiveNonPawnMoves","includes","kingsMoved","rooksMoved","setUnsavedProgress","posFen","fenData","getData","fen","records","getRecords","getStatus","game_type","player_type","promos","json_records","piece_defs","id_dict","updateByObj","saveAsModal","newName","path","render","winner","isCouncil","pendingPromo"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {Board} from \"./Components/Board\";\nimport {GameRootHeader as Header} from \"./Components/GameRootHeader\";\nimport {rook_starting_rf, king_starting_rf} from \"./sharedData/castleRankfiles\";\nimport { SpecialMoves } from \"../../game_logic/ranges/specialMoves/SpecialMoves\";\nimport { JsonRecords } from \"../../game_logic/JsonRecords/JsonRecords\";\nimport { initPawnIds } from \"../../game_logic/JsonRecords/initPawnIds\";\nimport {replacePawnIdWithCurrentLoc} from \"../../game_logic/JsonRecords/replacePawnIdWithCurrentLoc\"\nimport { GameStatus } from \"../../game_logic/fenParser/GameStatus/GameStatus\";\nimport { Fen } from \"../../game_logic/fenParser/Fen\";\nimport {getFen} from \"../../game_logic/fenParser/getFen/top/getFen\";\nimport {getFullFen} from \"../../game_logic/fenParser/getFen/getFullFen\";\nimport { gameDefsOffsetListsToStrs } from \"../../apiHelpers/gameDefsOffsetListsToStrs\";\nimport { Promo } from \"./Modals/Promo\";\nimport {isPawn} from \"./gameRootHelpers/isPawn\";\nimport {SaveAs} from \"./Modals/SaveAs\";\nimport {Saving} from \"./Modals/Saving\";\nimport {SaveSuccessfull} from \"./Modals/SaveSuccessfull\";\nimport {RangeDisplayTool} from \"./Components/RangeDisplayTool\";\nimport { SaveResignTool } from \"./Components/SaveResignTool\";\nimport {AiDisplay} from \"./Components/AiDisplay\";\nimport {makeMove} from \"./Move/makeMove\";\nimport {NavBar} from \"../NavBar/NavBarRegular\";\nimport {ConfirmRedirect} from \"../NavBar/ConfirmRedirect\";\nimport {gamePageRedirectMessage} from \"./sharedData/gamePageRedirectMessage\"\nimport {HelpModal} from \"../Help/HelpModal\";\nimport { OVER } from \"../helpers/gStatusTypes\";\nimport {update} from \"../../apiHelpers/update\";\nimport {updateCouncil} from \"../../apiHelpers/updateCouncil\";\nimport { saveGame } from \"../../API/saveGame\";\nimport \"./css/GameRoot.css\";\n\n\nexport class GameRoot extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {bValue:true, isHelpModal:false};        \n        this.username = this.props.location.state.username;\n        this.gameName = this.props.location.state.gameName;\n        this.gameType = this.props.location.state.gameType;\n        this.playerType = this.props.location.state.playerType;\n        this.currentPage = this.props.location.state.currentPage;\n        this.gameData = this.props.location.state.gameData;\n        this.board = this.gameData['board']\n        this.jsonRecords = new JsonRecords(initPawnIds(this.gameData['json_records'], this.board));\n        this.gameStatus = new GameStatus(this.gameData['status']);\n        this.specialMoves = new SpecialMoves(this.gameData['special_moves'])\n        this.fenObj = new Fen(this.gameData['fen_data']);\n        this.turn = this.gameData['color']\n        this.ranges = this.gameData['ranges'];\n        this.enemyRanges = this.gameData['enemy_ranges'];\n        this.idDict = this.gameData['id_dict'];\n        this.pieceDefs = this.gameData['piece_defs']; \n        this.promoChoices = this.gameData['promos'];\n        this.playerType = this.gameData['pt']; //duplicate?\n        this.resigned = this.gameStatus.hasResigned();\n        this.unsaved = false;\n        this.aiDisplay = false;\n        this.first = true;\n        this.aiColor = this.setAiColor();\n        this.promo = false;\n        this.navExpanded = true;\n        this.pieceRangeHighlight = \"none\";\n        this.helpTitle = null;\n        this.helpText = null;\n        this.hmChildName = null;\n        this.hmChildren = {\"none\":null};\n        this.confirmRedirectModal = false;\n        this.redirectPath = null;\n        this.redirectMessage = gamePageRedirectMessage;\n        this.save = this.save.bind(this);\n        this.update = this.update.bind(this);\n        this.resign = this.resign.bind(this);\n        this.updatePrh = this.updatePrh.bind(this);\n        this.updateTurnData = this.updateTurnData.bind(this);\n        this.updateSpecialCase = this.updateSpecialCase.bind(this);\n        this.prepareAiMove = this.prepareAiMove.bind(this);\n        this.aiMakeMove = this.aiMakeMove.bind(this);\n        this.togleNav = this.togleNav.bind(this);\n        this.togleHelpModal = this.togleHelpModal.bind(this);\n        this.setHelpText = this.setHelpText.bind(this);\n        this.setConfirmRedirect = this.setConfirmRedirect.bind(this);\n        this.togleSaveAs = this.togleSaveAs.bind(this);\n        this.changeName = this.changeName.bind(this);\n    }\n\n    componentDidMount() {\n        document.body.className = \"game-root-body\";\n        if (this.first) {\n            this.first = false;\n            if (this.turn === this.aiColor && ! this.isGameOver()) {\n                this.updateTurnData();\n                this.prepareAiMove();\n                this.update();\n            }\n        }\n    }\n\n    isGameOver() {\n        if (this.gameStatus.status === OVER) {\n            return true\n        }\n\n        else {\n            return false\n        }\n    }\n\n    setAiColor() {\n        if (this.playerType === \"test\")\n            return \"none\";\n        if (this.playerType === \"W\")\n            return \"B\"\n        if (this.playerType === \"B\")\n            return \"W\"\n    }   \n\n    prepareAiMove() {\n        /**NOTE: if game over, conditional in render() will prevent the component rendering that makes ai move. */\n        this.aiDisplay = true;\n        this.setState({bValue: ! this.state.bValue});\n    }\n\n    aiMakeMove() {\n        this.aiDisplay = false;\n        makeMove(this, this.aiStart, this.aiDest);\n        this.toggleTurn();\n        this.updateFen(this.aiStart, this.aiDest);\n        this.updateTurnData();\n        this.update();\n    }\n\n    getBoard() {\n        return this.board;\n    }\n\n    getTurn() {\n        return this.turn;\n    }\n\n    toggleTurn() {\n        if (this.turn === \"W\") {\n            this.turn = \"B\"\n        }\n        else if (this.turn === \"B\") {\n            this.turn = \"W\"\n        }\n        else {\n            console.log(\"color error\")\n        }\n    }\n\n    togleNav(boolVal) {\n        this.navExpanded = boolVal;\n        this.setState({bValue: ! this.state.bValue});\n    }\n\n    togleHelpModal(boolVal) {\n        this.setState({isHelpModal: boolVal})\n    }\n\n    getHelpModalChild() {\n        return this.hmChildren[this.hmChildName]\n    }\n\n    setHelpText(helpTitle, helpText, hmChildName) {\n        this.helpTitle = helpTitle;\n        this.helpText = helpText;\n        this.hmChildName = hmChildName;\n    }\n\n    getCondition() {\n        if (this.resigned)\n            return \"resigned\"\n        else\n            return this.gameStatus.condition;\n    }\n\n    getColorLastMove() {\n        if (this.turn === \"W\") {\n            return \"B\"\n        }\n        else {\n            return \"W\"\n        }\n    }\n\n    update() {\n        this.setState({bValue: ! this.state.bValue});\n    }\n\n    updateSpecialCase(case_) {\n        this.specialCase = case_;\n    }\n\n    updatePrh(pieceRangeHighlight) {\n        this.pieceRangeHighlight = pieceRangeHighlight;\n    }\n\n    updateTurnData() {\n        /**called after a move is made.*/\n\n        var turnData;\n\n        if (this.gameType === \"council\") {\n            turnData = updateCouncil(this.board, this.jsonRecords, this.turn, this.playerType, this.pieceDefs, this.idDict)\n        }\n        else {\n            turnData = update(this.board, this.jsonRecords, this.turn, this.playerType, this.pieceDefs, this.idDict);\n        }\n\n        this.ranges = turnData['ranges']\n        this.enemyRanges = turnData['enemy_ranges'];\n        this.specialMoves.update(turnData['special_moves'])\n        this.aiStart = turnData['ai_start'];\n        this.aiDest = turnData['ai_dest'];\n        this.gameStatus.update(this.board, this.ranges, this.getColorLastMove(), turnData['npck']);\n    }\n\n    updateJsonRecords(start, dest) {\n\n        var pieceId = this.board[dest];\n        var fenId = pieceId[1].toLowerCase();\n\n        if (isPawn(this.captured)) {\n            delete this.jsonRecords.pawnHistories[this.captured];\n        }\n\n        if (fenId === 'p') {\n            this.jsonRecords.pawnHistories[pieceId].push(dest);\n            this.jsonRecords.numConsecutiveNonPawnMoves = 0;\n        }\n\n        else {\n            this.jsonRecords.numConsecutiveNonPawnMoves++;\n            if (fenId  === 'k' && king_starting_rf.includes(start))\n                this.jsonRecords.kingsMoved[start] = true;\n            if (fenId === 'r' && rook_starting_rf.includes(start))\n                this.jsonRecords.rooksMoved[start] = true;\n        }\n\n        return \n    }\n\n    updateFen(start, dest) {\n        this.fenObj.update(this.specialMoves, this.jsonRecords, start, dest, this.captured, this.turn);\n    }\n\n    save() {\n        \n        this.setUnsavedProgress(false);\n\n        var posFen = getFen(this.board)\n        var fenData = this.fenObj.getData()\n        var fen = getFullFen(posFen, fenData) \n        var records = this.jsonRecords.getRecords()\n        records['pawn_histories'] = replacePawnIdWithCurrentLoc(records['pawn_histories'])\n        var pieceDefs = gameDefsOffsetListsToStrs(this.pieceDefs)\n        var status = this.gameStatus.getStatus()\n\n        saveGame(this.gameName, {\n            fen: fen,\n            status: status,\n            game_type: this.gameType,\n            player_type: this.playerType,\n            promos: this.promoChoices,\n            json_records: records,\n            piece_defs: pieceDefs,\n            id_dict: this.idDict,\n        });\n    }\n\n    resign() {\n        if (! this.isGameOver()) {\n            this.gameStatus.updateByObj({\"status\":OVER, \"condition\":\"resigned\", \"winner\":this.getColorLastMove()});\n            this.update();\n        }\n    }\n\n    togleSaveAs(boolVal) {\n        this.saveAsModal = boolVal;\n    }\n\n    changeName(newName) {\n        this.gameName = newName;\n    }\n\n    setConfirmRedirect(boolVal, path) {\n        this.confirmRedirectModal = boolVal;\n        this.redirectPath = path;\n        this.update();\n    }\n\n    setUnsavedProgress(boolVal) {\n        this.unsaved = boolVal;\n    }\n\n    render() {\n        return (\n            <>\n                <Board gameroot={this} />\n                <Header turn={this.turn} \n                        condition={this.getCondition()} \n                        winner={this.gameStatus.winner} />\n                {this.specialCase === \"promo\" && (\n                    <Promo promoChoices={this.promoChoices}\n                           board={this.board}\n                           jsonRecords={this.jsonRecords}\n                           idDict={this.idDict}\n                           pieceDefs={this.pieceDefs}\n                           isCouncil={this.isCouncil}\n                           updateTurnData={this.updateTurnData}\n                           updateSpecialCase={this.updateSpecialCase}\n                           update={this.update}\n                           color={this.getColorLastMove()} \n                           aiColor={this.aiColor}\n                           pawnLoc={this.specialMoves.pendingPromo} />)}\n                {(this.aiDisplay && this.specialCase !== \"promo\" && ! this.isGameOver()) && (\n                    <AiDisplay aiStart={this.aiStart} \n                               aiDest={this.aiDest} \n                               aiMakeMove={this.aiMakeMove} />)}\n                <RangeDisplayTool board={this.board}\n                                  allRanges={{...this.ranges, ...this.enemyRanges}}\n                                  pieceDefs={this.pieceDefs} \n                                  idDict={this.idDict}\n                                  update={this.update} \n                                  updatePrh={this.updatePrh}\n                                  togleHelpModal={this.togleHelpModal}\n                                  setHelpText={this.setHelpText} />\n                <SaveResignTool gameName={this.gameName}\n                                gameType={this.gameType}\n                                playerType={this.playerType}\n                                save={this.save} \n                                update={this.update}\n                                resign={this.resign}\n                                updateSpecialCase={this.updateSpecialCase} \n                                togleHelpModal={this.togleHelpModal}\n                                togleSaveAs={this.togleSaveAs}\n                                setHelpText={this.setHelpText}/>\n                {this.saveAsModal && (<SaveAs togleSaveAs={this.togleSaveAs} \n                                              changeName={this.changeName} \n                                              update={this.update} \n                                              save={this.save} />)}\n                {this.specialCase === \"saving\" && (<Saving />)}\n                {this.specialCase === \"save-success\" && (\n                    <SaveSuccessfull update={this.update} \n                                     updateSpecialCase={this.updateSpecialCase} />)}\n                {this.navExpanded && (<NavBar navBarPosTop={0} \n                                              navBarPosLeft={368} \n                                              iconColor=\"b1faae\" \n                                              iconColorHover=\"b1faae\" \n                                              backgroundColor=\"green\" \n                                              backgroundColorSelected=\"darkgreen\" \n                                              border=\"1px solid darkgreen\"\n                                              currentPage={this.currentPage}\n                                              unsavedProgress={this.unsaved}\n                                              setConfirmRedirect={this.setConfirmRedirect}\n                                              togleHelpModal={this.togleHelpModal}\n                                              setHelpText={this.setHelpText} />)}\n                {this.confirmRedirectModal && (<ConfirmRedirect path={this.redirectPath} \n                                                                message={this.redirectMessage} \n                                                                setConfirmRedirect={this.setConfirmRedirect} />)}\n                {this.state.isHelpModal && (<HelpModal helpTitle={this.helpTitle} \n                                                       helpText={this.helpText} \n                                                       togleHelpModal={this.togleHelpModal}>\n                                                {this.getHelpModalChild()}\n                                            </HelpModal> )}\n            </>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}