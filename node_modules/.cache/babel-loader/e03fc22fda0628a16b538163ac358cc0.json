{"ast":null,"code":"import { getSqrCase } from \"../../helpers/getSqrCase\";\nimport { isPawn } from \"../gameRootHelpers/isPawn\";\nimport { step1sqr0d, step1sqr180d } from \"../../helpers/stepFuncs\";\nimport { OOB, EMPTY, FRIEND, ENEMY } from \"../../helpers/sqrCases\";\nexport function enPassantMove(gameroot, start, dest, color) {\n  /**\n  start: start square of pawn capturing by en-passant\n  dest: destination square of pawn capturing by en-passant\n  color: color of pawn making capture\n  x: x coordinate of square either directly left or directly right of start\n  y: y coordinate unchanged, same as start. returned with x.\n  */\n  if (gameroot.specialMoves.isEnPassant([start, dest])) {\n    var rf0 = step1sqr0d(start);\n    var rf180 = step1sqr180d(start);\n\n    if (getSqrCase(gameroot.board, rf0, color) === ENEMY && isPawn(gameroot.board[rf0]) && gameroot.jsonRecords.isLastPawnMove(rf0)) {\n      gameroot.captured = gameroot.board[rf0];\n      gameroot.board[rf0] = '#';\n      delete gameroot.jsonRecords.pawnHistories[gameroot.captured];\n      gameroot.specialMoves.removeEnpassant([start, dest]);\n    } else if (getSqrCase(gameroot.board, rf180, color) === ENEMY && isPawn(gameroot.board[rf180]) && gameroot.jsonRecords.isLastPawnMove(rf180)) {\n      gameroot.captured = gameroot.board[rf180];\n      gameroot.board[rf180] = '#';\n      delete gameroot.jsonRecords.pawnHistories[gameroot.captured];\n      gameroot.specialMoves.removeEnpassant([start, dest]);\n    }\n\n    gameroot.jsonRecords.lastPawnMove = dest;\n  } else if (isPawn(gameroot.board[dest])) {\n    gameroot.jsonRecords.lastPawnMove = dest;\n  }\n}","map":{"version":3,"sources":["/home/brian/ChessKingsCouncil/app/src/Components/GameRoot/Move/enPassantMove.js"],"names":["getSqrCase","isPawn","step1sqr0d","step1sqr180d","OOB","EMPTY","FRIEND","ENEMY","enPassantMove","gameroot","start","dest","color","specialMoves","isEnPassant","rf0","rf180","board","jsonRecords","isLastPawnMove","captured","pawnHistories","removeEnpassant","lastPawnMove"],"mappings":"AAAA,SAASA,UAAT,QAA2B,0BAA3B;AACA,SAASC,MAAT,QAAuB,2BAAvB;AACA,SAAQC,UAAR,EAAoBC,YAApB,QAAuC,yBAAvC;AACA,SAASC,GAAT,EAAcC,KAAd,EAAqBC,MAArB,EAA6BC,KAA7B,QAA0C,wBAA1C;AAGA,OAAO,SAASC,aAAT,CAAuBC,QAAvB,EAAiCC,KAAjC,EAAwCC,IAAxC,EAA8CC,KAA9C,EAAqD;AACxD;;;;;;;AAOA,MAAIH,QAAQ,CAACI,YAAT,CAAsBC,WAAtB,CAAkC,CAACJ,KAAD,EAAQC,IAAR,CAAlC,CAAJ,EAAsD;AAElD,QAAII,GAAG,GAAGb,UAAU,CAACQ,KAAD,CAApB;AACA,QAAIM,KAAK,GAAGb,YAAY,CAACO,KAAD,CAAxB;;AAEA,QAAIV,UAAU,CAACS,QAAQ,CAACQ,KAAV,EAAiBF,GAAjB,EAAsBH,KAAtB,CAAV,KAA2CL,KAA3C,IAAoDN,MAAM,CAACQ,QAAQ,CAACQ,KAAT,CAAeF,GAAf,CAAD,CAA1D,IAAmFN,QAAQ,CAACS,WAAT,CAAqBC,cAArB,CAAoCJ,GAApC,CAAvF,EAAiI;AAC7HN,MAAAA,QAAQ,CAACW,QAAT,GAAoBX,QAAQ,CAACQ,KAAT,CAAeF,GAAf,CAApB;AACAN,MAAAA,QAAQ,CAACQ,KAAT,CAAeF,GAAf,IAAsB,GAAtB;AACA,aAAON,QAAQ,CAACS,WAAT,CAAqBG,aAArB,CAAmCZ,QAAQ,CAACW,QAA5C,CAAP;AACAX,MAAAA,QAAQ,CAACI,YAAT,CAAsBS,eAAtB,CAAsC,CAACZ,KAAD,EAAQC,IAAR,CAAtC;AACH,KALD,MAOK,IAAIX,UAAU,CAACS,QAAQ,CAACQ,KAAV,EAAiBD,KAAjB,EAAwBJ,KAAxB,CAAV,KAA6CL,KAA7C,IAAsDN,MAAM,CAACQ,QAAQ,CAACQ,KAAT,CAAeD,KAAf,CAAD,CAA5D,IAAuFP,QAAQ,CAACS,WAAT,CAAqBC,cAArB,CAAoCH,KAApC,CAA3F,EAAuI;AACxIP,MAAAA,QAAQ,CAACW,QAAT,GAAoBX,QAAQ,CAACQ,KAAT,CAAeD,KAAf,CAApB;AACAP,MAAAA,QAAQ,CAACQ,KAAT,CAAeD,KAAf,IAAwB,GAAxB;AACA,aAAOP,QAAQ,CAACS,WAAT,CAAqBG,aAArB,CAAmCZ,QAAQ,CAACW,QAA5C,CAAP;AACAX,MAAAA,QAAQ,CAACI,YAAT,CAAsBS,eAAtB,CAAsC,CAACZ,KAAD,EAAQC,IAAR,CAAtC;AACH;;AAEDF,IAAAA,QAAQ,CAACS,WAAT,CAAqBK,YAArB,GAAoCZ,IAApC;AACH,GApBD,MAsBK,IAAIV,MAAM,CAACQ,QAAQ,CAACQ,KAAT,CAAeN,IAAf,CAAD,CAAV,EAAkC;AACnCF,IAAAA,QAAQ,CAACS,WAAT,CAAqBK,YAArB,GAAoCZ,IAApC;AACH;AAEJ","sourcesContent":["import { getSqrCase } from \"../../helpers/getSqrCase\";\nimport { isPawn } from \"../gameRootHelpers/isPawn\";\nimport {step1sqr0d, step1sqr180d} from \"../../helpers/stepFuncs\";\nimport { OOB, EMPTY, FRIEND, ENEMY } from \"../../helpers/sqrCases\";\n\n\nexport function enPassantMove(gameroot, start, dest, color) {\n    /**\n    start: start square of pawn capturing by en-passant\n    dest: destination square of pawn capturing by en-passant\n    color: color of pawn making capture\n    x: x coordinate of square either directly left or directly right of start\n    y: y coordinate unchanged, same as start. returned with x.\n    */\n    if (gameroot.specialMoves.isEnPassant([start, dest])) {\n\n        var rf0 = step1sqr0d(start)  \n        var rf180 = step1sqr180d(start)\n    \n        if (getSqrCase(gameroot.board, rf0, color) === ENEMY && isPawn(gameroot.board[rf0]) && gameroot.jsonRecords.isLastPawnMove(rf0)) {\n            gameroot.captured = gameroot.board[rf0]\n            gameroot.board[rf0] = '#'\n            delete gameroot.jsonRecords.pawnHistories[gameroot.captured];\n            gameroot.specialMoves.removeEnpassant([start, dest]);\n        }\n    \n        else if (getSqrCase(gameroot.board, rf180, color) === ENEMY && isPawn(gameroot.board[rf180]) && gameroot.jsonRecords.isLastPawnMove(rf180)) {\n            gameroot.captured = gameroot.board[rf180]\n            gameroot.board[rf180] = '#'\n            delete gameroot.jsonRecords.pawnHistories[gameroot.captured];\n            gameroot.specialMoves.removeEnpassant([start, dest]);\n        }\n    \n        gameroot.jsonRecords.lastPawnMove = dest;\n    }\n    \n    else if (isPawn(gameroot.board[dest])) {\n        gameroot.jsonRecords.lastPawnMove = dest;\n    }\n\n}"]},"metadata":{},"sourceType":"module"}