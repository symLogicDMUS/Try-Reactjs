{"ast":null,"code":"import { isPin } from \"../isPin\";\nimport { getPin } from \"../getPin\";\nimport { getPieceType } from \"../../pieceType/getPieceType\";\nimport { getResetPieceDicts } from \"../../getters/getResetPieceDicts\";\nexport function getPins(pdDict, pins) {\n  /**get dict, let key = pieceId, let value = coordList\n     pieceId: a pinned piece \n     coordList: path the piece is pinned to.\n  */\n  //var pins = {}\n  var pieceId, coordPath;\n\n  for (var pathData of Object.values(pdDict)) {\n    if (isPin(pathData)) {\n      [pieceId, coordPath] = getPin(pathData);\n\n      if (getPieceType(pieceId) === 'K') {\n        continue;\n      }\n\n      pins[pieceId] = coordPath;\n    }\n  }\n\n  return pins;\n} // module.exports = getPins;\n\n/** for node.js\nif (require.main === module) {\n\n    import {getStandardPieceDefs} from \"../../testObjects/getStandardPieceDefs\";\n    import {getStandardIdDict} from \"../../testObjects/getStandardIdDict\";\n    import {printBoard} from \"../../printers/printBoard\";\n    import {getPathdataDict} from \"../../pathsInfo/top/getpathDataDict\";\n    import {sampleBoardDicts} from \"../../testObjects/sampleBoardDicts\";\n    import {mapListXyToRf} from \"../../coordType/mapListXyToRf\";\n    import {getPieceLoc} from \"../../helpers/getPieceLoc\";\n    import {getPieceLocs} from \"../../helpers/getPieceLocs\";\n    import {allExcept} from \"../../helpers/allExcept\";\n    import {mapDictListXyToRf} from \"../../coordType/mapDictListXyToRf\"\n    import {mapDictListRfToXy} from \"../../coordType/mapDictListXyToRf\"\n    import {mapListRfToXy} from \"../../coordType/mapListRfToXy\";\n\n    var rangeDefs = getStandardPieceDefs()\n    var idDict = getStandardIdDict()\n    var pins, board, pdDict;\n    var allPins = []\n    var ids = []\n\n\n    board = sampleBoardDicts[\"check_example3\"];\n    pdDict = getPathdataDict(board, [4, 4], 'W', rangeDefs, idDict)\n    var [initRanges, pins, mtRestricts, finalRanges] = getResetPieceDicts(board, 'W')\n    pins = getPins(pdDict, pins)\n    allPins = []\n    ids = []\n    for (var id of Object.keys(pins)) {\n        allPins.push(...allExcept(mapListXyToRf(pins[id]), getPieceLoc(board, id)))\n        ids.push(id)\n    }\n    printBoard(board, \"\\ncheck_example3\", getPieceLocs(board, ids), null, null, allPins)\n    console.log(pins)\n\n    board = sampleBoardDicts[\"knight_threat2\"];\n    pdDict = getPathdataDict(board, [5, 1], 'W', rangeDefs, idDict)\n    var [initRanges, pins, mtRestricts, finalRanges] = getResetPieceDicts(board, 'W')\n    pins = getPins(pdDict, pins)\n    allPins = []\n    ids = []\n    for (var id of Object.keys(pins)) {\n        allPins.push(...allExcept(mapListXyToRf(pins[id]), getPieceLoc(board, id)))\n        ids.push(id)\n    }\n    printBoard(board, \"\\nknight_threat2\", getPieceLocs(board, ids), null, null, allPins)\n    console.log(pins)\n\n    board = sampleBoardDicts[\"super_checkmate_impossible_example\"];\n    pdDict = getPathdataDict(board, [6, 6], 'W', rangeDefs, idDict)\n    var [initRanges, pins, mtRestricts, finalRanges] = getResetPieceDicts(board, 'W')\n    pins = getPins(pdDict, pins)\n    allPins = []\n    ids = []\n    for (var id of Object.keys(pins)) {\n        allPins.push(...allExcept(mapListXyToRf(pins[id]), getPieceLoc(board, id)))\n        ids.push(id)\n    }\n    printBoard(board, \"\\nsuper_checkmate_impossible_example\", getPieceLocs(board, ids), null, null, allPins)\n    console.log(pins)\n\n    board = sampleBoardDicts[\"pinned_ex1\"];\n    pdDict = getPathdataDict(board, [4, 7], 'W', rangeDefs, idDict)\n    var [initRanges, pins, mtRestricts, finalRanges] = getResetPieceDicts(board, 'W')\n    pins = getPins(pdDict, pins)\n    allPins = []\n    ids = []\n    for (var id of Object.keys(pins)) {\n        allPins.push(...allExcept(mapListXyToRf(pins[id]), getPieceLoc(board, id)))\n        ids.push(id)\n    }\n    printBoard(board, \"\\npinned_ex1\", getPieceLocs(board, ids), null, null, allPins)\n    console.log(pins)\n\n    board = sampleBoardDicts[\"pinned_ex2\"];\n    pdDict = getPathdataDict(board, [4, 5], 'W', rangeDefs, idDict)\n    var [initRanges, pins, mtRestricts, finalRanges] = getResetPieceDicts(board, 'W')\n    pins = getPins(pdDict, pins)\n    allPins = []\n    ids = []\n    for (var id of Object.keys(pins)) {\n        allPins.push(...allExcept(mapListXyToRf(pins[id]), getPieceLoc(board, id)))\n        ids.push(id)\n    }\n    printBoard(board, \"\\npinned_ex2\", getPieceLocs(board, ids), null, null, allPins)\n    console.log(pins)\n\n}\n*/","map":{"version":3,"sources":["/home/brian/ChessKingsCouncil/app/src/game_logic/pins/top/getPins.js"],"names":["isPin","getPin","getPieceType","getResetPieceDicts","getPins","pdDict","pins","pieceId","coordPath","pathData","Object","values"],"mappings":"AAAA,SAAQA,KAAR,QAAoB,UAApB;AACA,SAAQC,MAAR,QAAqB,WAArB;AACA,SAAQC,YAAR,QAA2B,8BAA3B;AACA,SAAQC,kBAAR,QAAiC,kCAAjC;AAGA,OAAO,SAASC,OAAT,CAAiBC,MAAjB,EAAyBC,IAAzB,EAA+B;AAClC;;;;AAIA;AACA,MAAIC,OAAJ,EAAaC,SAAb;;AACA,OAAK,IAAIC,QAAT,IAAqBC,MAAM,CAACC,MAAP,CAAcN,MAAd,CAArB,EAA4C;AACxC,QAAIL,KAAK,CAACS,QAAD,CAAT,EAAqB;AACjB,OAACF,OAAD,EAAUC,SAAV,IAAuBP,MAAM,CAACQ,QAAD,CAA7B;;AACA,UAAIP,YAAY,CAACK,OAAD,CAAZ,KAA0B,GAA9B,EAAmC;AAC/B;AACH;;AACDD,MAAAA,IAAI,CAACC,OAAD,CAAJ,GAAgBC,SAAhB;AACH;AACJ;;AACD,SAAOF,IAAP;AACH,C,CAED;;AAEA","sourcesContent":["import {isPin} from \"../isPin\";\nimport {getPin} from \"../getPin\";\nimport {getPieceType} from \"../../pieceType/getPieceType\";\nimport {getResetPieceDicts} from \"../../getters/getResetPieceDicts\";\n\n\nexport function getPins(pdDict, pins) {\n    /**get dict, let key = pieceId, let value = coordList\n       pieceId: a pinned piece \n       coordList: path the piece is pinned to.\n    */\n    //var pins = {}\n    var pieceId, coordPath;\n    for (var pathData of Object.values(pdDict)) {\n        if (isPin(pathData)) {\n            [pieceId, coordPath] = getPin(pathData);\n            if (getPieceType(pieceId) === 'K') {\n                continue\n            }\n            pins[pieceId] = coordPath;\n        }\n    }\n    return pins;\n}\n\n// module.exports = getPins;\n\n/** for node.js\nif (require.main === module) {\n\n    import {getStandardPieceDefs} from \"../../testObjects/getStandardPieceDefs\";\n    import {getStandardIdDict} from \"../../testObjects/getStandardIdDict\";\n    import {printBoard} from \"../../printers/printBoard\";\n    import {getPathdataDict} from \"../../pathsInfo/top/getpathDataDict\";\n    import {sampleBoardDicts} from \"../../testObjects/sampleBoardDicts\";\n    import {mapListXyToRf} from \"../../coordType/mapListXyToRf\";\n    import {getPieceLoc} from \"../../helpers/getPieceLoc\";\n    import {getPieceLocs} from \"../../helpers/getPieceLocs\";\n    import {allExcept} from \"../../helpers/allExcept\";\n    import {mapDictListXyToRf} from \"../../coordType/mapDictListXyToRf\"\n    import {mapDictListRfToXy} from \"../../coordType/mapDictListXyToRf\"\n    import {mapListRfToXy} from \"../../coordType/mapListRfToXy\";\n\n    var rangeDefs = getStandardPieceDefs()\n    var idDict = getStandardIdDict()\n    var pins, board, pdDict;\n    var allPins = []\n    var ids = []\n\n\n    board = sampleBoardDicts[\"check_example3\"];\n    pdDict = getPathdataDict(board, [4, 4], 'W', rangeDefs, idDict)\n    var [initRanges, pins, mtRestricts, finalRanges] = getResetPieceDicts(board, 'W')\n    pins = getPins(pdDict, pins)\n    allPins = []\n    ids = []\n    for (var id of Object.keys(pins)) {\n        allPins.push(...allExcept(mapListXyToRf(pins[id]), getPieceLoc(board, id)))\n        ids.push(id)\n    }\n    printBoard(board, \"\\ncheck_example3\", getPieceLocs(board, ids), null, null, allPins)\n    console.log(pins)\n\n    board = sampleBoardDicts[\"knight_threat2\"];\n    pdDict = getPathdataDict(board, [5, 1], 'W', rangeDefs, idDict)\n    var [initRanges, pins, mtRestricts, finalRanges] = getResetPieceDicts(board, 'W')\n    pins = getPins(pdDict, pins)\n    allPins = []\n    ids = []\n    for (var id of Object.keys(pins)) {\n        allPins.push(...allExcept(mapListXyToRf(pins[id]), getPieceLoc(board, id)))\n        ids.push(id)\n    }\n    printBoard(board, \"\\nknight_threat2\", getPieceLocs(board, ids), null, null, allPins)\n    console.log(pins)\n\n    board = sampleBoardDicts[\"super_checkmate_impossible_example\"];\n    pdDict = getPathdataDict(board, [6, 6], 'W', rangeDefs, idDict)\n    var [initRanges, pins, mtRestricts, finalRanges] = getResetPieceDicts(board, 'W')\n    pins = getPins(pdDict, pins)\n    allPins = []\n    ids = []\n    for (var id of Object.keys(pins)) {\n        allPins.push(...allExcept(mapListXyToRf(pins[id]), getPieceLoc(board, id)))\n        ids.push(id)\n    }\n    printBoard(board, \"\\nsuper_checkmate_impossible_example\", getPieceLocs(board, ids), null, null, allPins)\n    console.log(pins)\n\n    board = sampleBoardDicts[\"pinned_ex1\"];\n    pdDict = getPathdataDict(board, [4, 7], 'W', rangeDefs, idDict)\n    var [initRanges, pins, mtRestricts, finalRanges] = getResetPieceDicts(board, 'W')\n    pins = getPins(pdDict, pins)\n    allPins = []\n    ids = []\n    for (var id of Object.keys(pins)) {\n        allPins.push(...allExcept(mapListXyToRf(pins[id]), getPieceLoc(board, id)))\n        ids.push(id)\n    }\n    printBoard(board, \"\\npinned_ex1\", getPieceLocs(board, ids), null, null, allPins)\n    console.log(pins)\n\n    board = sampleBoardDicts[\"pinned_ex2\"];\n    pdDict = getPathdataDict(board, [4, 5], 'W', rangeDefs, idDict)\n    var [initRanges, pins, mtRestricts, finalRanges] = getResetPieceDicts(board, 'W')\n    pins = getPins(pdDict, pins)\n    allPins = []\n    ids = []\n    for (var id of Object.keys(pins)) {\n        allPins.push(...allExcept(mapListXyToRf(pins[id]), getPieceLoc(board, id)))\n        ids.push(id)\n    }\n    printBoard(board, \"\\npinned_ex2\", getPieceLocs(board, ids), null, null, allPins)\n    console.log(pins)\n\n}\n*/"]},"metadata":{},"sourceType":"module"}