{"ast":null,"code":"var _jsxFileName = \"/home/brian/ChessKingsCouncil/app/src/Components/GameRoot/Modals/Promo.jsx\";\nimport React from \"react\";\nimport ScrollMenu from 'react-horizontal-scrolling-menu';\nimport { PromoChoice } from \"../Components/PromoChoice\";\nimport { AcceptPromo } from \"../Components/AcceptPromo\";\nimport { shuffle } from \"../../helpers/shuffleArray\";\nimport \"../css/AcceptPromo.css\";\n\nconst Arrow = ({\n  text,\n  className\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: className,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }\n  }, text);\n};\n\nconst ArrowLeft = Arrow({\n  text: '<',\n  className: 'arrow-prev'\n});\nconst ArrowRight = Arrow({\n  text: '>',\n  className: 'arrow-next'\n});\nexport class Promo extends React.Component {\n  /**\n   * note: once pawn has moved to a backrow square, color has already switched to \n   * the next player before it is promoted. must use what color attribute just was.\n   * */\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected: null\n    };\n    this.aiPromoComplete = false;\n    this.standardPromoNames = [\"Queen\", \"Rook\", \"Bishop\", \"Knight\"];\n    this.standardPromoNameDict = {\n      \"Queen\": \"q\",\n      \"Rook\": \"r\",\n      \"Bishop\": \"b\",\n      \"Knight\": \"n\"\n    };\n    this.onSelect = this.onSelect.bind(this);\n    this.promote = this.promote.bind(this);\n  }\n\n  getPromoChoices() {\n    let pieceName = null;\n    let imgName = null;\n    let promoChoices = [];\n\n    for (var id of Object.keys(this.props.idDict)) {\n      pieceName = this.props.idDict[id];\n\n      if (this.props.promoChoices.includes(pieceName)) {\n        imgName = this.props.pieceDefs[pieceName][this.props.color][\"img\"];\n        promoChoices.push( /*#__PURE__*/React.createElement(PromoChoice, {\n          key: id,\n          imgName: imgName,\n          selected: this.state.selected,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 35\n          }\n        }));\n      }\n    }\n\n    return promoChoices;\n  }\n\n  aiPromoChoices() {\n    let pieceName = null;\n    let promoChoices = [];\n\n    for (var id of Object.keys(this.props.idDict)) {\n      pieceName = this.props.idDict[id];\n\n      if (this.props.promoChoices.includes(pieceName)) {\n        promoChoices.push(id);\n      }\n    }\n\n    return promoChoices;\n  }\n\n  getIdNumber(idChoice) {\n    /**Pawn promotion means we are adding another piece, \n     * idNumber is how many of that piece for that color \n     * there is now\n     **/\n    let matches = Object.values(this.props.board).filter(pieceId => pieceId.startsWith(this.props.color + idChoice.toUpperCase()));\n    let idNumber = matches.length + 1;\n    return idNumber;\n  }\n\n  getNewId(idNumber, idChoice) {\n    return this.props.color + idChoice.toUpperCase() + idNumber;\n  }\n\n  removeHistory() {\n    let pawnId = this.props.board[this.pawnLoc];\n    delete this.props.jsonRecords.pawnHistories[pawnId];\n  }\n\n  replacePawn(pawnLoc, newId) {\n    this.props.board[pawnLoc] = newId;\n    return;\n  }\n\n  updateGameRoot() {\n    this.props.updateTurnData();\n    this.props.updateSpecialCase(\"none\");\n    this.props.update();\n  }\n\n  promote() {\n    let idNumber = this.getIdNumber(this.state.selected);\n    let newId = this.getNewId(idNumber, this.state.selected);\n    this.removeHistory();\n    this.replacePawn(this.pawnLoc, newId);\n    this.updateGameRoot();\n    this.props.update();\n  }\n\n  aiPromote() {\n    let ids = this.aiPromoChoices();\n    ids = shuffle(ids);\n    let idType = ids[0];\n    let idNumber = this.getIdNumber(idType);\n    let newId = this.getNewId(idNumber, idType);\n    this.removeHistory();\n    this.replacePawn(this.pawnLoc, newId);\n    this.updateGameRoot();\n    this.aiPromoComplete = true;\n    this.props.update();\n  }\n\n  noStandardPieces() {\n    for (var pieceName of Object.values(this.props.idDict)) {\n      if (this.standardPromoNames.includes(pieceName)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  onSelect(key) {\n    this.setState({\n      selected: key\n    });\n  }\n\n  render() {\n    if (this.props.promoChoices.length === 0 && this.noStandardPieces()) {\n      this.props.updateSpecialCase(\"none\");\n      this.props.update();\n    }\n\n    this.pawnLoc = this.props.pawnLoc;\n    let promoChoices = this.getPromoChoices();\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"promo-modal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"img-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ScrollMenu, {\n      data: promoChoices,\n      selected: this.state.selected,\n      arrowLeft: ArrowLeft,\n      arrowRight: ArrowRight,\n      onSelect: this.onSelect,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(AcceptPromo, {\n      promote: this.promote,\n      selected: this.state.selected,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }\n    }), this.props.color === this.props.aiColor && !this.aiPromoComplete && this.aiPromote());\n  }\n\n}","map":{"version":3,"sources":["/home/brian/ChessKingsCouncil/app/src/Components/GameRoot/Modals/Promo.jsx"],"names":["React","ScrollMenu","PromoChoice","AcceptPromo","shuffle","Arrow","text","className","ArrowLeft","ArrowRight","Promo","Component","constructor","props","state","selected","aiPromoComplete","standardPromoNames","standardPromoNameDict","onSelect","bind","promote","getPromoChoices","pieceName","imgName","promoChoices","id","Object","keys","idDict","includes","pieceDefs","color","push","aiPromoChoices","getIdNumber","idChoice","matches","values","board","filter","pieceId","startsWith","toUpperCase","idNumber","length","getNewId","removeHistory","pawnId","pawnLoc","jsonRecords","pawnHistories","replacePawn","newId","updateGameRoot","updateTurnData","updateSpecialCase","update","aiPromote","ids","idType","noStandardPieces","key","setState","render","aiColor"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ScrollMenu from 'react-horizontal-scrolling-menu';\nimport {PromoChoice} from \"../Components/PromoChoice\";\nimport {AcceptPromo} from \"../Components/AcceptPromo\";\nimport {shuffle} from \"../../helpers/shuffleArray\";\nimport \"../css/AcceptPromo.css\";\n\nconst Arrow = ({ text, className }) => {\n    return (\n      <div\n        className={className}\n      >{text}</div>\n    );\n};\n      \nconst ArrowLeft = Arrow({ text: '<', className: 'arrow-prev' });\nconst ArrowRight = Arrow({ text: '>', className: 'arrow-next' });\n\nexport class Promo extends React.Component {\n\n    /**\n     * note: once pawn has moved to a backrow square, color has already switched to \n     * the next player before it is promoted. must use what color attribute just was.\n     * */\n    constructor(props) {\n        super(props);\n        this.state = {selected: null};\n        this.aiPromoComplete = false;\n        this.standardPromoNames = [\"Queen\",\"Rook\",\"Bishop\",\"Knight\"];\n        this.standardPromoNameDict = {\n            \"Queen\": \"q\",\n            \"Rook\": \"r\",\n            \"Bishop\": \"b\",\n            \"Knight\": \"n\",\n        };\n        this.onSelect = this.onSelect.bind(this);\n        this.promote = this.promote.bind(this);\n    }\n\n    getPromoChoices() {\n        let pieceName = null;\n        let imgName = null;\n        let promoChoices = [];\n        for (var id of Object.keys(this.props.idDict)) {\n            pieceName = this.props.idDict[id];\n            if (this.props.promoChoices.includes(pieceName)) {\n                imgName = this.props.pieceDefs[pieceName][this.props.color][\"img\"];\n                promoChoices.push(<PromoChoice  \n                    key={id}\n                    imgName={imgName}\n                    selected={this.state.selected}\n                />);\n            }\n        }\n\n        return promoChoices;\n    }\n\n    aiPromoChoices() {\n        let pieceName = null;\n        let promoChoices = [];\n        for (var id of Object.keys(this.props.idDict)) {\n            pieceName = this.props.idDict[id];\n            if (this.props.promoChoices.includes(pieceName)) {\n                promoChoices.push(id);\n            }\n        }\n\n        return promoChoices;\n    }\n\n\n    getIdNumber(idChoice) {\n        /**Pawn promotion means we are adding another piece, \n         * idNumber is how many of that piece for that color \n         * there is now\n         **/\n        let matches = Object.values(this.props.board).filter(pieceId => \n            pieceId.startsWith( this.props.color + idChoice.toUpperCase()))\n        let idNumber = matches.length + 1;\n        return idNumber;\n    }\n\n    getNewId(idNumber, idChoice) {\n        return this.props.color + idChoice.toUpperCase() + idNumber;\n    }\n\n    removeHistory() {\n        let pawnId = this.props.board[this.pawnLoc];\n        delete this.props.jsonRecords.pawnHistories[pawnId];\n    }\n\n    replacePawn(pawnLoc, newId) {\n        this.props.board[pawnLoc] = newId;\n        return;\n    }\n\n    updateGameRoot() {\n        this.props.updateTurnData()\n        this.props.updateSpecialCase(\"none\");\n        this.props.update();\n    }\n \n    promote() {\n        let idNumber = this.getIdNumber(this.state.selected);\n        let newId = this.getNewId(idNumber, this.state.selected);\n        this.removeHistory();\n        this.replacePawn(this.pawnLoc, newId);\n        this.updateGameRoot();\n        this.props.update();\n    }\n\n    aiPromote() {\n        let ids = this.aiPromoChoices();\n        ids = shuffle(ids);\n        let idType = ids[0];\n        let idNumber = this.getIdNumber(idType);\n        let newId = this.getNewId(idNumber, idType);\n        this.removeHistory();\n        this.replacePawn(this.pawnLoc, newId);\n        this.updateGameRoot();\n        this.aiPromoComplete = true;\n        this.props.update();\n    }\n\n\n    noStandardPieces() {\n        for (var pieceName of Object.values(this.props.idDict)) {\n            if (this.standardPromoNames.includes(pieceName)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    onSelect(key) {\n        this.setState({selected: key});\n    }\n\n    render() {\n\n        if (this.props.promoChoices.length === 0 && this.noStandardPieces()) {\n            this.props.updateSpecialCase(\"none\");\n            this.props.update();\n        }\n\n        this.pawnLoc = this.props.pawnLoc;\n        let promoChoices = this.getPromoChoices();\n\n        return (\n            <div className=\"promo-modal\">\n                <div className=\"img-group\">\n                    <ScrollMenu \n                     data={promoChoices}\n                     selected={this.state.selected}\n                     arrowLeft={ArrowLeft}\n                     arrowRight={ArrowRight}\n                     onSelect={this.onSelect}\n                    />\n                </div>\n                <AcceptPromo promote={this.promote} selected={this.state.selected} />\n                {this.props.color === this.props.aiColor && ! this.aiPromoComplete && (this.aiPromote())}\n            </div>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}