{"ast":null,"code":"import { rfToXy } from \"../coordType/crdCnvrt\";\nimport { dist } from \"../helpers/formulas\";\nexport function getPotentialPawnThreats(board, sqr, color) {\n  /* return list of locations that might be pawn attacking king **/\n  if (color === 'W') {\n    return Object.keys(board).filter(sqr2 => {\n      sqr2 = rfToXy(sqr2);\n      return sqr2[1] > sqr[1] && dist(sqr, sqr2) === Math.sqrt(2);\n    });\n  } else if (color === 'B') {\n    return Object.keys(board).filter(sqr2 => {\n      sqr2 = rfToXy(sqr2);\n      return sqr2[1] < sqr[1] && dist(sqr, sqr2) === Math.sqrt(2);\n    });\n  } else {\n    console.log('error: color ! recognized\\n');\n    return -1;\n  }\n} // module.exports = getPotentialPawnThreats;\n\n/** for node.js\nif (require.main === module) {\n\n    import {sampleBoardDicts} from \"../testObjects/sampleBoardDicts\";\n    import {printBoard} from \"../printers/printBoard\";\n\n    var board = sampleBoardDicts['pawn_threat1']\n    \n    // test 1:\n    printBoard(board, \"\\nwhite\", getPotentialPawnThreats(board, [6, 3], 'W'))\n    console.log('\\n')\n    \n    // test 2:\n    printBoard(board, \"\\nblack\", getPotentialPawnThreats(board, [3, 5], 'B'))\n\n}\n*/","map":{"version":3,"sources":["/home/brian/ChessKingsCouncil/app/src/game_logic/threatArea/getPotentialPawnThreats.js"],"names":["rfToXy","dist","getPotentialPawnThreats","board","sqr","color","Object","keys","filter","sqr2","Math","sqrt","console","log"],"mappings":"AAAA,SAAQA,MAAR,QAAqB,uBAArB;AACA,SAAQC,IAAR,QAAmB,qBAAnB;AAIA,OAAO,SAASC,uBAAT,CAAiCC,KAAjC,EAAwCC,GAAxC,EAA6CC,KAA7C,EAAoD;AACvD;AAEA,MAAIA,KAAK,KAAK,GAAd,EAAmB;AACf,WAAOC,MAAM,CAACC,IAAP,CAAYJ,KAAZ,EAAmBK,MAAnB,CAA0BC,IAAI,IAAI;AACrCA,MAAAA,IAAI,GAAGT,MAAM,CAACS,IAAD,CAAb;AACA,aAAOA,IAAI,CAAC,CAAD,CAAJ,GAAUL,GAAG,CAAC,CAAD,CAAb,IAAqBH,IAAI,CAACG,GAAD,EAAMK,IAAN,CAAJ,KAAoBC,IAAI,CAACC,IAAL,CAAU,CAAV,CAAhD;AACH,KAHM,CAAP;AAIH,GALD,MAOK,IAAIN,KAAK,KAAK,GAAd,EAAmB;AACpB,WAAOC,MAAM,CAACC,IAAP,CAAYJ,KAAZ,EAAmBK,MAAnB,CAA0BC,IAAI,IAAI;AACrCA,MAAAA,IAAI,GAAGT,MAAM,CAACS,IAAD,CAAb;AACA,aAAOA,IAAI,CAAC,CAAD,CAAJ,GAAUL,GAAG,CAAC,CAAD,CAAb,IAAqBH,IAAI,CAACG,GAAD,EAAMK,IAAN,CAAJ,KAAoBC,IAAI,CAACC,IAAL,CAAU,CAAV,CAAhD;AACH,KAHM,CAAP;AAIH,GALI,MAOA;AACDC,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACA,WAAO,CAAC,CAAR;AACH;AACJ,C,CAED;;AAEA","sourcesContent":["import {rfToXy} from \"../coordType/crdCnvrt\";\nimport {dist} from \"../helpers/formulas\";\n\n\n\nexport function getPotentialPawnThreats(board, sqr, color) {\n    /* return list of locations that might be pawn attacking king **/\n\n    if (color === 'W') {\n        return Object.keys(board).filter(sqr2 => {\n            sqr2 = rfToXy(sqr2)\n            return sqr2[1] > sqr[1] &&  dist(sqr, sqr2) === Math.sqrt(2)\n        })\n    }\n\n    else if (color === 'B') {\n        return Object.keys(board).filter(sqr2 => {\n            sqr2 = rfToXy(sqr2)\n            return sqr2[1] < sqr[1] &&  dist(sqr, sqr2) === Math.sqrt(2)\n        })\n    }\n\n    else {\n        console.log('error: color ! recognized\\n')\n        return -1\n    }\n}\n\n// module.exports = getPotentialPawnThreats;\n\n/** for node.js\nif (require.main === module) {\n\n    import {sampleBoardDicts} from \"../testObjects/sampleBoardDicts\";\n    import {printBoard} from \"../printers/printBoard\";\n\n    var board = sampleBoardDicts['pawn_threat1']\n    \n    // test 1:\n    printBoard(board, \"\\nwhite\", getPotentialPawnThreats(board, [6, 3], 'W'))\n    console.log('\\n')\n    \n    // test 2:\n    printBoard(board, \"\\nblack\", getPotentialPawnThreats(board, [3, 5], 'B'))\n\n}\n*/"]},"metadata":{},"sourceType":"module"}