{"ast":null,"code":"export function parseStatusStr(statusStr) {\n  /*break the status part of the fen string into its components &&  return**/\n  let turn = statusStr.match(/(w|b)/g)[0];\n  statusStr = statusStr.replace(turn, '');\n  let castleAvail = statusStr.match(/(KQkq|KQk|KQq|KQ|Qkq|Qk|Qq|Q|Kkq|Kk|Kq|K|kq|k|q|-)/g)[0];\n  statusStr = statusStr.replace(castleAvail, '', 1);\n  let enPassantAvail = statusStr.match(/(([a-h][1-8])|-)/g)[0];\n  statusStr = statusStr.replace(enPassantAvail, '');\n  let hmNum = statusStr.match(/\\d+/g)[0];\n  statusStr = statusStr.replace(hmNum, '');\n  let fmNum = statusStr.match(/\\d+/)[0];\n  statusStr = statusStr.replace(fmNum, '');\n  return [turn, castleAvail, enPassantAvail, hmNum, fmNum];\n} // module.exports = parseStatusStr;\n\n/** for node.js\nif (require.main === module) {\n    let statusStrs =\n        ['w KQkq - 1 25',\n         'w K - 0 1',\n         'w KQkq - 8 13',\n         'w KQkq - 8 13',\n         'w - - 0 1',\n         'w - - 0 1',\n         'w - - 0 1',\n         'w - - 0 1',\n         'w - - 0 1',\n         'w KQkq b6 0 3',\n         'w KQ a6 0 10',\n         'w KQkq - 0 1',\n         'w - - 0 1',\n         'w KQ a6 0 10',\n         'b KQkq - 1 11',\n         'w KQkq h6 0 7',\n         'w - - 0 1',\n         'w - - 0 1',\n         'w - - 0 1',\n         'w - - 0 1',\n         'w - - 0 1',\n         'w - - 0 1'\n        ]\n    for (var s of statusStrs) {\n        console.log(parseStatusStr(s))\n    }\n\n}\n*/","map":{"version":3,"sources":["/home/brian/ChessKingsCouncil/app/src/game_logic/fenParser/GameStatus/parseStatusStr.js"],"names":["parseStatusStr","statusStr","turn","match","replace","castleAvail","enPassantAvail","hmNum","fmNum"],"mappings":"AAEA,OAAO,SAASA,cAAT,CAAwBC,SAAxB,EAAmC;AACtC;AACA,MAAIC,IAAI,GAAGD,SAAS,CAACE,KAAV,CAAgB,QAAhB,EAA0B,CAA1B,CAAX;AACAF,EAAAA,SAAS,GAAGA,SAAS,CAACG,OAAV,CAAkBF,IAAlB,EAAwB,EAAxB,CAAZ;AAEA,MAAIG,WAAW,GAAGJ,SAAS,CAACE,KAAV,CAAgB,qDAAhB,EAAuE,CAAvE,CAAlB;AACAF,EAAAA,SAAS,GAAGA,SAAS,CAACG,OAAV,CAAkBC,WAAlB,EAA+B,EAA/B,EAAmC,CAAnC,CAAZ;AAEA,MAAIC,cAAc,GAAGL,SAAS,CAACE,KAAV,CAAgB,mBAAhB,EAAqC,CAArC,CAArB;AACAF,EAAAA,SAAS,GAAGA,SAAS,CAACG,OAAV,CAAkBE,cAAlB,EAAkC,EAAlC,CAAZ;AAEA,MAAIC,KAAK,GAAGN,SAAS,CAACE,KAAV,CAAgB,MAAhB,EAAwB,CAAxB,CAAZ;AACAF,EAAAA,SAAS,GAAGA,SAAS,CAACG,OAAV,CAAkBG,KAAlB,EAAyB,EAAzB,CAAZ;AAEA,MAAIC,KAAK,GAAGP,SAAS,CAACE,KAAV,CAAgB,KAAhB,EAAuB,CAAvB,CAAZ;AACAF,EAAAA,SAAS,GAAGA,SAAS,CAACG,OAAV,CAAkBI,KAAlB,EAAyB,EAAzB,CAAZ;AAEA,SAAO,CAACN,IAAD,EAAOG,WAAP,EAAoBC,cAApB,EAAoCC,KAApC,EAA2CC,KAA3C,CAAP;AACH,C,CAED;;AAEA","sourcesContent":["\n\nexport function parseStatusStr(statusStr) {\n    /*break the status part of the fen string into its components &&  return**/\n    let turn = statusStr.match(/(w|b)/g)[0]\n    statusStr = statusStr.replace(turn, '')\n\n    let castleAvail = statusStr.match(/(KQkq|KQk|KQq|KQ|Qkq|Qk|Qq|Q|Kkq|Kk|Kq|K|kq|k|q|-)/g)[0]\n    statusStr = statusStr.replace(castleAvail, '', 1)\n\n    let enPassantAvail = statusStr.match(/(([a-h][1-8])|-)/g)[0]\n    statusStr = statusStr.replace(enPassantAvail, '')\n\n    let hmNum = statusStr.match(/\\d+/g)[0]\n    statusStr = statusStr.replace(hmNum, '')\n\n    let fmNum = statusStr.match(/\\d+/)[0]\n    statusStr = statusStr.replace(fmNum, '')\n\n    return [turn, castleAvail, enPassantAvail, hmNum, fmNum]\n}\n\n// module.exports = parseStatusStr;\n\n/** for node.js\nif (require.main === module) {\n    let statusStrs =\n        ['w KQkq - 1 25',\n         'w K - 0 1',\n         'w KQkq - 8 13',\n         'w KQkq - 8 13',\n         'w - - 0 1',\n         'w - - 0 1',\n         'w - - 0 1',\n         'w - - 0 1',\n         'w - - 0 1',\n         'w KQkq b6 0 3',\n         'w KQ a6 0 10',\n         'w KQkq - 0 1',\n         'w - - 0 1',\n         'w KQ a6 0 10',\n         'b KQkq - 1 11',\n         'w KQkq h6 0 7',\n         'w - - 0 1',\n         'w - - 0 1',\n         'w - - 0 1',\n         'w - - 0 1',\n         'w - - 0 1',\n         'w - - 0 1'\n        ]\n    for (var s of statusStrs) {\n        console.log(parseStatusStr(s))\n    }\n\n}\n*/"]},"metadata":{},"sourceType":"module"}