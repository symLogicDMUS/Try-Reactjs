{"ast":null,"code":"import { getOffsetThreats } from \"../threatArea/getOffsetThreats\";\nimport { getPawnThreats } from \"../threatArea/getPawnThreats\";\nimport { getNumPathAttackers } from \"../pathsInfo/top/getNumPathAttackers\";\nexport function getNumPiecesCheckingKing(board, sqr, color, pdDict, pieceDefs, idDict) {\n  /*get the number of pieces checking the king of current turn**/\n  let offsetThreats = getOffsetThreats(board, sqr, color, pieceDefs, idDict);\n  let pawnThreats = getPawnThreats(board, sqr, color);\n  let numPathAttackers = getNumPathAttackers(pdDict);\n  return offsetThreats.length + pawnThreats.length + numPathAttackers;\n} // module.exports = getNumPiecesCheckingKing;\n\n/** for node.js\nif (require.main === module) {\n\n    import {getPathdataDict} from \"../pathsInfo/top/getpathDataDict\";\n    import {getStandardPieceDefs} from \"../testObjects/getStandardPieceDefs\";\n    import {getStandardIdDict} from \"../testObjects/getStandardIdDict\";\n    import {sampleBoardDicts} from \"../testObjects/sampleBoardDicts\";\n    import {printBoard} from \"../printers/printBoard\";\n    import {initEmptyRanges} from \"../apiHelpers/initEmptyRanges\";\n    import {getPieceLoc} from \".././helpers/getPieceLoc\"\n    import {rfToXy} from \"../coordType/crdCnvrt\"\n\n    var pieceDefs = initEmptyRanges(getStandardPieceDefs())\n    var idDict = getStandardIdDict()\n\n    var pdDict, board, n, kingLoc;\n\n    var game_names = [\n    'check_example3',\n    'fundemental_defense',\n    'king_range_test',\n    'knight_threat2',\n    'pawn_threat1',\n    'pinned_ex2',\n    'stalemate_exp1',\n    'super_checkmate_impossible_example']\n\n    for (var game_name of game_names) {\n        board = sampleBoardDicts[game_name]\n        kingLoc = getPieceLoc(board, 'WK1')\n        pdDict = getPathdataDict(board, rfToXy(kingLoc), 'W', pieceDefs, idDict)\n        n = getNumPiecesCheckingKing(board, rfToXy(kingLoc), 'W', pdDict, pieceDefs, idDict)\n        printBoard(board, `\\n${game_name}, ${n}`, [kingLoc])\n    }\n\n}\n*/","map":{"version":3,"sources":["/home/brian/ChessKingsCouncil/app/src/game_logic/restriction/getNumPiecesCheckingKing.js"],"names":["getOffsetThreats","getPawnThreats","getNumPathAttackers","getNumPiecesCheckingKing","board","sqr","color","pdDict","pieceDefs","idDict","offsetThreats","pawnThreats","numPathAttackers","length"],"mappings":"AAAA,SAAQA,gBAAR,QAA+B,gCAA/B;AACA,SAAQC,cAAR,QAA6B,8BAA7B;AACA,SAAQC,mBAAR,QAAkC,sCAAlC;AAIA,OAAO,SAASC,wBAAT,CAAkCC,KAAlC,EAAyCC,GAAzC,EAA8CC,KAA9C,EAAqDC,MAArD,EAA6DC,SAA7D,EAAwEC,MAAxE,EAAgF;AACnF;AACA,MAAIC,aAAa,GAAGV,gBAAgB,CAACI,KAAD,EAAQC,GAAR,EAAaC,KAAb,EAAoBE,SAApB,EAA+BC,MAA/B,CAApC;AACA,MAAIE,WAAW,GAAGV,cAAc,CAACG,KAAD,EAAQC,GAAR,EAAaC,KAAb,CAAhC;AACA,MAAIM,gBAAgB,GAAGV,mBAAmB,CAACK,MAAD,CAA1C;AACA,SAAOG,aAAa,CAACG,MAAd,GAAuBF,WAAW,CAACE,MAAnC,GAA4CD,gBAAnD;AACH,C,CAED;;AAEA","sourcesContent":["import {getOffsetThreats} from \"../threatArea/getOffsetThreats\";\nimport {getPawnThreats} from \"../threatArea/getPawnThreats\";\nimport {getNumPathAttackers} from \"../pathsInfo/top/getNumPathAttackers\";\n\n\n\nexport function getNumPiecesCheckingKing(board, sqr, color, pdDict, pieceDefs, idDict) {\n    /*get the number of pieces checking the king of current turn**/\n    let offsetThreats = getOffsetThreats(board, sqr, color, pieceDefs, idDict)\n    let pawnThreats = getPawnThreats(board, sqr, color)\n    let numPathAttackers = getNumPathAttackers(pdDict)\n    return offsetThreats.length + pawnThreats.length + numPathAttackers\n}\n\n// module.exports = getNumPiecesCheckingKing;\n\n/** for node.js\nif (require.main === module) {\n\n    import {getPathdataDict} from \"../pathsInfo/top/getpathDataDict\";\n    import {getStandardPieceDefs} from \"../testObjects/getStandardPieceDefs\";\n    import {getStandardIdDict} from \"../testObjects/getStandardIdDict\";\n    import {sampleBoardDicts} from \"../testObjects/sampleBoardDicts\";\n    import {printBoard} from \"../printers/printBoard\";\n    import {initEmptyRanges} from \"../apiHelpers/initEmptyRanges\";\n    import {getPieceLoc} from \".././helpers/getPieceLoc\"\n    import {rfToXy} from \"../coordType/crdCnvrt\"\n\n    var pieceDefs = initEmptyRanges(getStandardPieceDefs())\n    var idDict = getStandardIdDict()\n\n    var pdDict, board, n, kingLoc;\n\n    var game_names = [\n    'check_example3',\n    'fundemental_defense',\n    'king_range_test',\n    'knight_threat2',\n    'pawn_threat1',\n    'pinned_ex2',\n    'stalemate_exp1',\n    'super_checkmate_impossible_example']\n\n    for (var game_name of game_names) {\n        board = sampleBoardDicts[game_name]\n        kingLoc = getPieceLoc(board, 'WK1')\n        pdDict = getPathdataDict(board, rfToXy(kingLoc), 'W', pieceDefs, idDict)\n        n = getNumPiecesCheckingKing(board, rfToXy(kingLoc), 'W', pdDict, pieceDefs, idDict)\n        printBoard(board, `\\n${game_name}, ${n}`, [kingLoc])\n    }\n\n}\n*/"]},"metadata":{},"sourceType":"module"}