{"ast":null,"code":"/**https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set */\nexport function isSuperset(set, subset) {\n  for (let elem of subset) {\n    if (!set.has(elem)) {\n      return false;\n    }\n  }\n\n  return true;\n}\nexport function union(setA, setB) {\n  let _union = new Set(setA);\n\n  for (let elem of setB) {\n    _union.add(elem);\n  }\n\n  return _union;\n}\nexport function intersection(setA, setB) {\n  let _intersection = new Set();\n\n  for (let elem of setB) {\n    if (setA.has(elem)) {\n      _intersection.add(elem);\n    }\n  }\n\n  return _intersection;\n}\nexport function symmetricDifference(setA, setB) {\n  let _difference = new Set(setA);\n\n  for (let elem of setB) {\n    if (_difference.has(elem)) {\n      _difference.delete(elem);\n    } else {\n      _difference.add(elem);\n    }\n  }\n\n  return _difference;\n}\nexport function difference(setA, setB) {\n  let _difference = new Set(setA);\n\n  for (let elem of setB) {\n    _difference.delete(elem);\n  }\n\n  return _difference;\n} // // module.exports = {isSuperset, difference};\n// Examples\n\n/** for node.js\nif (require.main === module) {\n\n    let setA = new Set([1, 2, 3, 4])\n    let setB = new Set([2, 3])\n    let setC = new Set([3, 4, 5, 6])\n    \n    isSuperset(setA, setB)          // => true\n    union(setA, setC)               // => Set [1, 2, 3, 4, 5, 6]\n    intersection(setA, setC)        // => Set [3, 4]\n    symmetricDifference(setA, setC) // => Set [1, 2, 5, 6]\n    difference(setA, setC)          // => Set [1, 2]\n\n}\n*/","map":{"version":3,"sources":["/home/brian/ChessKingsCouncil/app/src/game_logic/helpers/setOps.js"],"names":["isSuperset","set","subset","elem","has","union","setA","setB","_union","Set","add","intersection","_intersection","symmetricDifference","_difference","delete","difference"],"mappings":"AACA;AAEA,OAAO,SAASA,UAAT,CAAoBC,GAApB,EAAyBC,MAAzB,EAAiC;AACpC,OAAK,IAAIC,IAAT,IAAiBD,MAAjB,EAAyB;AACrB,QAAI,CAACD,GAAG,CAACG,GAAJ,CAAQD,IAAR,CAAL,EAAoB;AAChB,aAAO,KAAP;AACH;AACJ;;AACD,SAAO,IAAP;AACH;AAED,OAAO,SAASE,KAAT,CAAeC,IAAf,EAAqBC,IAArB,EAA2B;AAC9B,MAAIC,MAAM,GAAG,IAAIC,GAAJ,CAAQH,IAAR,CAAb;;AACA,OAAK,IAAIH,IAAT,IAAiBI,IAAjB,EAAuB;AACnBC,IAAAA,MAAM,CAACE,GAAP,CAAWP,IAAX;AACH;;AACD,SAAOK,MAAP;AACH;AAED,OAAO,SAASG,YAAT,CAAsBL,IAAtB,EAA4BC,IAA5B,EAAkC;AACrC,MAAIK,aAAa,GAAG,IAAIH,GAAJ,EAApB;;AACA,OAAK,IAAIN,IAAT,IAAiBI,IAAjB,EAAuB;AACnB,QAAID,IAAI,CAACF,GAAL,CAASD,IAAT,CAAJ,EAAoB;AAChBS,MAAAA,aAAa,CAACF,GAAd,CAAkBP,IAAlB;AACH;AACJ;;AACD,SAAOS,aAAP;AACH;AAED,OAAO,SAASC,mBAAT,CAA6BP,IAA7B,EAAmCC,IAAnC,EAAyC;AAC5C,MAAIO,WAAW,GAAG,IAAIL,GAAJ,CAAQH,IAAR,CAAlB;;AACA,OAAK,IAAIH,IAAT,IAAiBI,IAAjB,EAAuB;AACnB,QAAIO,WAAW,CAACV,GAAZ,CAAgBD,IAAhB,CAAJ,EAA2B;AACvBW,MAAAA,WAAW,CAACC,MAAZ,CAAmBZ,IAAnB;AACH,KAFD,MAEO;AACHW,MAAAA,WAAW,CAACJ,GAAZ,CAAgBP,IAAhB;AACH;AACJ;;AACD,SAAOW,WAAP;AACH;AAED,OAAO,SAASE,UAAT,CAAoBV,IAApB,EAA0BC,IAA1B,EAAgC;AACnC,MAAIO,WAAW,GAAG,IAAIL,GAAJ,CAAQH,IAAR,CAAlB;;AACA,OAAK,IAAIH,IAAT,IAAiBI,IAAjB,EAAuB;AACnBO,IAAAA,WAAW,CAACC,MAAZ,CAAmBZ,IAAnB;AACH;;AACD,SAAOW,WAAP;AACH,C,CAED;AAEA;;AACA","sourcesContent":["\n/**https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set */\n\nexport function isSuperset(set, subset) {\n    for (let elem of subset) {\n        if (!set.has(elem)) {\n            return false\n        }\n    }\n    return true\n}\n\nexport function union(setA, setB) {\n    let _union = new Set(setA)\n    for (let elem of setB) {\n        _union.add(elem)\n    }\n    return _union\n}\n\nexport function intersection(setA, setB) {\n    let _intersection = new Set()\n    for (let elem of setB) {\n        if (setA.has(elem)) {\n            _intersection.add(elem)\n        }\n    }\n    return _intersection\n}\n\nexport function symmetricDifference(setA, setB) {\n    let _difference = new Set(setA)\n    for (let elem of setB) {\n        if (_difference.has(elem)) {\n            _difference.delete(elem)\n        } else {\n            _difference.add(elem)\n        }\n    }\n    return _difference\n}\n\nexport function difference(setA, setB) {\n    let _difference = new Set(setA)\n    for (let elem of setB) {\n        _difference.delete(elem)\n    }\n    return _difference\n}\n\n// // module.exports = {isSuperset, difference};\n\n// Examples\n/** for node.js\nif (require.main === module) {\n\n    let setA = new Set([1, 2, 3, 4])\n    let setB = new Set([2, 3])\n    let setC = new Set([3, 4, 5, 6])\n    \n    isSuperset(setA, setB)          // => true\n    union(setA, setC)               // => Set [1, 2, 3, 4, 5, 6]\n    intersection(setA, setC)        // => Set [3, 4]\n    symmetricDifference(setA, setC) // => Set [1, 2, 5, 6]\n    difference(setA, setC)          // => Set [1, 2]\n\n}\n*/\n"]},"metadata":{},"sourceType":"module"}