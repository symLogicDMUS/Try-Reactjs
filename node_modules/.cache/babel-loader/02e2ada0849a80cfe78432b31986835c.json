{"ast":null,"code":"var _jsxFileName = \"/home/brian/ChessKingsCouncil/app/src/Components/NewGame/NewGame.jsx\";\nimport React from \"react\";\nimport { PickType } from \"./PickType/PickType\";\nimport { PickName } from \"./PickName/PickName\";\nimport { Customize } from \"./Customize/Customize\";\nimport { Redirect } from \"react-router-dom\";\nimport { PlayAs } from \"./PlayAs/PlayAs\";\nimport { newData, ranges, enemyRanges, moves, status, id_dict, piece_defs, standard_promo_names } from \"./NewData\";\nimport { firstUpdate } from \"../../apiHelpers/firstUpdate\";\nimport \"./NewGame.css\";\n/**\n * NewGame selects what CreatPiece created, then sends it to the backend which\n * assigns ids to piece-names for pieces the player chose for that game. the\n * id:piece-name arangement is unique to that game, and is stored in game-name.defs\n * in the game's folder.\n */\n\nexport class NewGame extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      step: 0\n    };\n    this.gameName = \"none\";\n    this.gameType = \"none\";\n    this.playerType = \"test\"; //either the color W or B, or 'test' \n\n    this.pieceDefs = {};\n    this.comp = null;\n    this.council = false;\n    this.turn = null;\n    this.nextStep = this.nextStep.bind(this);\n    this.setGameType = this.setGameType.bind(this);\n    this.setGameName = this.setGameName.bind(this);\n    this.setPlayerType = this.setPlayerType.bind(this);\n    this.loadNewStandard = this.loadNewStandard.bind(this);\n    this.loadNewCustom = this.loadNewCustom.bind(this);\n    this.loadNewCouncil = this.loadNewCouncil.bind(this);\n  }\n\n  nextStep() {\n    this.setState({\n      step: this.state.step + 1\n    });\n  }\n\n  componentDidMount() {\n    document.body.className = \"new-game-body\";\n  }\n\n  setGameType(type) {\n    this.gameType = type;\n  }\n\n  setPlayerType(playerType) {\n    this.playerType = playerType;\n  }\n\n  setGameName(name) {\n    this.gameName = name;\n  }\n\n  loadNewStandard() {\n    this.gameData = JSON.parse(JSON.stringify(newData));\n    this.gameData['game_name'] = this.gameName;\n    this.gameData['pt'] = JSON.parse(JSON.stringify(this.playerType));\n    this.gameData['type'] = JSON.parse(JSON.stringify(this.gameType));\n    this.gameData['promos'] = JSON.parse(JSON.stringify(standard_promo_names));\n    this.gameData['id_dict'] = JSON.parse(JSON.stringify(id_dict));\n    this.gameData['piece_defs'] = JSON.parse(JSON.stringify(piece_defs));\n    this.gameData['moves'] = JSON.parse(JSON.stringify(moves));\n    this.gameData['ranges'] = JSON.parse(JSON.stringify(ranges));\n    this.gameData['enemy_ranges'] = JSON.parse(JSON.stringify(enemyRanges));\n    this.gameData['status'] = JSON.parse(JSON.stringify(status));\n  }\n\n  loadNewCouncil() {\n    /**Not yet implemented to be different */\n    this.gameData = JSON.parse(JSON.stringify(newData));\n    this.gameData['game_name'] = this.gameName;\n    this.gameData['pt'] = JSON.parse(JSON.stringify(this.playerType));\n    this.gameData['type'] = JSON.parse(JSON.stringify(this.gameType));\n    this.gameData['promos'] = JSON.parse(JSON.stringify(standard_promo_names));\n    this.gameData['id_dict'] = JSON.parse(JSON.stringify(id_dict));\n    this.gameData['piece_defs'] = JSON.parse(JSON.stringify(piece_defs));\n    this.gameData['moves'] = JSON.parse(JSON.stringify(moves));\n    this.gameData['ranges'] = JSON.parse(JSON.stringify(ranges));\n    this.gameData['enemy_ranges'] = JSON.parse(JSON.stringify(enemyRanges));\n    this.gameData['status'] = JSON.parse(JSON.stringify(status));\n  }\n\n  loadNewCustom(idDict, defs, promos) {\n    /**\n     * first declare the data we don't need then backend for, then get rest of data from backend.\n     * \n     * load the data for new-game but then change the idDict to\n     * one chosen by customise. note: unlike loadNewCouncil and \n     * loadNewStandard, loadNewCustom is called from child.\n     * \n     * 1. set data that is same for any new game\n     * 2. set what the player will play as: W, B, or test\n     * 4. set data that is unique to this game.\n     * 5. format the data that backend needs together into an object.\n     * 6. get the starting ranges for our custom new game from the backend, then update state\n     */\n    this.gameData = JSON.parse(JSON.stringify(newData)); //1.\n\n    this.gameData['game_name'] = this.gameName;\n    this.gameData['pt'] = JSON.parse(JSON.stringify(this.playerType)); //2.\n\n    this.gameData['type'] = JSON.parse(JSON.stringify(this.gameType));\n    this.gameData['promos'] = promos; //4.\n\n    this.gameData['id_dict'] = idDict; //4.\n\n    this.gameData['piece_defs'] = {}; //4.\n\n    var name;\n\n    for (var id of Object.keys(idDict)) {\n      if (id !== 'k' && id !== 'p') {\n        name = idDict[id];\n        this.gameData['piece_defs'][name] = defs[name]; //4.\n      }\n    }\n\n    var dataEntry = firstUpdate(this.gameData[\"board\"], this.gameData[\"json_records\"], \"W\", this.gameData[\"pt\"], this.gameData[\"piece_defs\"], this.gameData[\"id_dict\"]);\n    this.gameData['moves'] = dataEntry['moves'];\n    this.gameData['ranges'] = dataEntry['ranges'];\n    this.gameData['enemy_ranges'] = dataEntry['enemy_ranges'];\n    this.gameData['status'] = JSON.parse(JSON.stringify(status));\n    this.nextStep();\n  }\n\n  getGameSetup() {\n    if (this.gameType === \"standard\") return /*#__PURE__*/React.createElement(PlayAs, {\n      setPlayer: this.setPlayerType,\n      nextStep: this.nextStep,\n      loadNew: this.loadNewStandard,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 20\n      }\n    });\n    if (this.gameType === \"custom\") return /*#__PURE__*/React.createElement(Customize, {\n      loadNewCustom: this.loadNewCustom,\n      setPlayer: this.setPlayerType,\n      nextStep: this.nextStep,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 20\n      }\n    });\n    if (this.gameType === \"council\") return /*#__PURE__*/React.createElement(PlayAs, {\n      setPlayer: this.setPlayerType,\n      nextStep: this.nextStep,\n      loadNew: this.loadNewCouncil,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 20\n      }\n    });\n  }\n\n  play() {\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: {\n        pathname: \"/NewGame/Play\",\n        state: {\n          currentPage: \"/NewGame/Play\",\n          gameName: JSON.parse(JSON.stringify(this.gameName)),\n          gameType: JSON.parse(JSON.stringify(this.gameType)),\n          playerType: JSON.parse(JSON.stringify(this.playerType)),\n          gameData: JSON.parse(JSON.stringify(this.gameData))\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 16\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, this.state.step === 0 && /*#__PURE__*/React.createElement(PickType, {\n      setType: this.setGameType,\n      nextStep: this.nextStep,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 40\n      }\n    }), this.state.step === 1 && /*#__PURE__*/React.createElement(PickName, {\n      setName: this.setGameName,\n      nextStep: this.nextStep,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 40\n      }\n    }), this.state.step === 2 && this.getGameSetup(), this.state.step === 3 && this.play());\n  }\n\n}\nexport default NewGame;","map":{"version":3,"sources":["/home/brian/ChessKingsCouncil/app/src/Components/NewGame/NewGame.jsx"],"names":["React","PickType","PickName","Customize","Redirect","PlayAs","newData","ranges","enemyRanges","moves","status","id_dict","piece_defs","standard_promo_names","firstUpdate","NewGame","Component","constructor","props","state","step","gameName","gameType","playerType","pieceDefs","comp","council","turn","nextStep","bind","setGameType","setGameName","setPlayerType","loadNewStandard","loadNewCustom","loadNewCouncil","setState","componentDidMount","document","body","className","type","name","gameData","JSON","parse","stringify","idDict","defs","promos","id","Object","keys","dataEntry","getGameSetup","play","pathname","currentPage","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {PickType} from \"./PickType/PickType\";\nimport {PickName} from \"./PickName/PickName\";\nimport {Customize} from \"./Customize/Customize\";\nimport { Redirect } from \"react-router-dom\";\nimport { PlayAs } from \"./PlayAs/PlayAs\";\nimport {newData, ranges, enemyRanges, moves, status, id_dict, piece_defs, standard_promo_names} from \"./NewData\";\nimport {firstUpdate} from \"../../apiHelpers/firstUpdate\";\nimport \"./NewGame.css\";\n\n\n/**\n * NewGame selects what CreatPiece created, then sends it to the backend which\n * assigns ids to piece-names for pieces the player chose for that game. the\n * id:piece-name arangement is unique to that game, and is stored in game-name.defs\n * in the game's folder.\n */\nexport class NewGame extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {step: 0};\n        this.gameName = \"none\";\n        this.gameType = \"none\";\n        this.playerType = \"test\"; //either the color W or B, or 'test' \n        this.pieceDefs = {};\n        this.comp = null;\n        this.council = false;\n        this.turn = null;\n        this.nextStep = this.nextStep.bind(this);\n        this.setGameType = this.setGameType.bind(this);\n        this.setGameName = this.setGameName.bind(this);\n        this.setPlayerType = this.setPlayerType.bind(this);\n        this.loadNewStandard = this.loadNewStandard.bind(this);\n        this.loadNewCustom = this.loadNewCustom.bind(this);\n        this.loadNewCouncil = this.loadNewCouncil.bind(this);\n    }\n\n    nextStep() {\n        this.setState({step: this.state.step + 1});\n    } \n\n    componentDidMount() {\n        document.body.className = \"new-game-body\"; \n    }\n\n    setGameType(type) {\n        this.gameType = type;\n    }\n\n    setPlayerType(playerType) {\n        this.playerType = playerType;\n    }\n\n    setGameName(name) {\n        this.gameName = name;\n    }\n    \n    loadNewStandard() {\n        this.gameData = JSON.parse(JSON.stringify(newData));\n        this.gameData['game_name'] = this.gameName;\n        this.gameData['pt'] = JSON.parse(JSON.stringify(this.playerType));\n        this.gameData['type'] = JSON.parse(JSON.stringify(this.gameType));\n        this.gameData['promos'] = JSON.parse(JSON.stringify(standard_promo_names));\n        this.gameData['id_dict'] = JSON.parse(JSON.stringify(id_dict));\n        this.gameData['piece_defs'] = JSON.parse(JSON.stringify(piece_defs));\n        this.gameData['moves'] = JSON.parse(JSON.stringify(moves));\n        this.gameData['ranges'] = JSON.parse(JSON.stringify(ranges));\n        this.gameData['enemy_ranges'] = JSON.parse(JSON.stringify(enemyRanges));\n        this.gameData['status'] = JSON.parse(JSON.stringify(status));\n    }\n\n    loadNewCouncil() {\n        /**Not yet implemented to be different */\n        this.gameData = JSON.parse(JSON.stringify(newData));\n        this.gameData['game_name'] = this.gameName;\n        this.gameData['pt'] = JSON.parse(JSON.stringify(this.playerType));\n        this.gameData['type'] = JSON.parse(JSON.stringify(this.gameType));\n        this.gameData['promos'] = JSON.parse(JSON.stringify(standard_promo_names));\n        this.gameData['id_dict'] = JSON.parse(JSON.stringify(id_dict));\n        this.gameData['piece_defs'] = JSON.parse(JSON.stringify(piece_defs));\n        this.gameData['moves'] = JSON.parse(JSON.stringify(moves));\n        this.gameData['ranges'] = JSON.parse(JSON.stringify(ranges));\n        this.gameData['enemy_ranges'] = JSON.parse(JSON.stringify(enemyRanges));\n        this.gameData['status'] = JSON.parse(JSON.stringify(status));\n    }\n\n    loadNewCustom(idDict, defs, promos) {\n        /**\n         * first declare the data we don't need then backend for, then get rest of data from backend.\n         * \n         * load the data for new-game but then change the idDict to\n         * one chosen by customise. note: unlike loadNewCouncil and \n         * loadNewStandard, loadNewCustom is called from child.\n         * \n         * 1. set data that is same for any new game\n         * 2. set what the player will play as: W, B, or test\n         * 4. set data that is unique to this game.\n         * 5. format the data that backend needs together into an object.\n         * 6. get the starting ranges for our custom new game from the backend, then update state\n         */\n        \n        this.gameData = JSON.parse(JSON.stringify(newData)); //1.\n        this.gameData['game_name'] = this.gameName;\n        this.gameData['pt'] = JSON.parse(JSON.stringify(this.playerType)); //2.\n        this.gameData['type'] = JSON.parse(JSON.stringify(this.gameType));\n        this.gameData['promos'] = promos; //4.\n        this.gameData['id_dict'] = idDict; //4.\n        this.gameData['piece_defs'] = {}; //4.\n\n        var name;\n        for (var id of Object.keys(idDict)) {\n            if (id !== 'k' && id !== 'p') {\n                name = idDict[id]\n                this.gameData['piece_defs'][name] = defs[name] //4.\n            }\n        }\n        \n        var dataEntry = firstUpdate(\n          this.gameData[\"board\"],\n          this.gameData[\"json_records\"],\n          \"W\",\n          this.gameData[\"pt\"],\n          this.gameData[\"piece_defs\"],\n          this.gameData[\"id_dict\"]\n        );\n\n        this.gameData['moves'] = dataEntry['moves'];\n        this.gameData['ranges'] = dataEntry['ranges'];\n        this.gameData['enemy_ranges'] = dataEntry['enemy_ranges'];\n        this.gameData['status'] = JSON.parse(JSON.stringify(status));\n        \n        this.nextStep();\n\n    }\n\n    getGameSetup() {\n\n        if (this.gameType === \"standard\")\n            return <PlayAs setPlayer={this.setPlayerType} nextStep={this.nextStep} loadNew={this.loadNewStandard}/>\n\n        if (this.gameType === \"custom\")\n            return <Customize loadNewCustom={this.loadNewCustom} setPlayer={this.setPlayerType} nextStep={this.nextStep} />\n\n        if (this.gameType === \"council\")\n            return <PlayAs setPlayer={this.setPlayerType} nextStep={this.nextStep} loadNew={this.loadNewCouncil}/>\n    }\n\n    play() {\n\n        return <Redirect to={{ pathname:\"/NewGame/Play\",\n                               state: {currentPage:\"/NewGame/Play\",\n                                       gameName:JSON.parse(JSON.stringify(this.gameName)),\n                                       gameType:JSON.parse(JSON.stringify(this.gameType)),\n                                       playerType:JSON.parse(JSON.stringify(this.playerType)),\n                                       gameData:JSON.parse(JSON.stringify(this.gameData)),\n                                       }\n                            }} />\n    }\n\n    render() {\n        return (\n        <>\n            {this.state.step === 0 && (<PickType setType={this.setGameType} nextStep={this.nextStep} />)}\n            {this.state.step === 1 && (<PickName setName={this.setGameName} nextStep={this.nextStep} />)}\n            {this.state.step === 2 && (this.getGameSetup())}\n            {this.state.step === 3 && (this.play())}    \n        </>\n        )\n\n    }\n}\n\nexport default NewGame;\n"]},"metadata":{},"sourceType":"module"}