{"ast":null,"code":"import { enPassantBlackAttackRank } from \"./enPassantBlackAttackRank\";\nimport { xyToRf, rfToXy } from \"../../../coordType/crdCnvrt\";\nexport function isEnpBlackAttR(sqr) {\n  /*return true if sqr the.includes(is) en-passant black attack rank, else false**/\n  if (enPassantBlackAttackRank.includes(xyToRf(...sqr))) {\n    return true;\n  } else {\n    return false;\n  }\n} // module.exports = isEnpBlackAttR;\n\n/** for node.js\nif (require.main === module) {\n\n    import {sampleBoardDicts} from \"../../../testObjects/sampleBoardDicts\"\n    import {printBoard} from \"../../../printers/printBoard\"\n\n    var board = sampleBoardDicts[\"new\"]\n    var yes = []\n    var no = []\n\n    for (var rf of Object.keys(board)) {\n        if (isEnpBlackAttR(rfToXy(rf)))\n            yes.push(rf)\n        else\n            no.push(rf)\n    }\n    printBoard(board, \"green: yes, red: no\", no, yes)\n\n}\n*/","map":{"version":3,"sources":["/home/brian/ChessKingsCouncil/app/src/game_logic/ranges/specialMoves/enPassant/isEnpBlackAttR.js"],"names":["enPassantBlackAttackRank","xyToRf","rfToXy","isEnpBlackAttR","sqr","includes"],"mappings":"AAAA,SAAQA,wBAAR,QAAuC,4BAAvC;AACA,SAAQC,MAAR,EAAgBC,MAAhB,QAA6B,6BAA7B;AAGA,OAAO,SAASC,cAAT,CAAwBC,GAAxB,EAA6B;AAChC;AACA,MAAIJ,wBAAwB,CAACK,QAAzB,CAAkCJ,MAAM,CAAC,GAAGG,GAAJ,CAAxC,CAAJ,EAAuD;AACnD,WAAO,IAAP;AACH,GAFD,MAGK;AACD,WAAO,KAAP;AACH;AACJ,C,CAED;;AAEA","sourcesContent":["import {enPassantBlackAttackRank} from \"./enPassantBlackAttackRank\";\nimport {xyToRf, rfToXy} from \"../../../coordType/crdCnvrt\"\n\n\nexport function isEnpBlackAttR(sqr) {\n    /*return true if sqr the.includes(is) en-passant black attack rank, else false**/\n    if (enPassantBlackAttackRank.includes(xyToRf(...sqr))) {\n        return true\n    }\n    else {\n        return false\n    }\n}\n\n// module.exports = isEnpBlackAttR;\n\n/** for node.js\nif (require.main === module) {\n\n    import {sampleBoardDicts} from \"../../../testObjects/sampleBoardDicts\"\n    import {printBoard} from \"../../../printers/printBoard\"\n\n    var board = sampleBoardDicts[\"new\"]\n    var yes = []\n    var no = []\n\n    for (var rf of Object.keys(board)) {\n        if (isEnpBlackAttR(rfToXy(rf)))\n            yes.push(rf)\n        else\n            no.push(rf)\n    }\n    printBoard(board, \"green: yes, red: no\", no, yes)\n\n}\n*/"]},"metadata":{},"sourceType":"module"}