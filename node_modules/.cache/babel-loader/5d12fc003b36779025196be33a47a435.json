{"ast":null,"code":"import { getKingSideCastlePaths } from \"./getKingSideCastlePaths\";\nimport { safePath } from \"./safePath\";\nimport { clearPath } from \"../../../bools/clearPath\";\nexport function canKingSideCastle(board, color, jsonRecords, pieceDefs, idDict) {\n  /*return true if the king side castle of the given color can be performed, else false**/\n  if (jsonRecords.hasKingMoved(color)) {\n    return false;\n  }\n\n  if (jsonRecords.kingSideRookMoved(color)) {\n    return false;\n  }\n\n  let castlePath = getKingSideCastlePaths(color);\n\n  if (!clearPath(board, castlePath)) {\n    return false;\n  }\n\n  if (!safePath(board, castlePath, color, pieceDefs, idDict)) {\n    return false;\n  }\n\n  return true;\n} // module.exports = canKingSideCastle;\n\n/** for node.js\nif (require.main === module) {\n\n    import {JsonRecords} from \"../../../JsonRecords/JsonRecords\";\n    import {getStandardPieceDefs} from \"../../../testObjects/getStandardPieceDefs\";\n    import {getStandardIdDict} from \"../../../testObjects/getStandardIdDict\";\n    import {sampleBoardDicts} from \"../../../testObjects/sampleBoardDicts\";\n    import {initPawnIds} from \"../../../JsonRecords/initPawnIds\";\n    import {initEmptyRanges} from \"../../../apiHelpers/initEmptyRanges\";\n    import {initDDEmptyLists} from \"../../../apiHelpers/initDDEmptyLists\";\n    import {printBoard} from \"../../../printers/printBoard\";\n    import {dataDict} from \"../../../testObjects/dataDicts/dd1\";\n    \n    var board, records, jsonRecords;\n    var pieceDefs = initEmptyRanges(getStandardPieceDefs())\n    var idDict = getStandardIdDict()\n    dataDict = initDDEmptyLists(dataDict)\n\n    //castle_test1, white\n    board = sampleBoardDicts[\"castle_test1\"];\n    records = dataDict[\"castle_test1\"][\"json\"]\n    jsonRecords = new JsonRecords(initPawnIds(records, board))\n    if(canKingSideCastle(board, 'W', jsonRecords, pieceDefs, idDict)) {\n        printBoard(board, \"\\nwhite true\".green)\n    }\n    else {\n       printBoard(board, \"\\nwhite, false\".red) \n    }\n\n    //castle_test1, black\n    board = sampleBoardDicts[\"castle_test1\"];\n    records = dataDict[\"castle_test1\"][\"json\"]\n    jsonRecords = new JsonRecords(initPawnIds(records, board))\n    if(canKingSideCastle(board, 'B', jsonRecords, pieceDefs, idDict)) {\n        printBoard(board, \"\\nblack true\".green)\n    }\n    else {\n       printBoard(board, \"\\nblack, false\".red) \n    }\n\n\n    //castle_test2, white\n    board = sampleBoardDicts[\"castle_test2\"];\n    records = dataDict[\"castle_test2\"][\"json\"]\n    jsonRecords = new JsonRecords(initPawnIds(records, board))\n    if(canKingSideCastle(board, 'W', jsonRecords, pieceDefs, idDict)) {\n        printBoard(board, \"\\nwhite true\".green)\n    }\n    else {\n       printBoard(board, \"\\nwhite, false\".red) \n    }\n\n    //castle_test2, black\n    board = sampleBoardDicts[\"castle_test2\"];\n    records = dataDict[\"castle_test2\"][\"json\"]\n    jsonRecords = new JsonRecords(initPawnIds(records, board))\n    if(canKingSideCastle(board, 'B', jsonRecords, pieceDefs, idDict)) {\n        printBoard(board, \"\\nblack true\".green)\n    }\n    else {\n       printBoard(board, \"\\nblack, false\".red) \n    }\n\n    //castle_test3, white\n    board = sampleBoardDicts[\"castle_test3\"];\n    records = dataDict[\"castle_test3\"][\"json\"]\n    jsonRecords = new JsonRecords(initPawnIds(records, board))\n    if(canKingSideCastle(board, 'W', jsonRecords, pieceDefs, idDict)) {\n        printBoard(board, \"\\nwhite true\".green)\n    }\n    else {\n       printBoard(board, \"\\nwhite, false\".red) \n    }\n\n    //castle_test3, black\n    board = sampleBoardDicts[\"castle_test3\"];\n    records = dataDict[\"castle_test3\"][\"json\"]\n    jsonRecords = new JsonRecords(initPawnIds(records, board))\n    if(canKingSideCastle(board, 'B', jsonRecords, pieceDefs, idDict)) {\n        printBoard(board, \"\\nblack true\".green)\n    }\n    else {\n       printBoard(board, \"\\nblack, false\".red) \n    }\n\n\n    //castle_test4, white\n    board = sampleBoardDicts[\"castle_test4\"];\n    records = dataDict[\"castle_test4\"][\"json\"]\n    jsonRecords = new JsonRecords(initPawnIds(records, board))\n    if(canKingSideCastle(board, 'W', jsonRecords, pieceDefs, idDict)) {\n        printBoard(board, \"\\nwhite true\".green)\n    }\n    else {\n       printBoard(board, \"\\nwhite, false\".red) \n    }\n\n    //castle_test4, black\n    board = sampleBoardDicts[\"castle_test4\"];\n    records = dataDict[\"castle_test3\"][\"json\"]\n    jsonRecords = new JsonRecords(initPawnIds(records, board))\n    if(canKingSideCastle(board, 'B', jsonRecords, pieceDefs, idDict)) {\n        printBoard(board, \"\\nblack true\".green)\n    }\n    else {\n       printBoard(board, \"\\nblack, false\".red) \n    }\n\n\n}\n*/","map":{"version":3,"sources":["/home/brian/ChessKingsCouncil/app/src/game_logic/ranges/specialMoves/castle/canKingSideCastle.js"],"names":["getKingSideCastlePaths","safePath","clearPath","canKingSideCastle","board","color","jsonRecords","pieceDefs","idDict","hasKingMoved","kingSideRookMoved","castlePath"],"mappings":"AAAA,SAAQA,sBAAR,QAAqC,0BAArC;AACA,SAAQC,QAAR,QAAuB,YAAvB;AACA,SAAQC,SAAR,QAAwB,0BAAxB;AAGA,OAAO,SAASC,iBAAT,CAA2BC,KAA3B,EAAkCC,KAAlC,EAAyCC,WAAzC,EAAsDC,SAAtD,EAAiEC,MAAjE,EAAyE;AAC5E;AACA,MAAIF,WAAW,CAACG,YAAZ,CAAyBJ,KAAzB,CAAJ,EAAqC;AACjC,WAAO,KAAP;AACH;;AAED,MAAIC,WAAW,CAACI,iBAAZ,CAA8BL,KAA9B,CAAJ,EAA0C;AACtC,WAAO,KAAP;AACH;;AAED,MAAIM,UAAU,GAAGX,sBAAsB,CAACK,KAAD,CAAvC;;AAEA,MAAI,CAAEH,SAAS,CAACE,KAAD,EAAQO,UAAR,CAAf,EAAoC;AAChC,WAAO,KAAP;AACH;;AAED,MAAI,CAAEV,QAAQ,CAACG,KAAD,EAAQO,UAAR,EAAoBN,KAApB,EAA2BE,SAA3B,EAAsCC,MAAtC,CAAd,EAA6D;AACzD,WAAO,KAAP;AACH;;AAED,SAAO,IAAP;AACH,C,CAED;;AAEA","sourcesContent":["import {getKingSideCastlePaths} from \"./getKingSideCastlePaths\";\nimport {safePath} from \"./safePath\";\nimport {clearPath} from \"../../../bools/clearPath\";\n\n\nexport function canKingSideCastle(board, color, jsonRecords, pieceDefs, idDict) {\n    /*return true if the king side castle of the given color can be performed, else false**/\n    if (jsonRecords.hasKingMoved(color)) {\n        return false\n    }\n\n    if (jsonRecords.kingSideRookMoved(color)) {\n        return false\n    }\n\n    let castlePath = getKingSideCastlePaths(color)\n\n    if (! clearPath(board, castlePath)) {\n        return false\n    }\n\n    if (! safePath(board, castlePath, color, pieceDefs, idDict)) {\n        return false\n    }\n\n    return true\n}\n\n// module.exports = canKingSideCastle;\n\n/** for node.js\nif (require.main === module) {\n\n    import {JsonRecords} from \"../../../JsonRecords/JsonRecords\";\n    import {getStandardPieceDefs} from \"../../../testObjects/getStandardPieceDefs\";\n    import {getStandardIdDict} from \"../../../testObjects/getStandardIdDict\";\n    import {sampleBoardDicts} from \"../../../testObjects/sampleBoardDicts\";\n    import {initPawnIds} from \"../../../JsonRecords/initPawnIds\";\n    import {initEmptyRanges} from \"../../../apiHelpers/initEmptyRanges\";\n    import {initDDEmptyLists} from \"../../../apiHelpers/initDDEmptyLists\";\n    import {printBoard} from \"../../../printers/printBoard\";\n    import {dataDict} from \"../../../testObjects/dataDicts/dd1\";\n    \n    var board, records, jsonRecords;\n    var pieceDefs = initEmptyRanges(getStandardPieceDefs())\n    var idDict = getStandardIdDict()\n    dataDict = initDDEmptyLists(dataDict)\n\n    //castle_test1, white\n    board = sampleBoardDicts[\"castle_test1\"];\n    records = dataDict[\"castle_test1\"][\"json\"]\n    jsonRecords = new JsonRecords(initPawnIds(records, board))\n    if(canKingSideCastle(board, 'W', jsonRecords, pieceDefs, idDict)) {\n        printBoard(board, \"\\nwhite true\".green)\n    }\n    else {\n       printBoard(board, \"\\nwhite, false\".red) \n    }\n\n    //castle_test1, black\n    board = sampleBoardDicts[\"castle_test1\"];\n    records = dataDict[\"castle_test1\"][\"json\"]\n    jsonRecords = new JsonRecords(initPawnIds(records, board))\n    if(canKingSideCastle(board, 'B', jsonRecords, pieceDefs, idDict)) {\n        printBoard(board, \"\\nblack true\".green)\n    }\n    else {\n       printBoard(board, \"\\nblack, false\".red) \n    }\n\n\n    //castle_test2, white\n    board = sampleBoardDicts[\"castle_test2\"];\n    records = dataDict[\"castle_test2\"][\"json\"]\n    jsonRecords = new JsonRecords(initPawnIds(records, board))\n    if(canKingSideCastle(board, 'W', jsonRecords, pieceDefs, idDict)) {\n        printBoard(board, \"\\nwhite true\".green)\n    }\n    else {\n       printBoard(board, \"\\nwhite, false\".red) \n    }\n\n    //castle_test2, black\n    board = sampleBoardDicts[\"castle_test2\"];\n    records = dataDict[\"castle_test2\"][\"json\"]\n    jsonRecords = new JsonRecords(initPawnIds(records, board))\n    if(canKingSideCastle(board, 'B', jsonRecords, pieceDefs, idDict)) {\n        printBoard(board, \"\\nblack true\".green)\n    }\n    else {\n       printBoard(board, \"\\nblack, false\".red) \n    }\n\n    //castle_test3, white\n    board = sampleBoardDicts[\"castle_test3\"];\n    records = dataDict[\"castle_test3\"][\"json\"]\n    jsonRecords = new JsonRecords(initPawnIds(records, board))\n    if(canKingSideCastle(board, 'W', jsonRecords, pieceDefs, idDict)) {\n        printBoard(board, \"\\nwhite true\".green)\n    }\n    else {\n       printBoard(board, \"\\nwhite, false\".red) \n    }\n\n    //castle_test3, black\n    board = sampleBoardDicts[\"castle_test3\"];\n    records = dataDict[\"castle_test3\"][\"json\"]\n    jsonRecords = new JsonRecords(initPawnIds(records, board))\n    if(canKingSideCastle(board, 'B', jsonRecords, pieceDefs, idDict)) {\n        printBoard(board, \"\\nblack true\".green)\n    }\n    else {\n       printBoard(board, \"\\nblack, false\".red) \n    }\n\n\n    //castle_test4, white\n    board = sampleBoardDicts[\"castle_test4\"];\n    records = dataDict[\"castle_test4\"][\"json\"]\n    jsonRecords = new JsonRecords(initPawnIds(records, board))\n    if(canKingSideCastle(board, 'W', jsonRecords, pieceDefs, idDict)) {\n        printBoard(board, \"\\nwhite true\".green)\n    }\n    else {\n       printBoard(board, \"\\nwhite, false\".red) \n    }\n\n    //castle_test4, black\n    board = sampleBoardDicts[\"castle_test4\"];\n    records = dataDict[\"castle_test3\"][\"json\"]\n    jsonRecords = new JsonRecords(initPawnIds(records, board))\n    if(canKingSideCastle(board, 'B', jsonRecords, pieceDefs, idDict)) {\n        printBoard(board, \"\\nblack true\".green)\n    }\n    else {\n       printBoard(board, \"\\nblack, false\".red) \n    }\n\n\n}\n*/"]},"metadata":{},"sourceType":"module"}