{"ast":null,"code":"import { isPiece } from \"../pieceType/isPiece\";\nimport { getColor } from \"../color/getColor\";\nexport function getResetPieceDicts(board, color) {\n  /*create &&  return dicts for the initial ranges, pins, mt-restrictions &&  final ranges, of pieces on board**/\n  var initRanges = {};\n  var pins = {};\n  var mtRestricts = {};\n  var finalRanges = {};\n\n  for (var id of Object.values(board)) {\n    if (!isPiece(id)) {\n      continue;\n    }\n\n    if (getColor(id) != color) {\n      continue;\n    }\n\n    initRanges[id] = [];\n    pins[id] = [];\n    mtRestricts[id] = [];\n    finalRanges[id] = [];\n  }\n\n  return [initRanges, pins, mtRestricts, finalRanges];\n} // module.exports = getResetPieceDicts;\n\n/** for node.js\nif (require.main === module) {\n\n    import {sampleBoardDicts} from \"../testObjects/sampleBoardDicts\"\n    \n    var board = sampleBoardDicts['check_example3']\n    var [iRanges, pins, mtRes, fRanges] = getResetPieceDicts(board, 'W')\n    console.log('check_example3')\n    console.log(iRanges)\n\n    \n    var board = sampleBoardDicts['knight_threat2']\n    var [iRanges, pins, mtRes, fRanges] = getResetPieceDicts(board, 'W')\n    console.log(\"knight_threat2\")\n    console.log(iRanges)\n  \n\n    var board = sampleBoardDicts['super_checkmate_impossible_example']\n    var [iRanges, pins, mtRes, fRanges] = getResetPieceDicts(board, 'W')\n    console.log(\"super_checkmate_impossible_example\")\n    console.log(iRanges)\n\n}\n*/","map":{"version":3,"sources":["/home/brian/ChessKingsCouncil/app/src/game_logic/getters/getResetPieceDicts.js"],"names":["isPiece","getColor","getResetPieceDicts","board","color","initRanges","pins","mtRestricts","finalRanges","id","Object","values"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,sBAAtB;AACA,SAAQC,QAAR,QAAuB,mBAAvB;AAGA,OAAO,SAASC,kBAAT,CAA4BC,KAA5B,EAAmCC,KAAnC,EAA0C;AAC7C;AAEA,MAAIC,UAAU,GAAG,EAAjB;AACA,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIC,WAAW,GAAG,EAAlB;AACA,MAAIC,WAAW,GAAG,EAAlB;;AAEA,OAAK,IAAIC,EAAT,IAAeC,MAAM,CAACC,MAAP,CAAcR,KAAd,CAAf,EAAqC;AACjC,QAAI,CAAEH,OAAO,CAACS,EAAD,CAAb,EAAmB;AACf;AACH;;AACD,QAAIR,QAAQ,CAACQ,EAAD,CAAR,IAAgBL,KAApB,EAA2B;AACvB;AACH;;AACDC,IAAAA,UAAU,CAACI,EAAD,CAAV,GAAiB,EAAjB;AACAH,IAAAA,IAAI,CAACG,EAAD,CAAJ,GAAW,EAAX;AACAF,IAAAA,WAAW,CAACE,EAAD,CAAX,GAAkB,EAAlB;AACAD,IAAAA,WAAW,CAACC,EAAD,CAAX,GAAkB,EAAlB;AACH;;AAED,SAAO,CAACJ,UAAD,EAAaC,IAAb,EAAmBC,WAAnB,EAAgCC,WAAhC,CAAP;AACH,C,CAED;;AAEA","sourcesContent":["import {isPiece} from \"../pieceType/isPiece\";\nimport {getColor} from \"../color/getColor\";\n\n\nexport function getResetPieceDicts(board, color) {\n    /*create &&  return dicts for the initial ranges, pins, mt-restrictions &&  final ranges, of pieces on board**/\n    \n    var initRanges = {}\n    var pins = {}\n    var mtRestricts = {}\n    var finalRanges = {}\n    \n    for (var id of Object.values(board)) {\n        if (! isPiece(id)) {\n            continue\n        }\n        if (getColor(id) != color) {\n            continue\n        }\n        initRanges[id] = []\n        pins[id] = []\n        mtRestricts[id] = []\n        finalRanges[id] = []\n    }\n    \n    return [initRanges, pins, mtRestricts, finalRanges]\n}\n\n// module.exports = getResetPieceDicts;\n\n/** for node.js\nif (require.main === module) {\n\n    import {sampleBoardDicts} from \"../testObjects/sampleBoardDicts\"\n    \n    var board = sampleBoardDicts['check_example3']\n    var [iRanges, pins, mtRes, fRanges] = getResetPieceDicts(board, 'W')\n    console.log('check_example3')\n    console.log(iRanges)\n\n    \n    var board = sampleBoardDicts['knight_threat2']\n    var [iRanges, pins, mtRes, fRanges] = getResetPieceDicts(board, 'W')\n    console.log(\"knight_threat2\")\n    console.log(iRanges)\n  \n\n    var board = sampleBoardDicts['super_checkmate_impossible_example']\n    var [iRanges, pins, mtRes, fRanges] = getResetPieceDicts(board, 'W')\n    console.log(\"super_checkmate_impossible_example\")\n    console.log(iRanges)\n\n}\n*/"]},"metadata":{},"sourceType":"module"}