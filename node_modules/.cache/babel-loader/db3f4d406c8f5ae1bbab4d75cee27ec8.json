{"ast":null,"code":"import { getPathDir } from \"../getPathDir\";\nimport { PathData } from \"../PathData\";\nimport { getPathData } from \"../getPathData\";\nimport { angles } from \"../../helpers/stepFuncs\";\n/** */\n\nexport function getPathdataDict(board, sqr, color, pieceDefs, idDict) {\n  /*get data about every path stemming from sqr, &&  dict.includes(record)**/\n  var pdDict = {};\n\n  for (var pathDir of angles) {\n    // initialize class for given direction\n    pdDict[pathDir] = new PathData(pathDir); // get path data for given direction\n\n    var pathData = getPathData(board, sqr, color, pieceDefs, idDict, pathDir); //changed let to var\n    //initialize class attributes to path data results\n\n    pdDict[pathDir].coordPath = pathData[0];\n    pdDict[pathDir].path = pathData[1];\n    pdDict[pathDir].pieces = pathData[2];\n    pdDict[pathDir].statuses = pathData[3];\n    pdDict[pathDir].pieceMatchesPath = pathData[4];\n  }\n\n  return pdDict;\n} // module.exports = getPathdataDict;\n\n/** for node.js\nif (require.main === module) {\n\n    import {getPieceLocs} from \"../../helpers/getPieceLocsOnPath\";\n    import {getMatchesPathLists} from \"../../helpers/getMatchesPathLists\"\n    import {getFandR} from \"../../helpers/getFandR\";\n    import {printBoard} from \"../../printers/printBoard\";\n    import {getEmptySqrsOnPath} from \"../../helpers/getEmptySqrsOnPath\"\n\n    let board = sampleBoardDicts['check_example3']\n    let pieceDefs = getStandardPieceDefs()\n    let idDict = getStandardIdDict()\n    var coordPath;\n\n    let pdDict = getPathdataDict(board, [4, 4], 'W', pieceDefs, idDict)\n    for (var angle of Object.keys(pdDict)) {\n        console.log(`---------------- ${angle} ----------------`.blue)\n        coordPath = mapListXyToRf(pdDict[angle].coordPath)\n        let pieceLocs = getPieceLocs(board, coordPath)\n        var [matchesPath, doesNotMatchPath] = getMatchesPathLists(pieceLocs, pdDict[angle].pieceMatchesPath)\n        var [friends, enemies] = getFandR(pieceLocs, pdDict[angle].statuses)\n        var emptySqrs = getEmptySqrsOnPath(coordPath, pieceLocs)\n        printBoard(board, \"friends: green, enemies: red, start square: blue\", enemies, friends, [\"d4\"], emptySqrs)\n        printBoard(board, \"piece ability matches path: green, does not match path: red, start square: blue\", doesNotMatchPath, matchesPath, [\"d4\"], emptySqrs)    \n    }\n\n}\n*/","map":{"version":3,"sources":["/home/brian/ChessKingsCouncil/app/src/game_logic/pathsInfo/top/getpathDataDict.js"],"names":["getPathDir","PathData","getPathData","angles","getPathdataDict","board","sqr","color","pieceDefs","idDict","pdDict","pathDir","pathData","coordPath","path","pieces","statuses","pieceMatchesPath"],"mappings":"AAAA,SAAQA,UAAR,QAAyB,eAAzB;AACA,SAAQC,QAAR,QAAuB,aAAvB;AACA,SAAQC,WAAR,QAA0B,gBAA1B;AACA,SAAQC,MAAR,QAAqB,yBAArB;AAGA;;AACA,OAAO,SAASC,eAAT,CAAyBC,KAAzB,EAAgCC,GAAhC,EAAqCC,KAArC,EAA4CC,SAA5C,EAAuDC,MAAvD,EAA+D;AAClE;AAEA,MAAIC,MAAM,GAAG,EAAb;;AACA,OAAK,IAAIC,OAAT,IAAoBR,MAApB,EAA4B;AAExB;AACAO,IAAAA,MAAM,CAACC,OAAD,CAAN,GAAkB,IAAIV,QAAJ,CAAaU,OAAb,CAAlB,CAHwB,CAKxB;;AACA,QAAIC,QAAQ,GAAGV,WAAW,CAACG,KAAD,EAAQC,GAAR,EAAaC,KAAb,EAAoBC,SAApB,EAA+BC,MAA/B,EAAuCE,OAAvC,CAA1B,CANwB,CAMkD;AAE1E;;AACAD,IAAAA,MAAM,CAACC,OAAD,CAAN,CAAgBE,SAAhB,GAA4BD,QAAQ,CAAC,CAAD,CAApC;AACAF,IAAAA,MAAM,CAACC,OAAD,CAAN,CAAgBG,IAAhB,GAAuBF,QAAQ,CAAC,CAAD,CAA/B;AACAF,IAAAA,MAAM,CAACC,OAAD,CAAN,CAAgBI,MAAhB,GAAyBH,QAAQ,CAAC,CAAD,CAAjC;AACAF,IAAAA,MAAM,CAACC,OAAD,CAAN,CAAgBK,QAAhB,GAA2BJ,QAAQ,CAAC,CAAD,CAAnC;AACAF,IAAAA,MAAM,CAACC,OAAD,CAAN,CAAgBM,gBAAhB,GAAmCL,QAAQ,CAAC,CAAD,CAA3C;AACH;;AAED,SAAOF,MAAP;AACH,C,CAED;;AAEA","sourcesContent":["import {getPathDir} from \"../getPathDir\";\nimport {PathData} from \"../PathData\";\nimport {getPathData} from \"../getPathData\";\nimport {angles} from \"../../helpers/stepFuncs\";\n\n\n/** */\nexport function getPathdataDict(board, sqr, color, pieceDefs, idDict) {\n    /*get data about every path stemming from sqr, &&  dict.includes(record)**/\n    \n    var pdDict = {}\n    for (var pathDir of angles) {\n                \n        // initialize class for given direction\n        pdDict[pathDir] = new PathData(pathDir)\n        \n        // get path data for given direction\n        var pathData = getPathData(board, sqr, color, pieceDefs, idDict, pathDir) //changed let to var\n        \n        //initialize class attributes to path data results\n        pdDict[pathDir].coordPath = pathData[0]\n        pdDict[pathDir].path = pathData[1]\n        pdDict[pathDir].pieces = pathData[2]\n        pdDict[pathDir].statuses = pathData[3]\n        pdDict[pathDir].pieceMatchesPath = pathData[4]\n    }\n\n    return pdDict;\n}\n\n// module.exports = getPathdataDict;\n\n/** for node.js\nif (require.main === module) {\n\n    import {getPieceLocs} from \"../../helpers/getPieceLocsOnPath\";\n    import {getMatchesPathLists} from \"../../helpers/getMatchesPathLists\"\n    import {getFandR} from \"../../helpers/getFandR\";\n    import {printBoard} from \"../../printers/printBoard\";\n    import {getEmptySqrsOnPath} from \"../../helpers/getEmptySqrsOnPath\"\n\n    let board = sampleBoardDicts['check_example3']\n    let pieceDefs = getStandardPieceDefs()\n    let idDict = getStandardIdDict()\n    var coordPath;\n\n    let pdDict = getPathdataDict(board, [4, 4], 'W', pieceDefs, idDict)\n    for (var angle of Object.keys(pdDict)) {\n        console.log(`---------------- ${angle} ----------------`.blue)\n        coordPath = mapListXyToRf(pdDict[angle].coordPath)\n        let pieceLocs = getPieceLocs(board, coordPath)\n        var [matchesPath, doesNotMatchPath] = getMatchesPathLists(pieceLocs, pdDict[angle].pieceMatchesPath)\n        var [friends, enemies] = getFandR(pieceLocs, pdDict[angle].statuses)\n        var emptySqrs = getEmptySqrsOnPath(coordPath, pieceLocs)\n        printBoard(board, \"friends: green, enemies: red, start square: blue\", enemies, friends, [\"d4\"], emptySqrs)\n        printBoard(board, \"piece ability matches path: green, does not match path: red, start square: blue\", doesNotMatchPath, matchesPath, [\"d4\"], emptySqrs)    \n    }\n\n}\n*/"]},"metadata":{},"sourceType":"module"}