{"ast":null,"code":"import { emptySqrHash } from \"./emptySqrHash\";\nimport { isdigit } from \"../../helpers/isdigit\";\nexport function numToSharps(posStr) {\n  /**fenParser task 2, converts every digit encountered to that many consecutive '#' chars\n      posStr: the position part of the fen string\n      returns list of sqrs\n  */\n  let newPosStr = '';\n\n  for (var sqr of posStr) {\n    if (isdigit(sqr)) {\n      newPosStr += emptySqrHash[parseInt(sqr, 10)];\n    } else {\n      newPosStr += sqr;\n    }\n  }\n\n  return newPosStr;\n} // module.exports = numToSharps;\n\n/** for node.js\nif (require.main === module) {\n    // test 1:\n    console.log(\"test 1:\")\n    newPosStr = numToSharps('RNBQKBNRPPPPPPPP8888pppppppprnbqkbnr')\n    console.log(newPosStr)\n    console.log(\"\\n\")\n\n    // test 3:\n    console.log(\"test 3:\")\n    newPosStr = numToSharps('b2q2q13R1R22NP4q1QK1QBr83P1P2q2r2P13k3b')\n    console.log(newPosStr)\n    console.log(\"\\n\")\n\n}\n*/","map":{"version":3,"sources":["/home/brian/ChessKingsCouncil/app/src/game_logic/fenParser/getBoard/numToSharps.js"],"names":["emptySqrHash","isdigit","numToSharps","posStr","newPosStr","sqr","parseInt"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,gBAA3B;AACA,SAAQC,OAAR,QAAsB,uBAAtB;AAGA,OAAO,SAASC,WAAT,CAAqBC,MAArB,EAA6B;AAChC;;;;AAIA,MAAIC,SAAS,GAAG,EAAhB;;AACA,OAAK,IAAIC,GAAT,IAAgBF,MAAhB,EAAwB;AACpB,QAAIF,OAAO,CAACI,GAAD,CAAX,EAAkB;AACbD,MAAAA,SAAS,IAAIJ,YAAY,CAACM,QAAQ,CAACD,GAAD,EAAM,EAAN,CAAT,CAAzB;AACJ,KAFD,MAGK;AACDD,MAAAA,SAAS,IAAIC,GAAb;AACH;AACJ;;AACD,SAAOD,SAAP;AACH,C,CAED;;AAEA","sourcesContent":["import {emptySqrHash} from \"./emptySqrHash\";\nimport {isdigit} from \"../../helpers/isdigit\";\n\n\nexport function numToSharps(posStr) {\n    /**fenParser task 2, converts every digit encountered to that many consecutive '#' chars\n        posStr: the position part of the fen string\n        returns list of sqrs\n    */\n    let newPosStr = ''\n    for (var sqr of posStr) {\n        if (isdigit(sqr)) {\n             newPosStr += emptySqrHash[parseInt(sqr, 10)]\n        }\n        else {\n            newPosStr += sqr\n        }\n    }\n    return newPosStr\n}\n\n// module.exports = numToSharps;\n\n/** for node.js\nif (require.main === module) {\n    // test 1:\n    console.log(\"test 1:\")\n    newPosStr = numToSharps('RNBQKBNRPPPPPPPP8888pppppppprnbqkbnr')\n    console.log(newPosStr)\n    console.log(\"\\n\")\n\n    // test 3:\n    console.log(\"test 3:\")\n    newPosStr = numToSharps('b2q2q13R1R22NP4q1QK1QBr83P1P2q2r2P13k3b')\n    console.log(newPosStr)\n    console.log(\"\\n\")\n\n}\n*/"]},"metadata":{},"sourceType":"module"}