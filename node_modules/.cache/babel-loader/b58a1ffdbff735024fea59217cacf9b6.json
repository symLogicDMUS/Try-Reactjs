{"ast":null,"code":"export function getIndexAttackingPiece(pieceIds, allIds) {\n  /*at this step in the process it has been determined that there is a pin. Therefore the attacking piece\n    is the second piece encountered on the path. get the id of that piece. then find where it is in the \n    path as a whole. return that index location\n  **/\n  var pieceId = pieceIds[1];\n  var i = allIds.findIndex(el => el === pieceId);\n  return i;\n} // module.exports = getIndexAttackingPiece;\n\n/** for node.js\nif (require.main === module) {\n    \n    import {sampleBoardDicts} from \"../testObjects/sampleBoardDicts\"\n    import {xyToRf} from \"../coordType/crdCnvrt\"\n    import {printBoard} from \"../printers/printBoard\";\n    import {allExcept} from \"../helpers/allExcept\"\n\n    var board = sampleBoardDicts['checkExample3']\n\n    var pieceIds = ['WP2', 'BR2', 'BK1']\n    var allIds = ['#', 'WP2', 'BR2', 'BK1']\n    var i = getIndexAttackingPiece(pieceIds, allIds)\n    var id_ = allIds[i]\n    var sqrLoc = Object.keys(board).filter(sqr => board[sqr] === id_)[0]\n    printBoard(board, null, [sqrLoc], null, [\"d4\"], allExcept([\"d5\", \"d6\", \"d7\", \"d8\"], sqrLoc))\n\n\n    pieceIds = ['WP3', 'WP4', 'BB2']\n    allIds = ['#', 'WP3', 'WP4', 'BB2']\n    i = getIndexAttackingPiece(pieceIds, allIds)\n    id_ = allIds[i]\n    sqrLoc = Object.keys(board).filter(sqr => board[sqr] === id_)[0]\n    printBoard(board, null, [sqrLoc], null, [\"d4\"], allExcept([\"e5\", \"f6\", \"g7\", \"h8\"], sqrLoc))\n    \n    \n    pieceIds = ['WQ2', 'WB1', 'BR1']\n    allIds = ['#', 'WQ2', 'WB1', 'BR1']\n    i = getIndexAttackingPiece(pieceIds, allIds)\n    id_ = allIds[i]\n    sqrLoc = Object.keys(board).filter(sqr => board[sqr] === id_)[0]\n    printBoard(board, null, [sqrLoc], null, [\"d4\"], allExcept([\"e4\", \"f4\", \"g4\", \"h4\"], sqrLoc))\n    \n    \n    pieceIds = ['WR2', 'BQ2']\n    allIds = ['#', 'WR2', 'BQ2']\n    i = getIndexAttackingPiece(pieceIds, allIds)\n    id_ = allIds[i]\n    sqrLoc = Object.keys(board).filter(sqr => board[sqr] === id_)[0]\n    printBoard(board, null, [sqrLoc], null, [\"d4\"], allExcept([\"e3\", \"f2\", \"g1\"], sqrLoc))\n    \n    \n    pieceIds = ['WP1', 'WR1', 'BQ1']\n    allIds = ['WP1', 'WR1', 'BQ1']\n    i = getIndexAttackingPiece(pieceIds, allIds)\n    id_ = allIds[i]\n    sqrLoc = Object.keys(board).filter(sqr => board[sqr] === id_)[0]\n    printBoard(board, null, [sqrLoc], null, [\"d4\"], allExcept([\"d3\", \"d2\", \"d1\"], sqrLoc))\n    \n    \n    pieceIds = ['WN1', 'BB1']\n    allIds = ['WN1', '#', 'BB1']\n    i = getIndexAttackingPiece(pieceIds, allIds)\n    id_ = allIds[i]\n    sqrLoc = Object.keys(board).filter(sqr => board[sqr] === id_)[0]\n    printBoard(board, null, [sqrLoc], null, [\"d4\"], allExcept([\"c3\", \"b2\", \"a1\"], sqrLoc))\n    \n    \n    pieceIds = ['WQ1', 'BQ3']\n    allIds = ['WQ1', '#', 'BQ3']\n    i = getIndexAttackingPiece(pieceIds, allIds)\n    id_ = allIds[i]\n    sqrLoc = Object.keys(board).filter(sqr => board[sqr] === id_)[0]\n    printBoard(board, null, [sqrLoc], null, [\"d4\"], allExcept([\"c4\", \"b4\", \"a4\"], sqrLoc))\n\n}\n*/","map":{"version":3,"sources":["/home/brian/ChessKingsCouncil/app/src/game_logic/pins/getIndexAttackingPiece.js"],"names":["getIndexAttackingPiece","pieceIds","allIds","pieceId","i","findIndex","el"],"mappings":"AAEA,OAAO,SAASA,sBAAT,CAAgCC,QAAhC,EAA0CC,MAA1C,EAAkD;AACrD;;;;AAIA,MAAIC,OAAO,GAAGF,QAAQ,CAAC,CAAD,CAAtB;AACA,MAAIG,CAAC,GAAGF,MAAM,CAACG,SAAP,CAAiBC,EAAE,IAAIA,EAAE,KAAKH,OAA9B,CAAR;AACA,SAAOC,CAAP;AACH,C,CAED;;AAEA","sourcesContent":["\n\nexport function getIndexAttackingPiece(pieceIds, allIds) {\n    /*at this step in the process it has been determined that there is a pin. Therefore the attacking piece\n      is the second piece encountered on the path. get the id of that piece. then find where it is in the \n      path as a whole. return that index location\n    **/\n    var pieceId = pieceIds[1]\n    var i = allIds.findIndex(el => el === pieceId)\n    return i\n}\n\n// module.exports = getIndexAttackingPiece;\n\n/** for node.js\nif (require.main === module) {\n    \n    import {sampleBoardDicts} from \"../testObjects/sampleBoardDicts\"\n    import {xyToRf} from \"../coordType/crdCnvrt\"\n    import {printBoard} from \"../printers/printBoard\";\n    import {allExcept} from \"../helpers/allExcept\"\n\n    var board = sampleBoardDicts['checkExample3']\n\n    var pieceIds = ['WP2', 'BR2', 'BK1']\n    var allIds = ['#', 'WP2', 'BR2', 'BK1']\n    var i = getIndexAttackingPiece(pieceIds, allIds)\n    var id_ = allIds[i]\n    var sqrLoc = Object.keys(board).filter(sqr => board[sqr] === id_)[0]\n    printBoard(board, null, [sqrLoc], null, [\"d4\"], allExcept([\"d5\", \"d6\", \"d7\", \"d8\"], sqrLoc))\n\n\n    pieceIds = ['WP3', 'WP4', 'BB2']\n    allIds = ['#', 'WP3', 'WP4', 'BB2']\n    i = getIndexAttackingPiece(pieceIds, allIds)\n    id_ = allIds[i]\n    sqrLoc = Object.keys(board).filter(sqr => board[sqr] === id_)[0]\n    printBoard(board, null, [sqrLoc], null, [\"d4\"], allExcept([\"e5\", \"f6\", \"g7\", \"h8\"], sqrLoc))\n    \n    \n    pieceIds = ['WQ2', 'WB1', 'BR1']\n    allIds = ['#', 'WQ2', 'WB1', 'BR1']\n    i = getIndexAttackingPiece(pieceIds, allIds)\n    id_ = allIds[i]\n    sqrLoc = Object.keys(board).filter(sqr => board[sqr] === id_)[0]\n    printBoard(board, null, [sqrLoc], null, [\"d4\"], allExcept([\"e4\", \"f4\", \"g4\", \"h4\"], sqrLoc))\n    \n    \n    pieceIds = ['WR2', 'BQ2']\n    allIds = ['#', 'WR2', 'BQ2']\n    i = getIndexAttackingPiece(pieceIds, allIds)\n    id_ = allIds[i]\n    sqrLoc = Object.keys(board).filter(sqr => board[sqr] === id_)[0]\n    printBoard(board, null, [sqrLoc], null, [\"d4\"], allExcept([\"e3\", \"f2\", \"g1\"], sqrLoc))\n    \n    \n    pieceIds = ['WP1', 'WR1', 'BQ1']\n    allIds = ['WP1', 'WR1', 'BQ1']\n    i = getIndexAttackingPiece(pieceIds, allIds)\n    id_ = allIds[i]\n    sqrLoc = Object.keys(board).filter(sqr => board[sqr] === id_)[0]\n    printBoard(board, null, [sqrLoc], null, [\"d4\"], allExcept([\"d3\", \"d2\", \"d1\"], sqrLoc))\n    \n    \n    pieceIds = ['WN1', 'BB1']\n    allIds = ['WN1', '#', 'BB1']\n    i = getIndexAttackingPiece(pieceIds, allIds)\n    id_ = allIds[i]\n    sqrLoc = Object.keys(board).filter(sqr => board[sqr] === id_)[0]\n    printBoard(board, null, [sqrLoc], null, [\"d4\"], allExcept([\"c3\", \"b2\", \"a1\"], sqrLoc))\n    \n    \n    pieceIds = ['WQ1', 'BQ3']\n    allIds = ['WQ1', '#', 'BQ3']\n    i = getIndexAttackingPiece(pieceIds, allIds)\n    id_ = allIds[i]\n    sqrLoc = Object.keys(board).filter(sqr => board[sqr] === id_)[0]\n    printBoard(board, null, [sqrLoc], null, [\"d4\"], allExcept([\"c4\", \"b4\", \"a4\"], sqrLoc))\n\n}\n*/"]},"metadata":{},"sourceType":"module"}